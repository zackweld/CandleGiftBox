/// <reference types="node" />
import { ListrTaskWrapper } from 'listr2';
import { PushCommandTasksContext } from '../types/commands/push.js';
import { AppVersionDeploymentStatus, DeploymentStatusTypesSchema } from '../types/services/push-service.js';
export declare const getSignedStorageUrl: (appVersionId: number) => Promise<string>;
export declare const uploadClientZipFile: (appVersionId: number, buffer: Buffer) => Promise<{
    url: string;
    sourceUrl: string;
}>;
export declare const getAppVersionDeploymentStatus: (appVersionId: number) => Promise<{
    statusCode: number;
    headers: Record<string, string | string[]>;
    status: "pending" | "started" | "building" | "successful" | "failed" | "building-infra" | "building-app" | "deploying-app";
    error?: {
        message: string;
    } | undefined;
    tip?: string | undefined;
    deployment?: {
        url: string;
        latestUrl: string;
        liveUrl?: string | undefined;
    } | undefined;
}>;
export declare const pollForDeploymentStatus: (appVersionId: number, retryAfter: number, options?: {
    ttl?: number | undefined;
    progressLogger?: ((message: keyof typeof DeploymentStatusTypesSchema, tip?: string) => void) | undefined;
}) => Promise<AppVersionDeploymentStatus>;
export declare const uploadFileToStorage: (cloudStorageUrl: string, fileData: Buffer, fileType: string) => Promise<any>;
export declare const buildClientZip: (ctx: PushCommandTasksContext, task: ListrTaskWrapper<PushCommandTasksContext, any>) => Promise<void>;
export declare const deployClientZip: (ctx: PushCommandTasksContext, task: ListrTaskWrapper<PushCommandTasksContext, any>) => Promise<void>;
export declare const buildAssetToDeployTask: (ctx: PushCommandTasksContext, task: ListrTaskWrapper<PushCommandTasksContext, any>) => Promise<void>;
export declare const prepareEnvironmentTask: (ctx: PushCommandTasksContext) => Promise<void>;
export declare const uploadAssetTask: (ctx: PushCommandTasksContext, task: ListrTaskWrapper<PushCommandTasksContext, any>) => Promise<void>;
export declare const handleDeploymentTask: (ctx: PushCommandTasksContext, task: ListrTaskWrapper<PushCommandTasksContext, any>) => Promise<void>;

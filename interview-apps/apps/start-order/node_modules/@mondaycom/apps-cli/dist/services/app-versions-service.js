import { APP_VERSION_STATUS } from '../consts/app-versions.js';
import { listAppVersionsByAppIdUrl } from '../consts/urls.js';
import { execute } from './api-service.js';
import { listAppVersionsSchema } from './schemas/app-versions-schemas.js';
import logger from '../utils/logger.js';
import { HttpError } from '../types/errors/index.js';
import { HttpMethodTypes } from '../types/services/api-service.js';
import { appsUrlBuilder } from '../utils/urls-builder.js';
export const listAppVersionsByAppId = async (appId) => {
    try {
        const path = listAppVersionsByAppIdUrl(appId);
        const url = appsUrlBuilder(path);
        const response = await execute({
            url,
            headers: { Accept: 'application/json' },
            method: HttpMethodTypes.GET,
        }, listAppVersionsSchema);
        const sortedAppVersions = response.appVersions?.sort((a, b) => b.id - a.id);
        return sortedAppVersions;
    }
    catch (error) {
        if (error instanceof HttpError) {
            throw error;
        }
        throw new Error('Failed to list app versions.');
    }
};
export const defaultVersionByAppId = async (appId, useLiveVersion = false) => {
    logger.info(`Using latest draft version for app id - ${appId}`);
    const appVersions = await listAppVersionsByAppId(appId);
    const latestVersion = appVersions.sort((a, b) => b.id - a.id)[0];
    const allowedStatuses = useLiveVersion
        ? [APP_VERSION_STATUS.LIVE, APP_VERSION_STATUS.DRAFT]
        : [APP_VERSION_STATUS.DRAFT];
    return allowedStatuses.includes(latestVersion.status) ? latestVersion : undefined;
};

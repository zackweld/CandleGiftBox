import { z } from 'zod';
export declare const appStorageApiRecordsResponseSchema: z.ZodObject<{
    key: z.ZodString;
    value: z.ZodString;
    valueLength: z.ZodOptional<z.ZodNumber>;
    backendOnly: z.ZodBoolean;
}, "strip", z.ZodTypeAny, {
    key: string;
    value: string;
    backendOnly: boolean;
    valueLength?: number | undefined;
}, {
    key: string;
    value: string;
    backendOnly: boolean;
    valueLength?: number | undefined;
}>;
export declare const appStorageApiRecordsSearchResponseSearchSchema: z.ZodObject<{
    term: z.ZodString;
    records: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        value: z.ZodString;
        valueLength: z.ZodOptional<z.ZodNumber>;
        backendOnly: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }, {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }>, "many">;
    cursor: z.ZodOptional<z.ZodString>;
    statusCode: z.ZodNumber;
    headers: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    statusCode: number;
    headers: Record<string, string | string[]>;
    term: string;
    records: {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }[];
    cursor?: string | undefined;
}, {
    statusCode: number;
    headers: Record<string, string | string[]>;
    term: string;
    records: {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }[];
    cursor?: string | undefined;
}>;
export declare const appStorageApiRecordsSearchResponseExportSchema: z.ZodObject<{
    records: z.ZodArray<z.ZodObject<{
        key: z.ZodString;
        value: z.ZodString;
        valueLength: z.ZodOptional<z.ZodNumber>;
        backendOnly: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }, {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }>, "many">;
    statusCode: z.ZodNumber;
    headers: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodArray<z.ZodString, "many">, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    statusCode: number;
    headers: Record<string, string | string[]>;
    records: {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }[];
}, {
    statusCode: number;
    headers: Record<string, string | string[]>;
    records: {
        key: string;
        value: string;
        backendOnly: boolean;
        valueLength?: number | undefined;
    }[];
}>;

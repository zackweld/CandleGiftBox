import fs from 'fs';
import * as process from 'process';
import { isDefined } from '../types/guards.js';
import { isLocalEnvironment } from '../utils/env.js';
import { Logger } from '../utils/logger.js';
var KeyValueManager = /** @class */ (function () {
    function KeyValueManager(loggerTag, dataFileName, dataFileFolder) {
        this.logger = new Logger(loggerTag, { mondayInternal: true });
        this.tag = loggerTag;
        if (!isDefined(dataFileName)) {
            this.logger.error("[".concat(this.tag, "] Data file name is not defined"));
            this.dataFilePath = '';
            return;
        }
        this.dataFilePath = "".concat(dataFileFolder, "/").concat(dataFileName);
    }
    KeyValueManager.prototype.readData = function () {
        var isDataFileExists = fs.existsSync(this.dataFilePath);
        if (!isDataFileExists) {
            this.logger.error("[".concat(this.tag, "] Data file does not exist in path"));
            return;
        }
        var data = fs.readFileSync(this.dataFilePath, 'utf8');
        try {
            return JSON.parse(data);
        }
        catch (error) {
            this.logger.error("[".concat(this.tag, "] Corrupted data file. File is not in JSON format"));
            return;
        }
    };
    KeyValueManager.prototype.initDataIfNeeded = function (options) {
        var _a;
        var shouldInvalidate = (_a = options === null || options === void 0 ? void 0 : options.invalidate) !== null && _a !== void 0 ? _a : true;
        if (shouldInvalidate || !this.cachedData) {
            this.initData();
        }
    };
    KeyValueManager.prototype.initData = function () {
        if (isLocalEnvironment()) {
            this.cachedData = process.env;
            return;
        }
        this.cachedData = this.readData();
        if (!isDefined(this.cachedData)) {
            return;
        }
        this.logger.info("[".concat(this.tag, "] Initialized data successfully"), { mondayInternal: true });
    };
    KeyValueManager.prototype.getKeys = function (options) {
        this.initDataIfNeeded(options);
        if (!isDefined(this.cachedData)) {
            this.logger.error("[".concat(this.tag, ".getKeys] There is an issue with loading keys"), { mondayInternal: false });
            return [];
        }
        return Object.keys(this.cachedData);
    };
    KeyValueManager.prototype.get = function (key, options) {
        this.initDataIfNeeded(options);
        if (!isDefined(this.cachedData)) {
            this.logger.error("[".concat(this.tag, ".get] There is an issue with loading data for key"), { mondayInternal: false });
            return null;
        }
        return this.cachedData[key] !== undefined ? this.cachedData[key] : process.env[key];
    };
    return KeyValueManager;
}());
export { KeyValueManager };
//# sourceMappingURL=key-value-manager.abstract.js.map
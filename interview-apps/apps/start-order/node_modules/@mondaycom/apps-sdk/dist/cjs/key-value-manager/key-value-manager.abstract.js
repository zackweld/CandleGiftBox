"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.KeyValueManager = void 0;
var fs_1 = __importDefault(require("fs"));
var process = __importStar(require("process"));
var guards_1 = require("../types/guards.js");
var env_1 = require("../utils/env.js");
var logger_1 = require("../utils/logger.js");
var KeyValueManager = /** @class */ (function () {
    function KeyValueManager(loggerTag, dataFileName, dataFileFolder) {
        this.logger = new logger_1.Logger(loggerTag, { mondayInternal: true });
        this.tag = loggerTag;
        if (!(0, guards_1.isDefined)(dataFileName)) {
            this.logger.error("[".concat(this.tag, "] Data file name is not defined"));
            this.dataFilePath = '';
            return;
        }
        this.dataFilePath = "".concat(dataFileFolder, "/").concat(dataFileName);
    }
    KeyValueManager.prototype.readData = function () {
        var isDataFileExists = fs_1["default"].existsSync(this.dataFilePath);
        if (!isDataFileExists) {
            this.logger.error("[".concat(this.tag, "] Data file does not exist in path"));
            return;
        }
        var data = fs_1["default"].readFileSync(this.dataFilePath, 'utf8');
        try {
            return JSON.parse(data);
        }
        catch (error) {
            this.logger.error("[".concat(this.tag, "] Corrupted data file. File is not in JSON format"));
            return;
        }
    };
    KeyValueManager.prototype.initDataIfNeeded = function (options) {
        var _a;
        var shouldInvalidate = (_a = options === null || options === void 0 ? void 0 : options.invalidate) !== null && _a !== void 0 ? _a : true;
        if (shouldInvalidate || !this.cachedData) {
            this.initData();
        }
    };
    KeyValueManager.prototype.initData = function () {
        if ((0, env_1.isLocalEnvironment)()) {
            this.cachedData = process.env;
            return;
        }
        this.cachedData = this.readData();
        if (!(0, guards_1.isDefined)(this.cachedData)) {
            return;
        }
        this.logger.info("[".concat(this.tag, "] Initialized data successfully"), { mondayInternal: true });
    };
    KeyValueManager.prototype.getKeys = function (options) {
        this.initDataIfNeeded(options);
        if (!(0, guards_1.isDefined)(this.cachedData)) {
            this.logger.error("[".concat(this.tag, ".getKeys] There is an issue with loading keys"), { mondayInternal: false });
            return [];
        }
        return Object.keys(this.cachedData);
    };
    KeyValueManager.prototype.get = function (key, options) {
        this.initDataIfNeeded(options);
        if (!(0, guards_1.isDefined)(this.cachedData)) {
            this.logger.error("[".concat(this.tag, ".get] There is an issue with loading data for key"), { mondayInternal: false });
            return null;
        }
        return this.cachedData[key] !== undefined ? this.cachedData[key] : process.env[key];
    };
    return KeyValueManager;
}());
exports.KeyValueManager = KeyValueManager;
//# sourceMappingURL=key-value-manager.abstract.js.map
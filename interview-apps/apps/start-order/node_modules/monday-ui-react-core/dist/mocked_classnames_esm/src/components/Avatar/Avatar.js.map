{"version":3,"file":"Avatar.js","sources":["../../../../../src/components/Avatar/Avatar.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { AriaRole, useCallback, useMemo } from \"react\";\nimport { isNil } from \"lodash-es\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { ElementAllowedColor, ElementColor, getElementColor } from \"../../utils/colors-vars-map\";\nimport { AvatarSize, AvatarType } from \"./AvatarConstants\";\nimport { AvatarBadge, AvatarBadgeProps } from \"./AvatarBadge\";\nimport { AvatarContent } from \"./AvatarContent\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport ClickableWrapper from \"../Clickable/ClickableWrapper\";\nimport { SubIcon, VibeComponentProps, withStaticProps } from \"../../types\";\nimport styles from \"./Avatar.module.scss\";\n\nexport interface AvatarProps extends VibeComponentProps {\n  src?: string;\n  text?: string;\n  tooltipProps?: Partial<TooltipProps>;\n  ariaLabel?: string;\n  withoutTooltip?: boolean;\n  icon?: SubIcon;\n  type?: AvatarType;\n  /** Class name for the avatar content of text type */\n  textClassName?: string;\n  /** Class name for a div-wrapper of avatar content */\n  avatarContentWrapperClassName?: string;\n  backgroundColor?: ElementColor;\n  customBackgroundColor?: string;\n  role?: AriaRole;\n  size?: AvatarSize;\n  customSize?: number;\n  tabIndex?: number;\n  ariaHidden?: boolean;\n  disabled?: boolean;\n  /**\n   * @deprecated - use square instead\n   */\n  isSquare?: boolean;\n  /**\n   * @deprecated - use disabled instead\n   */\n  isDisabled?: boolean;\n  square?: boolean;\n  topLeftBadgeProps?: AvatarBadgeProps;\n  topRightBadgeProps?: AvatarBadgeProps;\n  bottomLeftBadgeProps?: AvatarBadgeProps;\n  bottomRightBadgeProps?: AvatarBadgeProps;\n  withoutBorder?: boolean;\n  onClick?: (event: React.MouseEvent | React.KeyboardEvent, avatarId: string) => void;\n}\n\nconst Avatar: React.FC<AvatarProps> & {\n  types?: typeof AvatarType;\n  sizes?: typeof AvatarSize;\n  colors?: typeof ElementAllowedColor;\n  backgroundColors?: typeof ElementAllowedColor;\n} = ({\n  id,\n  type = AvatarType.TEXT,\n  className,\n  avatarContentWrapperClassName,\n  textClassName = \"\",\n  size = AvatarSize.LARGE,\n  src,\n  icon,\n  text,\n  tooltipProps,\n  ariaLabel,\n  withoutTooltip = false,\n  role,\n  backgroundColor = Avatar.colors.CHILI_BLUE,\n  square,\n  disabled,\n  // Backward compatibility for props naming\n  isSquare,\n  // Backward compatibility for props naming\n  isDisabled,\n  tabIndex,\n  ariaHidden = false,\n  topLeftBadgeProps,\n  topRightBadgeProps,\n  bottomLeftBadgeProps,\n  bottomRightBadgeProps,\n  withoutBorder = false,\n  customSize = null,\n  customBackgroundColor = null,\n  onClick,\n  \"data-testid\": dataTestId\n}) => {\n  const overrideSquare = backwardCompatibilityForProperties([square, isSquare]);\n  const overrideDisabled = backwardCompatibilityForProperties([disabled, isDisabled], false);\n  const backgroundColorStyle = useMemo(() => {\n    if (customBackgroundColor) return { backgroundColor: customBackgroundColor };\n    return src ? {} : { backgroundColor: getElementColor(backgroundColor) };\n  }, [src, backgroundColor, customBackgroundColor]);\n  const sizeStyle = useMemo(() => {\n    return customSize ? { height: customSize, width: customSize } : {};\n  }, [customSize]);\n\n  const overrideTooltipProps = useMemo(() => {\n    if (withoutTooltip) return undefined;\n\n    if (tooltipProps) {\n      return { content: ariaLabel, ...tooltipProps };\n    } else {\n      return { content: ariaLabel };\n    }\n  }, [ariaLabel, tooltipProps, withoutTooltip]);\n\n  const badgesContainer = useMemo(() => {\n    const badges = [];\n    if (!isNil(topLeftBadgeProps)) {\n      badges.push(\n        <div key=\"top-left-badge\" className={cx(styles.badge, styles.badgeTopLeft)}>\n          <AvatarBadge size={size} {...topLeftBadgeProps} />\n        </div>\n      );\n    }\n    if (!isNil(topRightBadgeProps)) {\n      badges.push(\n        <div key=\"top-right-badge\" className={cx(styles.badge, styles.badgeTopRight)}>\n          <AvatarBadge size={size} {...topRightBadgeProps} />\n        </div>\n      );\n    }\n    if (!isNil(bottomLeftBadgeProps)) {\n      badges.push(\n        <div key=\"bottom-left-badge\" className={cx(styles.badge, styles.badgeBottomLeft)}>\n          <AvatarBadge size={size} {...bottomLeftBadgeProps} />\n        </div>\n      );\n    }\n    if (!isNil(bottomRightBadgeProps)) {\n      badges.push(\n        <div key=\"bottom-right-bade\" className={cx(styles.badge, styles.badgeBottomRight)}>\n          <AvatarBadge size={size} {...bottomRightBadgeProps} />\n        </div>\n      );\n    }\n\n    return badges.length > 0 ? <div className={cx(styles.badges)}>{badges}</div> : null;\n  }, [size, topLeftBadgeProps, topRightBadgeProps, bottomLeftBadgeProps, bottomRightBadgeProps]);\n\n  const defaultTabIndex = useMemo(() => {\n    if (!disabled && (onClick || overrideTooltipProps?.content)) {\n      return 0;\n    }\n    return -1;\n  }, [disabled, onClick, overrideTooltipProps?.content]);\n\n  const overrideTabIndex = tabIndex ?? defaultTabIndex;\n\n  const clickHandler = useCallback(\n    (event: React.MouseEvent | React.KeyboardEvent) => {\n      event.preventDefault();\n      if (onClick) {\n        onClick(event, id);\n      }\n    },\n    [onClick, id]\n  );\n\n  return (\n    <div\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR, id)}\n      className={cx(styles.avatar, styles[size], className)}\n      style={sizeStyle}\n    >\n      <ClickableWrapper\n        isClickable={!!onClick}\n        clickableProps={{\n          onClick: clickHandler,\n          tabIndex: \"-1\",\n          className: styles.clickableWrapper\n        }}\n      >\n        <Tooltip\n          showTrigger={[Tooltip.hideShowTriggers.FOCUS, Tooltip.hideShowTriggers.MOUSE_ENTER]}\n          hideTrigger={[Tooltip.hideShowTriggers.BLUR, Tooltip.hideShowTriggers.MOUSE_LEAVE]}\n          {...overrideTooltipProps}\n        >\n          <div\n            className={cx(\n              styles.circle,\n              getStyle(styles, camelCase(\"circle--\" + type)),\n              {\n                [styles.disabled]: overrideDisabled,\n                [styles.square]: overrideSquare,\n                [styles.withoutBorder]: withoutBorder\n              },\n              avatarContentWrapperClassName\n            )}\n            aria-hidden={ariaHidden}\n            tabIndex={overrideTabIndex}\n            style={{ ...backgroundColorStyle }}\n          >\n            <AvatarContent\n              type={type}\n              size={size}\n              src={src}\n              icon={icon}\n              text={text}\n              ariaLabel={ariaLabel}\n              role={role}\n              textClassName={textClassName}\n            />\n          </div>\n          {badgesContainer}\n        </Tooltip>\n      </ClickableWrapper>\n    </div>\n  );\n};\n\nexport default withStaticProps(Avatar, {\n  types: AvatarType,\n  sizes: AvatarSize,\n  colors: ElementAllowedColor,\n  backgroundColors: ElementAllowedColor\n});\n"],"names":["withStaticProps","Avatar","_ref","id","_ref$type","type","AvatarType","TEXT","className","avatarContentWrapperClassName","_ref$textClassName","textClassName","_ref$size","size","AvatarSize","LARGE","src","icon","text","tooltipProps","ariaLabel","_ref$withoutTooltip","withoutTooltip","role","_ref$backgroundColor","backgroundColor","colors","CHILI_BLUE","disabled","isDisabled","tabIndex","_ref$ariaHidden","ariaHidden","topLeftBadgeProps","topRightBadgeProps","bottomLeftBadgeProps","bottomRightBadgeProps","_ref$withoutBorder","withoutBorder","_ref$customSize","customSize","_ref$customBackground","customBackgroundColor","onClick","dataTestId","overrideSquare","backwardCompatibilityForProperties","square","isSquare","overrideDisabled","backgroundColorStyle","useMemo","getElementColor","sizeStyle","height","width","overrideTooltipProps","Object","assign","content","badgesContainer","badges","isNil","push","React","key","cx","styles","badge","badgeTopLeft","createElement","AvatarBadge","badgeTopRight","badgeBottomLeft","badgeBottomRight","length","defaultTabIndex","overrideTabIndex","clickHandler","useCallback","event","preventDefault","getTestId","ComponentDefaultTestId","AVATAR","avatar","style","ClickableWrapper","isClickable","clickableProps","clickableWrapper","Tooltip","showTrigger","hideShowTriggers","FOCUS","MOUSE_ENTER","hideTrigger","BLUR","MOUSE_LEAVE","circle","getStyle","camelCase","_defineProperty","AvatarContent","types","sizes","ElementAllowedColor","backgroundColors"],"mappings":"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"}
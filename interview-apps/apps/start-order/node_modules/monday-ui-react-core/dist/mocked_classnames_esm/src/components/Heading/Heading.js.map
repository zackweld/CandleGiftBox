{"version":3,"file":"Heading.js","sources":["../../../../../src/components/Heading/Heading.tsx"],"sourcesContent":["import React, { forwardRef, ReactNode } from \"react\";\nimport cx from \"classnames\";\nimport { camelCase } from \"lodash-es\";\nimport VibeComponent from \"../../types/VibeComponent\";\nimport { withStaticProps } from \"../../types\";\nimport { HeadingType, HeadingWeight } from \"./HeadingConstants\";\nimport Typography, { TypographyProps } from \"../Typography/Typography\";\nimport { TypographyAlign, TypographyColor } from \"../Typography/TypographyConstants\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./Heading.module.scss\";\nimport { TypographyContext } from \"../Typography/utils/TypographyContext\";\n\nconst OVERFLOW_TOLERANCE_IN_PX = 4;\n\nexport interface HeadingProps extends TypographyProps {\n  type?: HeadingType;\n  weight?: HeadingWeight;\n  align?: TypographyAlign;\n  color?: TypographyColor;\n  children: ReactNode;\n}\n\nconst Heading: VibeComponent<HeadingProps, HTMLElement> & {\n  types?: typeof HeadingType;\n  weights?: typeof HeadingWeight;\n  colors?: typeof TypographyColor;\n  align?: typeof TypographyAlign;\n} = forwardRef(({ className, type = HeadingType.H1, weight = HeadingWeight.NORMAL, ...typographyProps }, ref) => {\n  return (\n    <TypographyContext.Provider value={{ overflowTolerance: OVERFLOW_TOLERANCE_IN_PX }}>\n      <Typography\n        element={type}\n        ref={ref}\n        className={cx(styles.heading, getStyle(styles, camelCase(type + \"-\" + weight)), className)}\n        {...typographyProps}\n      />\n    </TypographyContext.Provider>\n  );\n});\n\nexport default withStaticProps(Heading, {\n  types: HeadingType,\n  weights: HeadingWeight,\n  align: TypographyAlign,\n  colors: TypographyColor\n});\n"],"names":["withStaticProps","forwardRef","_a","ref","className","_a$type","type","HeadingType","H1","_a$weight","weight","HeadingWeight","NORMAL","typographyProps","__rest","React","createElement","TypographyContext","Provider","value","overflowTolerance","Typography","Object","assign","element","cx","styles","heading","getStyle","camelCase","types","weights","align","TypographyAlign","colors","TypographyColor"],"mappings":"qmBAYA,IA4BeA,EAAAA,EAbXC,GAAW,SAACC,EAAyFC,GAAzF,IAAEC,EAA+DF,EAA/DE,UAASC,EAAsDH,EAApDI,KAAAA,OAAI,IAAAD,EAAGE,EAAYC,GAAEH,EAAAI,EAA+BP,EAA7BQ,OAAAA,OAAM,IAAAD,EAAGE,EAAcC,OAAMH,EAAKI,EAAeC,EAAAZ,EAArF,+BACd,OACEa,EAAAC,cAACC,EAAkBC,SAAQ,CAACC,MAAO,CAAEC,kBAjBR,IAkB3BL,EAAAC,cAACK,EACCC,OAAAC,OAAA,CAAAC,QAASlB,EACTH,IAAKA,EACLC,UAAWqB,EAAGC,EAAOC,QAASC,EAASF,EAAQG,EAAUvB,EAAO,IAAMI,IAAUN,IAC5ES,IAIZ,IAEwC,CACtCiB,MAAOvB,EACPwB,QAASpB,EACTqB,MAAOC,EACPC,OAAQC"}
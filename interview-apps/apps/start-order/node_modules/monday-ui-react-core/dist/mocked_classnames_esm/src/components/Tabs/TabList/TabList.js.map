{"version":3,"file":"TabList.js","sources":["../../../../../../src/components/Tabs/TabList/TabList.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport { camelCase } from \"lodash-es\";\nimport React, { FC, forwardRef, ReactElement, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport useGridKeyboardNavigation from \"../../../hooks/useGridKeyboardNavigation/useGridKeyboardNavigation\";\nimport useMergeRef from \"../../../hooks/useMergeRef\";\nimport usePrevious from \"../../../hooks/usePrevious\";\nimport VibeComponentProps from \"../../../types/VibeComponentProps\";\nimport { NOOP } from \"../../../utils/function-utils\";\nimport { TabProps } from \"../Tab/Tab\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../tests/test-ids-utils\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./TabList.module.scss\";\n\nexport interface TabListProps extends VibeComponentProps {\n  onTabChange?: (tabId: number) => void;\n  activeTabId?: number;\n  tabType?: string;\n  size?: string;\n  noPadding?: boolean;\n  children?: ReactElement<TabProps>[];\n}\n\nconst TabList: FC<TabListProps> = forwardRef(\n  (\n    {\n      className,\n      id,\n      onTabChange = NOOP,\n      activeTabId = 0,\n      tabType = \"Compact\",\n      size,\n      noPadding,\n      children,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [activeTabState, setActiveTabState] = useState<number>(activeTabId);\n\n    const prevActiveTabIdProp = usePrevious(activeTabId);\n\n    useEffect(() => {\n      // Update active tab if changed from props\n      if (activeTabId !== prevActiveTabIdProp && activeTabId !== activeTabState) {\n        setActiveTabState(activeTabId);\n      }\n    }, [activeTabId, prevActiveTabIdProp, activeTabState, setActiveTabState]);\n\n    const disabledTabIds = useMemo(() => {\n      const disabledIds = new Set<number>();\n      React.Children.forEach(children, (child, index) => {\n        if (child.props.disabled) {\n          disabledIds.add(index);\n        }\n      });\n      return disabledIds;\n    }, [children]);\n\n    const onTabSelect = useCallback(\n      (tabId: number) => {\n        if (disabledTabIds.has(tabId)) return;\n        setActiveTabState(tabId);\n        onTabChange && onTabChange(tabId);\n      },\n      [onTabChange, disabledTabIds]\n    );\n\n    const onTabClick = useCallback(\n      (value: HTMLElement | void, tabId: number) => {\n        const tabCallbackFunc = children[tabId].props?.onClick;\n        if (disabledTabIds.has(tabId)) return;\n        if (tabCallbackFunc) tabCallbackFunc(tabId);\n        onTabSelect(tabId);\n      },\n      [children, disabledTabIds, onTabSelect]\n    );\n\n    const getItemByIndex = useCallback((index: number): ReactElement<TabProps> => children[index], [children]);\n    const disabledIndexes = useMemo(() => Array.from(disabledTabIds), [disabledTabIds]);\n    const ulRef = useRef();\n    const { activeIndex: focusIndex, onSelectionAction } = useGridKeyboardNavigation({\n      ref: ulRef,\n      numberOfItemsInLine: children?.length,\n      itemsCount: children?.length,\n      getItemByIndex,\n      onItemClicked: onTabClick,\n      disabledIndexes\n    });\n\n    const tabsToRender = useMemo(() => {\n      const childrenToRender = React.Children.map(children, (child, index) => {\n        return React.cloneElement(child, {\n          value: index,\n          active: activeTabState === index,\n          focus: focusIndex === index,\n          onClick: onSelectionAction,\n          className: cx(styles.tabListTabWrapper, child.props.className),\n          tabInnerClassName: cx(styles.tabListTabInner, child.props.tabInnerClassName)\n        });\n      });\n      return childrenToRender;\n    }, [children, activeTabState, focusIndex, onSelectionAction]);\n\n    return (\n      <div\n        ref={mergedRef}\n        className={cx(styles.tabsWrapper, { [styles.noPadding]: noPadding }, className, [\n          getStyle(styles, camelCase(tabType))\n        ])}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TAB_LIST, id)}\n      >\n        <ul ref={ulRef} tabIndex={0} className={cx(styles.tabsList, [getStyle(styles, size)])} role=\"tablist\">\n          {tabsToRender}\n        </ul>\n      </div>\n    );\n  }\n);\n\nObject.assign(TabList, {\n  isTabList: true\n});\n\nexport default TabList;\n"],"names":["TabList","forwardRef","_ref","ref","className","id","_ref$onTabChange","onTabChange","NOOP","_ref$activeTabId","activeTabId","_ref$tabType","tabType","size","noPadding","children","dataTestId","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","activeTabState","setActiveTabState","prevActiveTabIdProp","usePrevious","useEffect","disabledTabIds","useMemo","disabledIds","Set","React","Children","forEach","child","index","props","disabled","add","onTabSelect","useCallback","tabId","has","onTabClick","value","tabCallbackFunc","_a","onClick","getItemByIndex","disabledIndexes","Array","from","ulRef","_useGridKeyboardNavig","useGridKeyboardNavigation","numberOfItemsInLine","length","itemsCount","onItemClicked","focusIndex","activeIndex","onSelectionAction","tabsToRender","map","cloneElement","active","focus","cx","styles","tabListTabWrapper","tabInnerClassName","tabListTabInner","createElement","tabsWrapper","_defineProperty","getStyle","camelCase","getTestId","ComponentDefaultTestId","TAB_LIST","tabIndex","tabsList","role","Object","assign","isTabList"],"mappings":"msBAsBMA,IAAAA,EAA4BC,GAChC,SAAAC,EAYEC,GACE,IAXAC,EAASF,EAATE,UACAC,EAAEH,EAAFG,GAAEC,EAAAJ,EACFK,YAAAA,OAAcC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAP,EAClBQ,YAAAA,OAAc,IAAHD,EAAG,EAACA,EAAAE,EAAAT,EACfU,QAAAA,OAAU,IAAHD,EAAG,UAASA,EACnBE,EAAIX,EAAJW,KACAC,EAASZ,EAATY,UACAC,EAAQb,EAARa,SACeC,EAAUd,EAAzB,eAIIe,EAAeC,EAAO,MACtBC,EAAYC,EAAYjB,EAAKc,GAEnCI,EAA4CC,EAAiBZ,GAAYa,EAAAC,EAAAH,EAAA,GAAlEI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAElCI,EAAsBC,EAAYlB,GAExCmB,GAAU,WAEJnB,IAAgBiB,GAAuBjB,IAAgBe,GACzDC,EAAkBhB,EAErB,GAAE,CAACA,EAAaiB,EAAqBF,EAAgBC,IAEtD,IAAMI,EAAiBC,GAAQ,WAC7B,IAAMC,EAAc,IAAIC,IAMxB,OALAC,EAAMC,SAASC,QAAQrB,GAAU,SAACsB,EAAOC,GACnCD,EAAME,MAAMC,UACdR,EAAYS,IAAIH,EAEpB,IACON,CACT,GAAG,CAACjB,IAEE2B,EAAcC,GAClB,SAACC,GACKd,EAAee,IAAID,KACvBlB,EAAkBkB,GAClBrC,GAAeA,EAAYqC,GAC7B,GACA,CAACrC,EAAauB,IAGVgB,EAAaH,GACjB,SAACI,EAA2BH,SACpBI,EAAyC,QAAvBC,EAAAlC,EAAS6B,GAAOL,aAAO,IAAAU,OAAA,EAAAA,EAAAC,QAC3CpB,EAAee,IAAID,KACnBI,GAAiBA,EAAgBJ,GACrCF,EAAYE,GACb,GACD,CAAC7B,EAAUe,EAAgBY,IAGvBS,EAAiBR,GAAY,SAACL,GAAa,OAA6BvB,EAASuB,KAAQ,CAACvB,IAC1FqC,EAAkBrB,GAAQ,WAAA,OAAMsB,MAAMC,KAAKxB,KAAiB,CAACA,IAC7DyB,EAAQrC,IACdsC,EAAuDC,EAA0B,CAC/EtD,IAAKoD,EACLG,oBAAqB3C,aAAA,EAAAA,EAAU4C,OAC/BC,WAAY7C,aAAA,EAAAA,EAAU4C,OACtBR,eAAAA,EACAU,cAAef,EACfM,gBAAAA,IANmBU,EAAUN,EAAvBO,YAAyBC,EAAiBR,EAAjBQ,kBAS3BC,EAAelC,GAAQ,WAW3B,OAVyBG,EAAMC,SAAS+B,IAAInD,GAAU,SAACsB,EAAOC,GAC5D,OAAOJ,EAAMiC,aAAa9B,EAAO,CAC/BU,MAAOT,EACP8B,OAAQ3C,IAAmBa,EAC3B+B,MAAOP,IAAexB,EACtBY,QAASc,EACT5D,UAAWkE,EAAGC,EAAOC,kBAAmBnC,EAAME,MAAMnC,WACpDqE,kBAAmBH,EAAGC,EAAOG,gBAAiBrC,EAAME,MAAMkC,oBAE9D,GAED,GAAE,CAAC1D,EAAUU,EAAgBqC,EAAYE,IAE1C,OACE9B,EACEyC,cAAA,MAAA,CAAAxE,IAAKgB,EACLf,UAAWkE,EAAGC,EAAOK,YAAWC,EAAKN,CAAAA,EAAAA,EAAOzD,UAAYA,GAAaV,EAAW,CAC9E0E,EAASP,EAAQQ,EAAUnE,MAE7BP,GAAIA,gBACSW,GAAcgE,EAAUC,EAAuBC,SAAU7E,IAEtE6B,EAAAyC,cAAA,KAAA,CAAIxE,IAAKoD,EAAO4B,SAAU,EAAG/E,UAAWkE,EAAGC,EAAOa,SAAU,CAACN,EAASP,EAAQ1D,KAASwE,KAAK,WACzFpB,GAIT,IAGFqB,OAAOC,OAAOvF,EAAS,CACrBwF,WAAW"}
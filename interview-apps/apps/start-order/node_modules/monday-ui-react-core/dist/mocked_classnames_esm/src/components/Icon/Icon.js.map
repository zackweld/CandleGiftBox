{"version":3,"file":"Icon.js","sources":["../../../../../src/components/Icon/Icon.tsx"],"sourcesContent":["import { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { CSSProperties, forwardRef, Ref } from \"react\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { IconType } from \"./IconConstants\";\nimport CustomSvgIcon from \"./CustomSvgIcon/CustomSvgIcon\";\nimport FontIcon from \"./FontIcon/FontIcon\";\nimport useIconProps from \"./hooks/useIconProps\";\nimport { VibeComponentProps, VibeComponent, MouseEventCallBack, SubIcon, withStaticProps } from \"../../types\";\n\n// eslint-disable-next-line no-unused-vars,@typescript-eslint/no-unused-vars,@typescript-eslint/no-empty-function\nconst CLICK_NOOP = (_event: React.MouseEvent) => {};\n\nexport interface IconSubComponentProps {\n  ref?: Ref<HTMLElement>;\n  id?: string;\n  size?: string | number;\n  onClick?: MouseEventCallBack;\n  className?: string;\n  style?: CSSProperties;\n  \"data-testid\"?: string;\n}\n\nfunction renderIcon(Icon: SubIcon, props: IconSubComponentProps) {\n  const dataTestId = props[\"data-testid\"];\n  return <Icon {...props} data-testid={dataTestId || getTestId(ComponentDefaultTestId.ICON, props.id)} />;\n}\n\nexport interface IconProps extends VibeComponentProps {\n  // eslint-disable-next-line no-unused-vars\n  onClick?: (event: React.MouseEvent) => void;\n  /**\n   * We support three types of icons - SVG, FONT and SRC (classname) so this prop is either the name of the icon or the component\n   */\n  icon: SubIcon;\n  /**\n   * Is icon is a button\n   */\n  clickable?: boolean;\n  /**\nmo   * Icon aria label [aria label](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-label)\n   */\n  iconLabel?: string;\n  /**\n   *  The type of the component - svg, font or custom svg (using [`react-inlinesvg`](https://github.com/gilbarbara/react-inlinesvg#readme))\n   */\n  iconType?: IconType;\n  /**\n   * Size for font icon\n   */\n  iconSize?: number | string;\n  /**\n   * Remove focus style\n   */\n  ignoreFocusStyle?: boolean;\n  tabindex?: number | string;\n  /**\n   * Hide icon asset from screen reader. No need to set value for this prop when `clickable` is false\n   */\n  ariaHidden?: boolean;\n  style?: React.CSSProperties;\n  /**\n   * When using svg from src (Icon.type.SRC) this boolean will transform the \"fill\" property to \"currentColor\"\n   */\n  useCurrentColor?: boolean;\n  /**\n   * Override the default color with a custom one\n   */\n  customColor?: string;\n}\n\nconst Icon: VibeComponent<IconProps, HTMLElement> & { type?: typeof IconType } = forwardRef(\n  (\n    {\n      /**\n       * component id\n       */\n      id,\n      onClick = CLICK_NOOP,\n      className,\n      icon = \"\",\n      clickable = true,\n      iconLabel,\n      iconType = IconType.SVG,\n      iconSize = 16,\n      ignoreFocusStyle = false,\n      tabindex: externalTabIndex,\n      ariaHidden,\n      style,\n      useCurrentColor = false,\n      customColor,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const overrideExternalTabIndex = externalTabIndex && +externalTabIndex;\n    const { screenReaderAccessProps, onClickCallback, computedClassName, iconRef } = useIconProps({\n      onClick,\n      iconLabel,\n      clickable,\n      className,\n      isDecorationOnly: ariaHidden,\n      ignoreFocusStyle,\n      externalTabIndex: overrideExternalTabIndex\n    });\n\n    const mergedRef = useMergeRef(ref, iconRef);\n\n    if (!icon) {\n      return null;\n    }\n\n    // Replace in major version change with more accurate check\n    const isFunctionType = typeof icon === \"function\";\n\n    const overrideDataTestId = dataTestId || getTestId(ComponentDefaultTestId.ICON, id);\n\n    // Replace in major version change with more accurate check\n    if (iconType === IconType.SVG || isFunctionType || typeof icon === \"object\") {\n      return renderIcon(icon, {\n        id,\n        ...screenReaderAccessProps,\n        ref: isFunctionType ? undefined : mergedRef,\n        size: iconSize.toString(),\n        onClick,\n        className: computedClassName,\n        style,\n        \"data-testid\": overrideDataTestId\n      });\n    }\n    if (iconType === IconType.SRC) {\n      return (\n        <CustomSvgIcon\n          id={id}\n          src={icon}\n          {...screenReaderAccessProps}\n          className={cx(computedClassName)}\n          onClick={onClickCallback}\n          replaceToCurrentColor={useCurrentColor}\n          customColor={customColor}\n          data-testid={overrideDataTestId}\n        />\n      );\n    }\n    return (\n      <FontIcon\n        id={id}\n        {...screenReaderAccessProps}\n        className={cx(computedClassName)}\n        onClick={onClickCallback}\n        ref={mergedRef}\n        icon={icon}\n        data-testid={overrideDataTestId}\n      />\n    );\n  }\n);\n\nexport default withStaticProps(Icon, {\n  type: IconType\n});\n"],"names":["CLICK_NOOP","_event","withStaticProps","forwardRef","_ref","ref","id","_ref$onClick","onClick","_ref$icon","icon","_ref$clickable","clickable","_ref$iconType","iconType","IconType","SVG","_ref$iconSize","iconSize","_ref$ignoreFocusStyle","ignoreFocusStyle","externalTabIndex","tabindex","style","_ref$useCurrentColor","useCurrentColor","customColor","dataTestId","_useIconProps","useIconProps","iconLabel","className","isDecorationOnly","ariaHidden","screenReaderAccessProps","onClickCallback","computedClassName","mergedRef","useMergeRef","iconRef","isFunctionType","overrideDataTestId","getTestId","ComponentDefaultTestId","ICON","_typeof","Icon","props","React","Object","assign","renderIcon","undefined","size","SRC","createElement","CustomSvgIcon","src","cx","replaceToCurrentColor","FontIcon","type"],"mappings":"6eAWA,IAAMA,EAAa,SAACC,KA4DpB,IAuFeC,EAAAA,EAvFkEC,GAC/E,SAAAC,EAqBEC,GACE,IAjBAC,EAAEF,EAAFE,GAAEC,EAAAH,EACFI,QAAAA,OAAUR,IAAHO,EAAGP,EAAUO,EACXE,EAAAL,EACTM,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EAAAE,EAAAP,EACTQ,UACSC,EAAAT,EACTU,SAAAA,OAAQ,IAAAD,EAAGE,EAASC,IAAGH,EAAAI,EAAAb,EACvBc,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EAAAE,EAAAf,EACbgB,iBACUC,EAAgBjB,EAA1BkB,SAEAC,EAAKnB,EAALmB,MAAKC,EAAApB,EACLqB,gBAAAA,OAAkB,IAAHD,GAAQA,EACvBE,EAAWtB,EAAXsB,YACeC,EAAUvB,EAAzB,eAKFwB,EAAiFC,EAAa,CAC5FrB,QAAAA,EACAsB,UAhBS1B,EAAT0B,UAiBAlB,eAlBY,IAAHD,GAAOA,EAmBhBoB,UArBS3B,EAAT2B,UAsBAC,iBAdU5B,EAAV6B,WAeAb,sBAjBmB,IAAHD,GAAQA,EAkBxBE,iBAR+BA,IAAqBA,IAC9Ca,EAAuBN,EAAvBM,wBAAyBC,EAAeP,EAAfO,gBAAiBC,EAAiBR,EAAjBQ,kBAU5CC,EAAYC,EAAYjC,EAV8CuB,EAAPW,SAYrE,IAAK7B,EACH,OAAO,KAIT,IAAM8B,EAAiC,mBAAT9B,EAExB+B,EAAqBd,GAAce,EAAUC,EAAuBC,KAAMtC,GAGhF,OAAIQ,IAAaC,EAASC,KAAOwB,GAAkC,WAAhBK,EAAOnC,GA/F9D,SAAoBoC,EAAeC,GAEjC,OAAOC,gBAACF,EAAIG,OAAAC,OAAA,CAAA,EAAKH,EAAoB,CAAA,cADlBA,EAAM,gBAC0BL,EAAUC,EAAuBC,KAAMG,EAAMzC,MAClG,CA6Fa6C,CAAWzC,EAChBuC,OAAAC,OAAAD,OAAAC,OAAA,CAAA5C,GAAAA,GACG4B,GAAuB,CAC1B7B,IAAKmC,OAAiBY,EAAYf,EAClCgB,KAAMnC,KACNV,QAAAA,EACAuB,UAAWK,EACXb,MAAAA,EACA,cAAekB,KAGf3B,IAAaC,EAASuC,IAEtBN,EAACO,cAAAC,EACCP,OAAAC,OAAA,CAAA5C,GAAIA,EACJmD,IAAK/C,GACDwB,EACJ,CAAAH,UAAW2B,EAAGtB,GACd5B,QAAS2B,EACTwB,sBAAuBlC,EACvBC,YAAaA,EAAW,cACXe,KAKjBO,EAAAO,cAACK,EAAQX,OAAAC,OAAA,CACP5C,GAAIA,GACA4B,EACJ,CAAAH,UAAW2B,EAAGtB,GACd5B,QAAS2B,EACT9B,IAAKgC,EACL3B,KAAMA,EAAI,cACG+B,IAGnB,IAGmC,CACnCoB,KAAM9C"}
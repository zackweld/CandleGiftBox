{"version":3,"file":"ThemeProvider.js","sources":["../../../../../src/components/ThemeProvider/ThemeProvider.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { FC, ReactElement, useEffect, useLayoutEffect, useMemo, useState } from \"react\";\nimport { SystemTheme, Theme, ThemeColor } from \"./ThemeProviderConstants\";\nimport {\n  addSystemThemeClassNameToBody,\n  generateRandomAlphaString,\n  generateThemeCssOverride,\n  isAnySystemThemeClassNameOnBody,\n  removeSystemThemeClassNameFromBody,\n  shouldGenerateTheme\n} from \"./ThemeProviderUtils\";\nimport { withStaticProps } from \"../../types\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\n\nexport interface ThemeProviderProps {\n  /**\n   * @deprecated use themeConfig instead\n   */\n  theme?: Theme;\n  /**\n   * The theme config to apply, consists of a \"name\" - the name of css class that will be added to the children, which should be unique, and the object of colors overrides for each system theme.\n   */\n  themeConfig?: Theme;\n  /**\n   * The children to render with the theme\n   */\n  children: ReactElement;\n  /**\n   * String which adds up to theme name selector to make it more specific (in case if themeConfig.name is colliding with some other class name)\n   */\n  themeClassSpecifier?: string;\n  /**\n   * The system theme to apply to the body element on mount, if there is no theme class name on the body element already\n   */\n  systemTheme?: SystemTheme;\n  /**\n   * ClassName to add to the wrapping div\n   */\n  className?: string;\n}\n\nconst ThemeProvider: FC<ThemeProviderProps> & {\n  systemThemes?: typeof SystemTheme;\n  colors?: typeof ThemeColor;\n} = ({ themeConfig, theme, children, themeClassSpecifier: customThemeClassSpecifier, systemTheme, className }) => {\n  const overrideThemeConfig = backwardCompatibilityForProperties([themeConfig, theme]);\n  const [stylesLoaded, setStylesLoaded] = useState(false);\n  const themeClassSpecifier = useMemo(\n    () => customThemeClassSpecifier || generateRandomAlphaString(),\n    [customThemeClassSpecifier]\n  );\n\n  useEffect(() => {\n    if (theme) {\n      console.warn(\n        \"vibe ThemeProvider: theme prop is deprecated and will be removed soon, please use themeConfig prop instead - \",\n        theme\n      );\n    }\n  }, [theme]);\n\n  // Add the systemTheme class name to the body on mount\n  useLayoutEffect(() => {\n    if (!systemTheme) {\n      return;\n    }\n\n    if (isAnySystemThemeClassNameOnBody()) {\n      // If there is already a systemTheme class name on the body, we don't want to override it\n      return;\n    }\n\n    addSystemThemeClassNameToBody(systemTheme);\n\n    return () => {\n      // Cleanup the systemTheme class name from the body on ThemeProvider unmount\n      removeSystemThemeClassNameFromBody(systemTheme);\n    };\n  }, [systemTheme]);\n\n  useEffect(() => {\n    if (!shouldGenerateTheme(overrideThemeConfig)) {\n      return;\n    }\n    if (document.getElementById(overrideThemeConfig.name)) {\n      setStylesLoaded(true);\n      return;\n    }\n\n    const styleElement = document.createElement(\"style\");\n    styleElement.type = \"text/css\";\n    styleElement.id = overrideThemeConfig.name;\n    const themeCssOverride = generateThemeCssOverride(overrideThemeConfig, themeClassSpecifier);\n\n    try {\n      styleElement.appendChild(document.createTextNode(themeCssOverride));\n      document.head.appendChild(styleElement);\n      setStylesLoaded(true);\n    } catch (error) {\n      console.error(\"vibe ThemeProvider: error inserting theme-generated css - \", error);\n    }\n\n    return () => {\n      document.head.removeChild(styleElement);\n    };\n  }, [themeClassSpecifier, overrideThemeConfig]);\n\n  if (!stylesLoaded && shouldGenerateTheme(overrideThemeConfig)) {\n    // Waiting for styles to load before children render\n    return null;\n  }\n\n  // Pass the theme name as a class to the div wrapping children - to scope the effect of the theme\n  return <div className={cx(overrideThemeConfig?.name, themeClassSpecifier, className)}>{children}</div>;\n};\n\nexport default withStaticProps(ThemeProvider, {\n  systemThemes: SystemTheme,\n  colors: ThemeColor\n});\n"],"names":["withStaticProps","_ref","theme","children","customThemeClassSpecifier","themeClassSpecifier","systemTheme","className","overrideThemeConfig","backwardCompatibilityForProperties","themeConfig","_useState","useState","_useState2","_slicedToArray","stylesLoaded","setStylesLoaded","useMemo","generateRandomAlphaString","useEffect","console","warn","useLayoutEffect","isAnySystemThemeClassNameOnBody","addSystemThemeClassNameToBody","removeSystemThemeClassNameFromBody","shouldGenerateTheme","document","getElementById","name","styleElement","createElement","type","id","themeCssOverride","generateThemeCssOverride","appendChild","createTextNode","head","error","removeChild","React","cx","systemThemes","SystemTheme","colors","ThemeColor"],"mappings":"6pBAyCA,IA2EeA,EAAAA,GAxEX,SAHeC,GAG8F,IAA7FC,EAAKD,EAALC,MAAOC,EAAQF,EAARE,SAA+BC,EAAyBH,EAA9CI,oBAAgDC,EAAWL,EAAXK,YAAaC,EAASN,EAATM,UAC1FC,EAAsBC,EAAmC,CAD/CR,EAAXS,YACwER,IAC7ES,EAAwCC,GAAS,GAAMC,EAAAC,EAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BR,EAAsBY,GAC1B,WAAA,OAAMb,GAA6Bc,MACnC,CAACd,IA0DH,OAvDAe,GAAU,WACJjB,GACFkB,QAAQC,KACN,gHACAnB,EAGN,GAAG,CAACA,IAGJoB,GAAgB,WACd,GAAKhB,IAIDiB,IAOJ,OAFAC,EAA8BlB,GAEvB,WAELmB,EAAmCnB,GAEvC,GAAG,CAACA,IAEJa,GAAU,WACR,GAAKO,EAAoBlB,GAAzB,CAGA,IAAImB,SAASC,eAAepB,EAAoBqB,MAAhD,CAKA,IAAMC,EAAeH,SAASI,cAAc,SAC5CD,EAAaE,KAAO,WACpBF,EAAaG,GAAKzB,EAAoBqB,KACtC,IAAMK,EAAmBC,EAAyB3B,EAAqBH,GAEvE,IACEyB,EAAaM,YAAYT,SAASU,eAAeH,IACjDP,SAASW,KAAKF,YAAYN,GAC1Bd,GAAgB,EACjB,CAAC,MAAOuB,GACPnB,QAAQmB,MAAM,6DAA8DA,EAC7E,CAED,OAAO,WACLZ,SAASW,KAAKE,YAAYV,GAhB3B,CAFCd,GAAgB,EAFjB,CAsBH,GAAG,CAACX,EAAqBG,KAEpBO,GAAgBW,EAAoBlB,GAEhC,KAIFiC,EAAAV,cAAA,MAAA,CAAKxB,UAAWmC,EAAGlC,aAAA,EAAAA,EAAqBqB,KAAMxB,EAAqBE,IAAaJ,EACzF,GAE8C,CAC5CwC,aAAcC,EACdC,OAAQC"}
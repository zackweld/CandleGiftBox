{"version":3,"file":"useIconProps.js","sources":["../../../../../../src/components/Icon/hooks/useIconProps.tsx"],"sourcesContent":["import { KeyboardEvent, MouseEvent, UIEvent, useCallback, useMemo, useRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport useEventListener from \"../../../hooks/useEventListener\";\nimport useKeyEvent from \"../../../hooks/useKeyEvent\";\nimport { keyCodes } from \"../../../constants/keyCodes\";\nimport useIconScreenReaderAccessProps from \"../../../hooks/useIconScreenReaderAccessProps\";\nimport styles from \"../Icon.module.scss\";\n\nconst KEYS = [keyCodes.ENTER, keyCodes.SPACE];\n\nexport default function useIconProps({\n  onClick,\n  className,\n  clickable,\n  ignoreFocusStyle,\n  isDecorationOnly,\n  iconLabel,\n  externalTabIndex\n}: {\n  onClick?: (event: UIEvent) => void;\n  className?: string;\n  clickable?: boolean;\n  ignoreFocusStyle?: boolean;\n  isDecorationOnly?: boolean;\n  iconLabel?: string;\n  externalTabIndex?: number | undefined;\n}) {\n  const iconRef = useRef(null);\n  const onEnterCallback = useCallback(\n    (event: KeyboardEvent) => {\n      const isActive = document.activeElement === iconRef.current;\n      if (!isActive) {\n        return;\n      }\n      onClick(event);\n    },\n    [iconRef, onClick]\n  );\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    event.preventDefault();\n  }, []);\n\n  const computedClassName = useMemo(() => {\n    return cx(styles.icon, className, {\n      [styles.clickable]: clickable,\n      [styles.noFocusStyle]: ignoreFocusStyle\n    });\n  }, [clickable, className, ignoreFocusStyle]);\n\n  useEventListener({\n    eventName: \"mousedown\",\n    callback: onMouseDown,\n    ref: iconRef\n  });\n\n  useKeyEvent({\n    keys: KEYS,\n    ref: iconRef,\n    callback: onEnterCallback,\n    ignoreDocumentFallback: true,\n    capture: true,\n    stopPropagation: true,\n    preventDefault: true\n  });\n\n  const onClickCallback = useCallback(\n    (event: MouseEvent) => {\n      const callback = onClick || NOOP;\n      callback(event);\n    },\n    [onClick]\n  );\n\n  const screenReaderAccessProps = useIconScreenReaderAccessProps({\n    isClickable: clickable,\n    label: iconLabel,\n    isDecorationOnly\n  });\n\n  screenReaderAccessProps.tabIndex = externalTabIndex ?? screenReaderAccessProps.tabIndex;\n\n  return {\n    screenReaderAccessProps,\n    onClickCallback,\n    computedClassName,\n    onEnterCallback,\n    iconRef\n  };\n}\n"],"names":["KEYS","keyCodes","ENTER","SPACE","useIconProps","_ref","onClick","className","clickable","ignoreFocusStyle","isDecorationOnly","iconLabel","externalTabIndex","iconRef","useRef","onEnterCallback","useCallback","event","document","activeElement","current","onMouseDown","preventDefault","computedClassName","useMemo","cx","styles","icon","_defineProperty","noFocusStyle","useEventListener","eventName","callback","ref","useKeyEvent","keys","ignoreDocumentFallback","capture","stopPropagation","onClickCallback","NOOP","screenReaderAccessProps","useIconScreenReaderAccessProps","isClickable","label","tabIndex"],"mappings":"sdASA,IAAMA,EAAO,CAACC,EAASC,MAAOD,EAASE,OAEzB,SAAUC,EAAYC,GAgBnC,IAfCC,EAAOD,EAAPC,QACAC,EAASF,EAATE,UACAC,EAASH,EAATG,UACAC,EAAgBJ,EAAhBI,iBACAC,EAAgBL,EAAhBK,iBACAC,EAASN,EAATM,UACAC,EAAgBP,EAAhBO,iBAUMC,EAAUC,EAAO,MACjBC,EAAkBC,GACtB,SAACC,GACkBC,SAASC,gBAAkBN,EAAQO,SAIpDd,EAAQW,EACV,GACA,CAACJ,EAASP,IAGNe,EAAcL,GAAY,SAACC,GAC/BA,EAAMK,gBACP,GAAE,IAEGC,EAAoBC,GAAQ,WAChC,OAAOC,EAAGC,EAAOC,KAAMpB,EAASqB,EAAAA,EAAA,CAAA,EAC7BF,EAAOlB,UAAYA,GACnBkB,EAAOG,aAAepB,GAE1B,GAAE,CAACD,EAAWD,EAAWE,IAE1BqB,EAAiB,CACfC,UAAW,YACXC,SAAUX,EACVY,IAAKpB,IAGPqB,EAAY,CACVC,KAAMnC,EACNiC,IAAKpB,EACLmB,SAAUjB,EACVqB,wBAAwB,EACxBC,SAAS,EACTC,iBAAiB,EACjBhB,gBAAgB,IAGlB,IAAMiB,EAAkBvB,GACtB,SAACC,IACkBX,GAAWkC,GACnBvB,EACX,GACA,CAACX,IAGGmC,EAA0BC,EAA+B,CAC7DC,YAAanC,EACboC,MAAOjC,EACPD,iBAAAA,IAKF,OAFA+B,EAAwBI,SAAWjC,QAAAA,EAAoB6B,EAAwBI,SAExE,CACLJ,wBAAAA,EACAF,gBAAAA,EACAhB,kBAAAA,EACAR,gBAAAA,EACAF,QAAAA,EAEJ"}
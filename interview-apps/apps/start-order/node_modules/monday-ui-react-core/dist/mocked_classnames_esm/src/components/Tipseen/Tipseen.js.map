{"version":3,"file":"Tipseen.js","sources":["../../../../../src/components/Tipseen/Tipseen.tsx"],"sourcesContent":["import { forwardRef, Fragment, ReactElement, useEffect, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { AnimationType, DialogPosition, EMPTY_ARR, HideShowEvent, JustifyType } from \"../../constants\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Tooltip from \"../../components/Tooltip/Tooltip\";\nimport Button from \"../../components/Button/Button\";\nimport IconButton from \"../../components/IconButton/IconButton\";\nimport CloseSmall from \"../../components/Icon/Icons/components/CloseSmall\";\nimport TipseenTitle from \"./TipseenTitle\";\nimport { TIPSEEN_CLOSE_BUTTON_ARIA_LABEL, TipseenCloseButtonTheme, TipseenColor } from \"./TipseenConstants\";\nimport { ElementContent, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { Modifier } from \"react-popper\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport Text from \"../Text/Text\";\nimport styles from \"./Tipseen.module.scss\";\nimport { TooltipTheme } from \"../Tooltip/TooltipConstants\";\nimport { ButtonColor } from \"../Button/ButtonConstants\";\nimport { TypographyColor } from \"../Typography/TypographyConstants\";\nimport React from \"react\";\nimport { useWarnDeprecated } from \"../../utils/warn-deprecated\";\n\nexport interface TipseenProps extends VibeComponentProps {\n  /**\n   * Classname for overriding TipseenTitle styles\n   */\n  titleClassName?: string;\n  position?: DialogPosition;\n  animationType?: AnimationType;\n  hideDelay?: number;\n  showDelay?: number;\n  title?: string;\n  /**\n   * @deprecated - use hideCloseButton instead\n   */\n  isCloseButtonHidden?: boolean;\n  hideCloseButton?: boolean;\n  children?: ReactElement;\n  containerSelector?: string;\n  hideTrigger?: HideShowEvent | Array<HideShowEvent>;\n  showTrigger?: HideShowEvent | Array<HideShowEvent>;\n  justify?: JustifyType;\n  width?: number;\n  moveBy?: MoveBy;\n  hideWhenReferenceHidden?: boolean;\n  /**\n   * when false, the arrow of the tooltip is hidden\n   */\n  tip?: boolean;\n  /** Class name for a tooltip's arrow */\n  tooltipArrowClassName?: string;\n  /**\n   * PopperJS Modifiers type\n   * https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Modifier<unknown>>;\n  closeAriaLabel?: string;\n  onClose?: () => void;\n  // Better be required, but it might be a breaking change\n  content?: ElementContent;\n  /**\n   * Control the color of the Tipseen close button. Dark theme can be usfull while presenting bright images under the tipseen image\n   */\n  closeButtonTheme?: TipseenCloseButtonTheme;\n  floating?: boolean;\n  /** The color of the Tipseen */\n  color?: TipseenColor;\n}\n\nexport const TipseenContext = React.createContext<TipseenColor>(TipseenColor.PRIMARY);\n\nconst Tipseen: VibeComponent<TipseenProps> & {\n  closeButtonThemes?: typeof TipseenCloseButtonTheme;\n  positions?: typeof DialogPosition;\n  animationTypes?: typeof AnimationType;\n  justifyTypes?: typeof JustifyType;\n  hideShowTriggers?: typeof HideShowEvent;\n  colors?: typeof TipseenColor;\n} = forwardRef(\n  (\n    {\n      className,\n      id,\n      position = DialogPosition.BOTTOM,\n      animationType = AnimationType.EXPAND,\n      hideDelay = 0,\n      showDelay = 0,\n      title,\n      titleClassName,\n      hideCloseButton,\n      // Backward compatability for hideCloseButton\n      isCloseButtonHidden,\n      closeButtonTheme = TipseenCloseButtonTheme.LIGHT,\n      onClose,\n      closeAriaLabel,\n      children = null,\n      content,\n      justify = JustifyType.CENTER,\n      containerSelector,\n      hideTrigger = EMPTY_ARR,\n      showTrigger = EMPTY_ARR,\n      width,\n      moveBy,\n      hideWhenReferenceHidden = false,\n      tip = true,\n      tooltipArrowClassName,\n      modifiers = EMPTY_ARR,\n      floating = false,\n      color: colorProp,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    useWarnDeprecated({\n      component: \"Tipseen\",\n      condition: colorProp === undefined,\n      message:\n        \"The default `color` prop will be changed to 'Tipseen.colors.INVERTED' in the next major version. To keep current color, please use `color={Tipseen.colors.PRIMARY}`\"\n    });\n\n    const color = colorProp ?? TipseenColor.PRIMARY;\n\n    const defaultDelayOpen =\n      Array.isArray(showTrigger) && Array.isArray(hideTrigger) && showTrigger.length === 0 && showDelay > 0;\n\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const [delayedOpen, setDelayOpen] = useState(!defaultDelayOpen);\n    const overrideCloseAriaLabel = closeAriaLabel || TIPSEEN_CLOSE_BUTTON_ARIA_LABEL;\n    const overrideHideCloseButton = backwardCompatibilityForProperties([hideCloseButton, isCloseButtonHidden], false);\n\n    useEffect(() => {\n      let timeout: NodeJS.Timeout;\n      if (showDelay) {\n        timeout = setTimeout(() => {\n          setDelayOpen(true);\n        }, showDelay);\n      }\n      return () => {\n        clearTimeout(timeout);\n      };\n    }, [showDelay, setDelayOpen]);\n\n    const textColor = useMemo(() => {\n      return color === TipseenColor.INVERTED ? TypographyColor.ON_INVERTED : TypographyColor.ON_PRIMARY;\n    }, [color]);\n    const closeButtonColor = useMemo(() => {\n      if (closeButtonTheme === TipseenCloseButtonTheme.LIGHT) {\n        return color === TipseenColor.INVERTED ? ButtonColor.ON_INVERTED_BACKGROUND : ButtonColor.ON_PRIMARY_COLOR;\n      } else {\n        return closeButtonTheme;\n      }\n    }, [color, closeButtonTheme]);\n\n    const TipseenWrapper = ref || id ? \"div\" : Fragment;\n    const tooltipContent = (\n      <div>\n        <div className={cx(styles.tipseenHeader)}>\n          {overrideHideCloseButton ? null : (\n            <IconButton\n              hideTooltip\n              className={cx(styles.tipseenCloseButton, {\n                [styles.dark]:\n                  closeButtonTheme === TipseenCloseButtonTheme.DARK ||\n                  closeButtonTheme === TipseenCloseButtonTheme.FIXED_DARK\n              })}\n              onClick={onClose}\n              size={Button.sizes.XS}\n              kind={Button.kinds.TERTIARY}\n              // @ts-ignore\n              color={closeButtonColor}\n              ariaLabel={overrideCloseAriaLabel}\n              icon={CloseSmall}\n            />\n          )}\n          <TipseenTitle text={title} className={cx(styles.tipseenTitle, titleClassName)} />\n        </div>\n        <Text color={textColor} type={Text.types.TEXT2} element=\"p\" className={cx(styles.tipseenContent)}>\n          <TipseenContext.Provider value={color}>{content}</TipseenContext.Provider>\n        </Text>\n      </div>\n    );\n\n    return (\n      <TipseenWrapper ref={mergedRef} id={id} data-testid={dataTestId || getTestId(ComponentDefaultTestId.TIPSEEN, id)}>\n        <Tooltip\n          className={cx(styles.tipseenWrapper, className, {\n            [styles.tipseenWrapperWithoutCustomWidth]: !width,\n            [styles.floating]: floating\n          })}\n          arrowClassName={tooltipArrowClassName}\n          style={width ? { width } : undefined}\n          shouldShowOnMount={!defaultDelayOpen}\n          position={position}\n          animationType={animationType}\n          hideDelay={hideDelay}\n          showDelay={showDelay}\n          hideTrigger={hideTrigger}\n          showTrigger={showTrigger}\n          content={tooltipContent}\n          theme={color === TipseenColor.INVERTED ? TooltipTheme.Dark : TooltipTheme.Primary}\n          justify={justify}\n          containerSelector={containerSelector}\n          disableDialogSlide={false}\n          moveBy={moveBy}\n          hideWhenReferenceHidden={hideWhenReferenceHidden}\n          tip={tip && !floating}\n          modifiers={modifiers}\n          open={defaultDelayOpen ? delayedOpen : undefined}\n          forceRenderWithoutChildren={floating}\n        >\n          {children}\n        </Tooltip>\n      </TipseenWrapper>\n    );\n  }\n);\n\nexport default withStaticProps(Tipseen, {\n  closeButtonThemes: TipseenCloseButtonTheme,\n  positions: DialogPosition,\n  animationTypes: AnimationType,\n  justifyTypes: JustifyType,\n  hideShowTriggers: HideShowEvent,\n  colors: TipseenColor\n});\n"],"names":["TipseenContext","React","createContext","TipseenColor","PRIMARY","withStaticProps","forwardRef","_ref","ref","className","id","_ref$position","position","DialogPosition","BOTTOM","_ref$animationType","animationType","AnimationType","EXPAND","_ref$hideDelay","hideDelay","_ref$showDelay","showDelay","title","titleClassName","hideCloseButton","isCloseButtonHidden","_ref$closeButtonTheme","closeButtonTheme","TipseenCloseButtonTheme","LIGHT","onClose","closeAriaLabel","_ref$children","children","content","_ref$justify","justify","JustifyType","CENTER","containerSelector","_ref$hideTrigger","hideTrigger","EMPTY_ARR","_ref$showTrigger","showTrigger","width","moveBy","_ref$hideWhenReferenc","hideWhenReferenceHidden","_ref$tip","tip","tooltipArrowClassName","_ref$modifiers","modifiers","_ref$floating","floating","colorProp","color","dataTestId","useWarnDeprecated","component","condition","undefined","message","defaultDelayOpen","Array","isArray","length","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","delayedOpen","setDelayOpen","overrideCloseAriaLabel","TIPSEEN_CLOSE_BUTTON_ARIA_LABEL","overrideHideCloseButton","backwardCompatibilityForProperties","useEffect","timeout","setTimeout","clearTimeout","textColor","useMemo","INVERTED","TypographyColor","ON_INVERTED","ON_PRIMARY","closeButtonColor","ButtonColor","ON_INVERTED_BACKGROUND","ON_PRIMARY_COLOR","TipseenWrapper","Fragment","tooltipContent","createElement","cx","styles","tipseenHeader","IconButton","hideTooltip","tipseenCloseButton","_defineProperty","dark","DARK","FIXED_DARK","onClick","size","Button","sizes","XS","kind","kinds","TERTIARY","ariaLabel","icon","CloseSmall","TipseenTitle","text","tipseenTitle","Text","type","types","TEXT2","element","tipseenContent","Provider","value","getTestId","ComponentDefaultTestId","TIPSEEN","Tooltip","tipseenWrapper","tipseenWrapperWithoutCustomWidth","arrowClassName","style","shouldShowOnMount","theme","TooltipTheme","Dark","Primary","disableDialogSlide","open","forceRenderWithoutChildren","closeButtonThemes","positions","animationTypes","justifyTypes","hideShowTriggers","HideShowEvent","colors"],"mappings":"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"}
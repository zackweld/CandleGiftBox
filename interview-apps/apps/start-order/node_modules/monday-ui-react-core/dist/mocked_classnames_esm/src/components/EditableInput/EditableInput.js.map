{"version":3,"file":"EditableInput.js","sources":["../../../../../src/components/EditableInput/EditableInput.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { forwardRef, useCallback, useEffect, useLayoutEffect, useRef, useState } from \"react\";\nimport autosize from \"autosize\";\nimport useStyle from \"../../hooks/useStyle\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport {\n  isArrowDownEvent,\n  isArrowLeftEvent,\n  isArrowRightEvent,\n  isArrowUpEvent,\n  isEnterEvent,\n  isEscapeEvent,\n  isTabEvent\n} from \"../../utils/dom-event-utils\";\nimport VibeComponent from \"../../types/VibeComponent\";\nimport { VibeComponentProps, withStaticProps } from \"../../types\";\nimport { InputType } from \"./EditableInputConstants\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport styles from \"./EditableInput.module.scss\";\n\nexport interface EditableInputProps extends VibeComponentProps {\n  value?: string;\n  placeholder?: string;\n  inputType?: InputType;\n  autoSize?: boolean;\n  autoComplete?: boolean;\n  disabled?: boolean;\n  maxLength?: number;\n  shouldFocusOnMount?: boolean;\n  textareaSubmitOnEnter?: boolean;\n  ariaLabel?: string;\n  customColor?: string;\n  tabIndex?: number;\n  isValidValue?: (value: string) => boolean;\n  onFinishEditing?: (value: string, event: React.KeyboardEvent | React.FocusEvent) => void;\n  onArrowKeyDown?: (value: string, event: React.KeyboardEvent) => void;\n  onClick?: (event: React.MouseEvent<HTMLInputElement | HTMLTextAreaElement>) => void;\n  onKeyPress?: () => void;\n  selectOnMount?: () => void;\n  ignoreBlurClass?: string;\n  onIgnoreBlurEvent?: (value: string) => void;\n  onFocus?: (event: React.FocusEvent) => void;\n  onBlur?: (event: React.FocusEvent) => void;\n  onCancelEditing?: (event: React.KeyboardEvent) => void;\n  onChange?: (value: string) => void;\n  onError?: () => void;\n  onSuccess?: () => void;\n  onKeyDown?: (event: React.KeyboardEvent, value: string) => void;\n  onTabHandler?: (value: string, event: React.KeyboardEvent) => void;\n}\n\nconst EditableInput: VibeComponent<EditableInputProps> & {\n  inputTypes?: typeof InputType;\n} = forwardRef(\n  (\n    {\n      className,\n      inputType = InputType.INPUT,\n      autoSize = false,\n      id,\n      tabIndex,\n      autoComplete = true,\n      disabled = false,\n      maxLength,\n      placeholder = \"\",\n      onClick,\n      onKeyPress,\n      shouldFocusOnMount = true,\n      selectOnMount,\n      value,\n      customColor,\n      ignoreBlurClass,\n      onFinishEditing,\n      onIgnoreBlurEvent,\n      onFocus,\n      onBlur,\n      isValidValue,\n      onChange,\n      onError,\n      onSuccess,\n      onKeyDown,\n      onTabHandler,\n      onCancelEditing,\n      textareaSubmitOnEnter = false,\n      onArrowKeyDown,\n      ariaLabel,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    // State\n    const [valueState, setValueState] = useState(value || \"\");\n\n    // Refs\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    // Callbacks\n    const autosizeIfNeeded = useCallback(() => {\n      if (componentRef.current && autoSize && inputType === InputType.TEXT_AREA) {\n        autosize(componentRef.current);\n      }\n    }, [componentRef, autoSize, inputType]);\n\n    const focus = useCallback(() => {\n      if (componentRef.current) {\n        requestAnimationFrame(() => {\n          componentRef.current?.focus();\n        });\n      }\n    }, [componentRef]);\n\n    const onFocusCallback = useCallback(\n      (event: React.FocusEvent) => {\n        if (onFocus) {\n          onFocus(event);\n        }\n      },\n      [onFocus]\n    );\n\n    const onBlurCallback = useCallback(\n      (event: React.FocusEvent) => {\n        const shouldIgnoreBlur = (el: EventTarget & Element, ignoreClass: string) => {\n          return el && ignoreClass && el.classList.contains(ignoreClass);\n        };\n\n        const { relatedTarget } = event;\n        if (shouldIgnoreBlur(relatedTarget, ignoreBlurClass)) {\n          onIgnoreBlurEvent(valueState);\n          return;\n        }\n\n        const enrichedEvent = event;\n        // @ts-ignore TS2339: Property 'origin' does not exist on type 'FocusEvent'\n        enrichedEvent.origin = \"blur\";\n\n        if (onFinishEditing) {\n          onFinishEditing(valueState, enrichedEvent);\n        }\n\n        if (onBlur) {\n          onBlur(enrichedEvent);\n        }\n      },\n      [ignoreBlurClass, valueState, onFinishEditing, onBlur, onIgnoreBlurEvent]\n    );\n\n    const onChangeCallback = useCallback(\n      (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const { value: newValue } = event.target;\n        if (!isValidValue || isValidValue(newValue)) {\n          setValueState(newValue);\n          onChange && onChange(newValue);\n          onSuccess && onSuccess();\n        } else {\n          onError && onError();\n        }\n      },\n      [isValidValue, onChange, onError, onSuccess]\n    );\n\n    const select = useCallback(() => {\n      if (componentRef.current) {\n        componentRef.current.select();\n      }\n    }, [componentRef]);\n\n    const moveCaretAtEnd = useCallback(() => {\n      if (componentRef.current) {\n        componentRef.current.value = \"\";\n        componentRef.current.value = valueState;\n      }\n    }, [componentRef, valueState]);\n\n    const onKeyDownCallback = useCallback(\n      (event: React.KeyboardEvent) => {\n        if (onKeyDown) {\n          return onKeyDown(event, valueState);\n        }\n\n        if (onTabHandler && isTabEvent(event) && inputType !== InputType.TEXT_AREA) {\n          event.preventDefault();\n          return onTabHandler(valueState, event);\n        }\n\n        if (onFinishEditing && isEnterEvent(event) && (inputType !== InputType.TEXT_AREA || textareaSubmitOnEnter)) {\n          onFinishEditing(valueState, event);\n        }\n\n        if (onCancelEditing && isEscapeEvent(event)) {\n          onCancelEditing(event);\n        }\n\n        if (\n          onArrowKeyDown &&\n          (isArrowUpEvent(event) || isArrowDownEvent(event) || isArrowLeftEvent(event) || isArrowRightEvent(event))\n        ) {\n          onArrowKeyDown(valueState, event);\n        }\n      },\n      [\n        onKeyDown,\n        inputType,\n        valueState,\n        onTabHandler,\n        textareaSubmitOnEnter,\n        onFinishEditing,\n        onCancelEditing,\n        onArrowKeyDown\n      ]\n    );\n    // Callbacks END\n\n    // Effects\n    useLayoutEffect(() => {\n      if (shouldFocusOnMount) focus();\n      autosizeIfNeeded();\n      selectOnMount ? select() : moveCaretAtEnd();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n      setValueState(value);\n    }, [value]);\n\n    const style = useStyle(undefined, { color: customColor });\n\n    const rows = inputType === InputType.TEXT_AREA && autoSize ? 1 : undefined;\n    const InputTypeComponent = inputType;\n    return (\n      <InputTypeComponent\n        ref={mergedRef}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.EDITABLE_INPUT, id)}\n        style={style}\n        className={cx(styles.editableInputWrapper, className, {\n          [styles.noResize]: autoSize\n        })}\n        onChange={onChangeCallback}\n        onKeyDown={onKeyDownCallback}\n        onBlur={onBlurCallback}\n        onFocus={onFocusCallback}\n        onClick={onClick}\n        onKeyPress={onKeyPress}\n        value={valueState}\n        placeholder={placeholder}\n        dir=\"auto\"\n        tabIndex={tabIndex}\n        autoComplete={autoComplete ? \"on\" : \"off\"}\n        rows={rows}\n        maxLength={maxLength}\n        aria-label={ariaLabel}\n        disabled={disabled}\n      />\n    );\n  }\n);\n\nexport default withStaticProps(EditableInput, {\n  inputTypes: InputType\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","_ref$inputType","inputType","InputType","INPUT","_ref$autoSize","autoSize","id","tabIndex","_ref$autoComplete","autoComplete","_ref$disabled","disabled","maxLength","_ref$placeholder","placeholder","onClick","onKeyPress","_ref$shouldFocusOnMou","shouldFocusOnMount","selectOnMount","value","customColor","ignoreBlurClass","onFinishEditing","onIgnoreBlurEvent","onFocus","onBlur","isValidValue","onChange","onError","onSuccess","onKeyDown","onTabHandler","onCancelEditing","_ref$textareaSubmitOn","textareaSubmitOnEnter","onArrowKeyDown","ariaLabel","dataTestId","_useState","useState","_useState2","_slicedToArray","valueState","setValueState","componentRef","useRef","mergedRef","useMergeRef","autosizeIfNeeded","useCallback","current","TEXT_AREA","autosize","focus","requestAnimationFrame","_a","onFocusCallback","event","onBlurCallback","ignoreClass","el","relatedTarget","classList","contains","enrichedEvent","origin","onChangeCallback","newValue","target","select","moveCaretAtEnd","onKeyDownCallback","isTabEvent","preventDefault","isEnterEvent","isEscapeEvent","isArrowUpEvent","isArrowDownEvent","isArrowLeftEvent","isArrowRightEvent","useLayoutEffect","useEffect","style","useStyle","undefined","color","rows","React","createElement","getTestId","ComponentDefaultTestId","EDITABLE_INPUT","cx","styles","editableInputWrapper","_defineProperty","noResize","dir","inputTypes"],"mappings":"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"}
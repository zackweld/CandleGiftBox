{"version":3,"file":"VirtualizedGrid.js","sources":["../../../../../src/components/VirtualizedGrid/VirtualizedGrid.tsx"],"sourcesContent":["import React, {\n  ComponentType,\n  CSSProperties,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport cx from \"classnames\";\nimport { GridChildComponentProps, GridOnScrollProps, ScrollDirection, VariableSizeGrid as Grid } from \"react-window\";\nimport AutoSizer from \"react-virtualized-auto-sizer\";\nimport {\n  getNormalizedItems,\n  getOnItemsRenderedData,\n  isLayoutDirectionScrollbarVisible\n} from \"../../services/virtualized-service\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport useThrottledCallback from \"../../hooks/useThrottledCallback\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"src/types/VibeComponentProps\";\nimport { VibeComponent } from \"../../types\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport styles from \"./VirtualizedGrid.module.scss\";\n\ntype ItemType = {\n  value: string;\n  height: number;\n  width: number;\n  id: string;\n};\n\nexport interface VirtualizedGridProps extends VibeComponentProps {\n  /**\n   * A list of items to be rendered\n   * {\n   *      item: ItemType,\n   *     index: number,\n   *     style: CSSProperties\n   * }[]\n   */\n  items: ItemType[];\n  /**\n   * item render function\n   * returns `JSX.Element`\n   */\n  itemRenderer: (\n    item: ItemType,\n    index: number,\n    style: CSSProperties\n  ) => ItemType | ComponentType<GridChildComponentProps<ItemType>>;\n  /**\n   * in order to calculate the number of rows to render in the grid, the component needs the height of the row\n   * return `number`\n   */\n  getRowHeight: () => number;\n  /**\n   * in order to calculate the number of columns to render in the grid, the component needs the width of the column\n   * return `number`\n   */\n  getColumnWidth: () => number;\n  /**\n   * returns Id of an items\n   * returns `string`\n   */\n  getItemId?: (item: ItemType, index: number) => string;\n  /**\n   * index of the item to scroll to\n   */\n  scrollToId?: number;\n  onScroll?: (horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void;\n  /**\n   * callback to be called when the scroll is finished\n   */\n  onScrollToFinished?: () => void;\n  /**\n   * a callback that is being called when the items are rendered\n   */\n  onItemsRendered?: ({\n    firstItemId,\n    secondItemId,\n    lastItemId,\n    centerItemId,\n    firstItemOffsetEnd,\n    currentOffsetTop\n  }: {\n    firstItemId: string;\n    secondItemId: string;\n    lastItemId: string;\n    centerItemId: string;\n    firstItemOffsetEnd: number;\n    currentOffsetTop: number;\n  }) => void;\n  onItemsRenderedThrottleMs?: number;\n  /**\n   * when the grid size changes\n   */\n  onSizeUpdate?: (width: number, height: number) => void;\n  onVerticalScrollbarVisiblityChange?: (value: boolean) => void;\n  /**\n   * class name to add to the component scrollable container\n   */\n  scrollableClassName?: string;\n}\n\nconst VirtualizedGrid: VibeComponent<VirtualizedGridProps> = forwardRef(\n  (\n    {\n      className,\n      id,\n      items = [],\n      itemRenderer = (item: ItemType, _index: number, _style: CSSProperties) => item,\n      getRowHeight = () => 50,\n      getColumnWidth = () => 100,\n      getItemId = (item: ItemType, _index: number) => item.id,\n      onScroll,\n      scrollToId = null,\n      onScrollToFinished = NOOP,\n      onItemsRendered = null,\n      onItemsRenderedThrottleMs = 200,\n      onSizeUpdate = NOOP,\n      onVerticalScrollbarVisiblityChange = null,\n      scrollableClassName,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    // states\n    const [gridHeight, setGridHeight] = useState(0);\n    const [gridWidth, setGridWidth] = useState(0);\n\n    // prevs\n    const prevScrollToId = usePrevious(scrollToId);\n\n    // Refs\n    const componentRef = useRef(null);\n    const isVerticalScrollbarVisibleRef = useRef(null);\n    const gridRef = useRef(null);\n    const scrollTopRef = useRef(0);\n    const animationDataRef = useRef({\n      scrollOffsetInitial: 0,\n      scrollOffsetFinal: 0,\n      animationStartTime: 0\n    });\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const animationData = animationDataRef.current;\n\n    // Callbacks\n    const heightGetter = useCallback(\n      (item: ItemType) => {\n        const height = getRowHeight();\n        if (!height || Number.isNaN(height)) {\n          console.error(\"Couldn't get height for item: \", item);\n        }\n        return height;\n      },\n      [getRowHeight]\n    );\n\n    const idGetter = useCallback(\n      (item: ItemType, index: number) => {\n        const itemId = getItemId(item, index);\n        if (itemId === undefined) {\n          console.error(\"Couldn't get id for item: \", item);\n        }\n        return itemId;\n      },\n      [getItemId]\n    );\n\n    // Memos\n    // Creates object of itemId => { item, index, height, offsetTop}\n    const normalizedItems = useMemo(() => {\n      return getNormalizedItems(items, idGetter, heightGetter);\n    }, [items, idGetter, heightGetter]);\n\n    const calcColumnCount = useMemo(() => {\n      return Math.min(items.length, Math.floor(gridWidth / getColumnWidth()));\n    }, [items, gridWidth, getColumnWidth]);\n\n    const calcRowCount = useMemo(() => {\n      return calcColumnCount > 0 ? Math.ceil(items.length / calcColumnCount) : 0;\n    }, [items, calcColumnCount]);\n\n    const scrollToColumnIndex = useMemo(() => {\n      return scrollToId % calcColumnCount;\n    }, [scrollToId, calcColumnCount]);\n\n    const scrollToRowIndex = useMemo(() => {\n      return Math.floor(scrollToId / calcColumnCount);\n    }, [scrollToId, calcColumnCount]);\n\n    // Callbacks\n    const onScrollCB = useCallback(\n      ({ horizontalScrollDirection, scrollTop, scrollUpdateWasRequested }: GridOnScrollProps) => {\n        scrollTopRef.current = scrollTop;\n        if (!scrollUpdateWasRequested) {\n          animationData.scrollOffsetInitial = scrollTop;\n        }\n        onScroll && onScroll(horizontalScrollDirection, scrollTop, scrollUpdateWasRequested);\n      },\n      [onScroll, scrollTopRef, animationData]\n    );\n\n    const cellRenderer = useCallback(\n      ({ columnIndex, rowIndex, style }: { columnIndex: number; rowIndex: number; style: CSSProperties }) => {\n        const index = rowIndex * calcColumnCount + columnIndex;\n        const item = items[index];\n        return itemRenderer(item, index, style);\n      },\n      [items, itemRenderer, calcColumnCount]\n    );\n\n    const updateGridSize = useCallback(\n      (width: number, height: number) => {\n        if (height !== gridHeight || width !== gridWidth) {\n          setTimeout(() => {\n            setGridHeight(height);\n            setGridWidth(width);\n            onSizeUpdate(width, height);\n          }, 0);\n        }\n      },\n      [gridHeight, gridWidth, onSizeUpdate]\n    );\n\n    const onItemsRenderedCB = useThrottledCallback(\n      ({ visibleStartIndex, visibleStopIndex }) => {\n        if (!onItemsRendered) return;\n        const data = getOnItemsRenderedData(\n          items,\n          normalizedItems,\n          idGetter,\n          visibleStartIndex,\n          visibleStopIndex,\n          gridHeight,\n          scrollTopRef.current\n        );\n        onItemsRendered(data);\n      },\n      { wait: onItemsRenderedThrottleMs, trailing: true },\n      [onItemsRendered, items, normalizedItems, idGetter, gridHeight]\n    );\n\n    // Effects\n    useEffect(() => {\n      // scroll to specific item\n      if (scrollToId && prevScrollToId !== scrollToId) {\n        gridRef.current.scrollToItem({\n          align: \"center\",\n          columnIndex: scrollToColumnIndex,\n          rowIndex: scrollToRowIndex\n        });\n        onScrollToFinished();\n      }\n    }, [scrollToId, prevScrollToId, gridRef, scrollToColumnIndex, scrollToRowIndex, onScrollToFinished]);\n\n    useEffect(() => {\n      // recalculate row heights\n      if (gridRef.current) {\n        gridRef.current.resetAfterIndices({ columnIndex: 0, rowIndex: 0 });\n      }\n    }, [normalizedItems]);\n\n    useEffect(() => {\n      // update vertical scrollbar visibility\n      if (onVerticalScrollbarVisiblityChange) {\n        const isVisible = isLayoutDirectionScrollbarVisible(items, normalizedItems, idGetter, gridHeight);\n        if (isVerticalScrollbarVisibleRef.current !== isVisible) {\n          isVerticalScrollbarVisibleRef.current = isVisible;\n          onVerticalScrollbarVisiblityChange(isVisible);\n        }\n      }\n    }, [onVerticalScrollbarVisiblityChange, items, normalizedItems, gridHeight, idGetter]);\n\n    return (\n      <div\n        ref={mergedRef}\n        className={cx(styles.virtualizedGridWrapper, className)}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.VIRTUALIZED_GRID, id)}\n      >\n        <AutoSizer>\n          {({ height, width }: { height: number; width: number }) => {\n            updateGridSize(width, height);\n            return (\n              <Grid\n                ref={gridRef}\n                height={height}\n                width={width}\n                columnWidth={getColumnWidth}\n                columnCount={calcColumnCount}\n                rowHeight={getRowHeight}\n                rowCount={calcRowCount}\n                onScroll={onScrollCB}\n                onItemsRendered={onItemsRenderedCB}\n                className={scrollableClassName}\n              >\n                {cellRenderer as unknown as VibeComponent<GridChildComponentProps>}\n              </Grid>\n            );\n          }}\n        </AutoSizer>\n      </div>\n    );\n  }\n);\n\nexport default VirtualizedGrid;\n"],"names":["VirtualizedGrid","forwardRef","_ref","ref","className","id","_ref$items","items","_ref$itemRenderer","itemRenderer","item","_index","_style","_ref$getRowHeight","getRowHeight","_ref$getColumnWidth","getColumnWidth","_ref$getItemId","getItemId","onScroll","_ref$scrollToId","scrollToId","_ref$onScrollToFinish","onScrollToFinished","NOOP","_ref$onItemsRendered","onItemsRendered","_ref$onItemsRenderedT","onItemsRenderedThrottleMs","_ref$onSizeUpdate","onSizeUpdate","_ref$onVerticalScroll","onVerticalScrollbarVisiblityChange","scrollableClassName","dataTestId","_useState","useState","_useState2","_slicedToArray","gridHeight","setGridHeight","_useState3","_useState4","gridWidth","setGridWidth","prevScrollToId","usePrevious","componentRef","useRef","isVerticalScrollbarVisibleRef","gridRef","scrollTopRef","animationDataRef","scrollOffsetInitial","scrollOffsetFinal","animationStartTime","mergedRef","useMergeRef","animationData","current","heightGetter","useCallback","height","Number","isNaN","console","error","idGetter","index","itemId","undefined","normalizedItems","useMemo","getNormalizedItems","calcColumnCount","Math","min","length","floor","calcRowCount","ceil","scrollToColumnIndex","scrollToRowIndex","onScrollCB","_ref2","horizontalScrollDirection","scrollTop","scrollUpdateWasRequested","cellRenderer","_ref3","rowIndex","columnIndex","style","updateGridSize","width","setTimeout","onItemsRenderedCB","useThrottledCallback","_ref4","data","getOnItemsRenderedData","visibleStartIndex","visibleStopIndex","wait","trailing","useEffect","scrollToItem","align","resetAfterIndices","isVisible","isLayoutDirectionScrollbarVisible","React","createElement","cx","styles","virtualizedGridWrapper","getTestId","ComponentDefaultTestId","VIRTUALIZED_GRID","AutoSizer","_ref5","Grid","columnWidth","columnCount","rowHeight","rowCount"],"mappings":"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"}
{"version":3,"file":"tableHelpers.js","sources":["../../../../../../src/components/Table/Table/tableHelpers.ts"],"sourcesContent":["import React, { AriaAttributes } from \"react\";\nimport { ITableColumn, TableLoadingStateType } from \"./Table\";\nimport Sort from \"../../Icon/Icons/components/Sort\";\nimport { ITableHeaderCellProps } from \"../TableHeaderCell/TableHeaderCell\";\nimport { SortAscending, SortDescending } from \"../../Icon/Icons\";\nimport { SkeletonType } from \"../../Skeleton/SkeletonConstants\";\n\nexport function generateWidth(width: ITableColumn[\"width\"]): string {\n  if (typeof width === \"number\") {\n    return `${width}px`;\n  } else if (typeof width === \"string\") {\n    return /%|px|fr$/.test(width) ? width : `${width}px`;\n  } else if (width?.min && width?.max) {\n    return `minmax(${generateWidth(width.min)}, ${generateWidth(width.max)})`;\n  } else {\n    return \"minmax(112px, 1fr)\";\n  }\n}\n\nexport function getTableRowLayoutStyles(columns: ITableColumn[], style: React.CSSProperties = {}): React.CSSProperties {\n  return {\n    ...style,\n    display: \"grid\",\n    gridTemplateColumns: columns.map(cell => generateWidth(cell.width)).join(\" \")\n  };\n}\n\nexport function getSortIcon(sortState: ITableHeaderCellProps[\"sortState\"]) {\n  if (sortState === \"asc\") {\n    return SortAscending;\n  } else if (sortState === \"desc\") {\n    return SortDescending;\n  } else {\n    return Sort;\n  }\n}\n\nexport function getNextSortState(sortState: ITableHeaderCellProps[\"sortState\"]): ITableHeaderCellProps[\"sortState\"] {\n  if (sortState === \"asc\") {\n    return \"desc\";\n  } else if (sortState === \"desc\") {\n    return \"none\";\n  } else {\n    return \"asc\";\n  }\n}\n\nexport function getAriaSort(sortState: ITableHeaderCellProps[\"sortState\"]): AriaAttributes[\"aria-sort\"] {\n  if (sortState === \"asc\") {\n    return \"ascending\";\n  }\n  if (sortState === \"desc\") {\n    return \"descending\";\n  }\n  return \"none\";\n}\n\nexport function getSkeletonType(loadingStateType: TableLoadingStateType): SkeletonType {\n  if (loadingStateType === \"circle\") {\n    return SkeletonType.CIRCLE;\n  }\n  if (loadingStateType === \"rectangle\") {\n    return SkeletonType.RECTANGLE;\n  }\n  return SkeletonType.TEXT;\n}\n\nexport function getLoadingTypeForCell(\n  loadingStateType: TableLoadingStateType,\n  rowIndex: number\n): TableLoadingStateType {\n  return loadingStateType === \"long-text\"\n    ? ([\"long-text\", \"medium-text\"] as TableLoadingStateType[])[rowIndex % 2]\n    : loadingStateType;\n}\n"],"names":["generateWidth","width","concat","test","min","max","getTableRowLayoutStyles","columns","Object","assign","display","gridTemplateColumns","map","cell","join","getSortIcon","sortState","SortAscending","SortDescending","Sort","getNextSortState","getAriaSort","getSkeletonType","loadingStateType","SkeletonType","CIRCLE","RECTANGLE","TEXT","getLoadingTypeForCell","rowIndex"],"mappings":"+OAOM,SAAUA,EAAcC,GAC5B,MAAqB,iBAAVA,EACTC,GAAAA,OAAUD,EAAK,MACW,iBAAVA,EACT,WAAWE,KAAKF,GAASA,EAAKC,GAAAA,OAAMD,EAAS,OAC3CA,aAAK,EAALA,EAAOG,OAAOH,aAAK,EAALA,EAAOI,KAC9B,UAAAH,OAAiBF,EAAcC,EAAMG,KAAIF,MAAAA,OAAKF,EAAcC,EAAMI,KAAI,KAE/D,oBAEX,UAEgBC,EAAwBC,GACtC,OAAAC,OAAAC,OAAAD,OAAAC,OAAA,CAAA,yDAD4F,CAAA,GAElF,CACRC,QAAS,OACTC,oBAAqBJ,EAAQK,KAAI,SAAAC,GAAI,OAAIb,EAAca,EAAKZ,UAAQa,KAAK,MAE7E,CAEM,SAAUC,EAAYC,GAC1B,MAAkB,QAAdA,EACKC,EACgB,SAAdD,EACFE,EAEAC,CAEX,CAEM,SAAUC,EAAiBJ,GAC/B,MAAkB,QAAdA,EACK,OACgB,SAAdA,EACF,OAEA,KAEX,CAEM,SAAUK,EAAYL,GAC1B,MAAkB,QAAdA,EACK,YAES,SAAdA,EACK,aAEF,MACT,CAEM,SAAUM,EAAgBC,GAC9B,MAAyB,WAArBA,EACKC,EAAaC,OAEG,cAArBF,EACKC,EAAaE,UAEfF,EAAaG,IACtB,CAEgB,SAAAC,EACdL,EACAM,GAEA,MAA4B,cAArBN,EACF,CAAC,YAAa,eAA2CM,EAAW,GACrEN,CACN"}
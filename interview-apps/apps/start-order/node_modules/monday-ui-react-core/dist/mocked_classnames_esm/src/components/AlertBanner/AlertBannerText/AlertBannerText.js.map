{"version":3,"file":"AlertBannerText.js","sources":["../../../../../../src/components/AlertBanner/AlertBannerText/AlertBannerText.tsx"],"sourcesContent":["import { ComponentDefaultTestId, getTestId } from \"../../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC, useRef } from \"react\";\nimport Tooltip from \"../../Tooltip/Tooltip\";\nimport useIsOverflowing from \"../../../hooks/useIsOverflowing/useIsOverflowing\";\nimport VibeComponentProps from \"../../../types/VibeComponentProps\";\nimport { HideShowEvent } from \"../../../constants\";\nimport styles from \"./AlertBannerText.module.scss\";\n\nconst TOOLTIP_SHOW_TRIGGERS: Array<HideShowEvent> = [HideShowEvent.MOUSE_ENTER];\nconst TOOLTIP_HIDE_TRIGGERS: Array<HideShowEvent> = [HideShowEvent.MOUSE_LEAVE];\n\nexport interface AlertBannerTextProps extends VibeComponentProps {\n  text: string;\n  marginLeft?: boolean;\n}\n\nconst AlertBannerText: FC<AlertBannerTextProps> = ({ text, marginLeft = false, id, \"data-testid\": dataTestId }) => {\n  const componentRef = useRef(null);\n  const classNames = cx(styles.bannerText, {\n    [styles.marginLeft]: marginLeft\n  });\n  const isOverflowing = useIsOverflowing({ ref: componentRef });\n\n  return (\n    <Tooltip\n      position={Tooltip.positions.BOTTOM}\n      content={isOverflowing && text}\n      showTrigger={TOOLTIP_SHOW_TRIGGERS}\n      hideTrigger={TOOLTIP_HIDE_TRIGGERS}\n    >\n      <div\n        ref={componentRef}\n        className={classNames}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.ALERT_BANNER_TEXT, id)}\n      >\n        <span>{text}</span>\n      </div>\n    </Tooltip>\n  );\n};\n\nObject.assign(AlertBannerText, {\n  isAlertBannerItem: true,\n  isAlertBannerText: true\n});\n\nexport default AlertBannerText;\n"],"names":["TOOLTIP_SHOW_TRIGGERS","HideShowEvent","MOUSE_ENTER","TOOLTIP_HIDE_TRIGGERS","MOUSE_LEAVE","AlertBannerText","_ref","text","_ref$marginLeft","marginLeft","id","dataTestId","componentRef","useRef","classNames","cx","styles","bannerText","_defineProperty","isOverflowing","useIsOverflowing","ref","React","createElement","Tooltip","position","positions","BOTTOM","content","showTrigger","hideTrigger","className","getTestId","ComponentDefaultTestId","ALERT_BANNER_TEXT","Object","assign","isAlertBannerItem","isAlertBannerText"],"mappings":"qgBASA,IAAMA,EAA8C,CAACC,EAAcC,aAC7DC,EAA8C,CAACF,EAAcG,aAO7DC,EAA4C,SAA7BC,GAA6F,IAA7DC,EAAID,EAAJC,KAAIC,EAAAF,EAAEG,WAAAA,OAAa,IAAHD,GAAQA,EAAEE,EAAEJ,EAAFI,GAAmBC,EAAUL,EAAzB,eAC3EM,EAAeC,EAAO,MACtBC,EAAaC,EAAGC,EAAOC,WAAUC,EAAA,CAAA,EACpCF,EAAOP,WAAaA,IAEjBU,EAAgBC,EAAiB,CAAEC,IAAKT,IAE9C,OACEU,EAACC,cAAAC,EACC,CAAAC,SAAUD,EAAQE,UAAUC,OAC5BC,QAAST,GAAiBZ,EAC1BsB,YAAa7B,EACb8B,YAAa3B,GAEbmB,EACEC,cAAA,MAAA,CAAAF,IAAKT,EACLmB,UAAWjB,EACXJ,GAAIA,EACS,cAAAC,GAAcqB,EAAUC,EAAuBC,kBAAmBxB,IAE/EY,EAAAC,cAAA,OAAA,KAAOhB,IAIf,EAEA4B,OAAOC,OAAO/B,EAAiB,CAC7BgC,mBAAmB,EACnBC,mBAAmB"}
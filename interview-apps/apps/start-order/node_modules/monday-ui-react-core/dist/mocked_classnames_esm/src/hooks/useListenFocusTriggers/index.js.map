{"version":3,"file":"index.js","sources":["../../../../../src/hooks/useListenFocusTriggers/index.ts"],"sourcesContent":["import useEventListener from \"../useEventListener\";\nimport { RefObject, useCallback, useRef } from \"react\";\n\nexport default function useListenFocusTriggers({\n  ref,\n  onFocusByKeyboard,\n  onFocusByMouse\n}: {\n  ref: RefObject<HTMLElement>;\n  onFocusByKeyboard?: (event: FocusEvent) => void;\n  onFocusByMouse?: (event: FocusEvent) => void;\n}) {\n  const isElementMouseDown = useRef(false);\n\n  const onMouseDown = useCallback(() => {\n    isElementMouseDown.current = true;\n  }, [isElementMouseDown]);\n\n  const onFocus = useCallback(\n    (e: FocusEvent) => {\n      // if focus triggered by mouse down, call onFocusByMouse\n      if (isElementMouseDown.current) {\n        onFocusByMouse?.(e);\n      } else {\n        onFocusByKeyboard?.(e);\n      }\n    },\n    [onFocusByKeyboard, onFocusByMouse]\n  );\n  const onMouseUp = useCallback(() => {\n    isElementMouseDown.current = false;\n  }, [isElementMouseDown]);\n\n  useEventListener({\n    eventName: \"mousedown\",\n    ref,\n    callback: onMouseDown\n  });\n\n  useEventListener({\n    eventName: \"focus\",\n    ref,\n    callback: onFocus\n  });\n\n  useEventListener({\n    eventName: \"mouseup\",\n    ref,\n    callback: onMouseUp\n  });\n}\n"],"names":["useListenFocusTriggers","_ref","ref","onFocusByKeyboard","onFocusByMouse","isElementMouseDown","useRef","onMouseDown","useCallback","current","onFocus","e","onMouseUp","useEventListener","eventName","callback"],"mappings":"4FAGc,SAAUA,EAAsBC,GAQ7C,IAPCC,EAAGD,EAAHC,IACAC,EAAiBF,EAAjBE,kBACAC,EAAcH,EAAdG,eAMMC,EAAqBC,GAAO,GAE5BC,EAAcC,GAAY,WAC9BH,EAAmBI,SAAU,CAC/B,GAAG,CAACJ,IAEEK,EAAUF,GACd,SAACG,GAEKN,EAAmBI,QACrBL,SAAAA,EAAiBO,GAEjBR,SAAAA,EAAoBQ,EAExB,GACA,CAACR,EAAmBC,IAEhBQ,EAAYJ,GAAY,WAC5BH,EAAmBI,SAAU,CAC/B,GAAG,CAACJ,IAEJQ,EAAiB,CACfC,UAAW,YACXZ,IAAAA,EACAa,SAAUR,IAGZM,EAAiB,CACfC,UAAW,QACXZ,IAAAA,EACAa,SAAUL,IAGZG,EAAiB,CACfC,UAAW,UACXZ,IAAAA,EACAa,SAAUH,GAEd"}
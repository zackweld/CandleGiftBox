{"version":3,"file":"Label.js","sources":["../../../../../src/components/Label/Label.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport Text from \"../Text/Text\";\nimport Leg from \"./Leg\";\nimport { LabelColor, LabelKind } from \"./LabelConstants\";\nimport { VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport useClickableProps from \"../../hooks/useClickableProps/useClickableProps\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport styles from \"./Label.module.scss\";\nimport LabelCelebrationAnimation from \"./LabelCelebrationAnimation\";\nimport { mapSizesToTextSize, Sizes } from \"./Label.types\";\n\nexport interface LabelProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  wrapperClassName?: string;\n  /**\n   * Class name for an inner text wrapper\n   */\n  labelClassName?: string;\n  kind?: LabelKind;\n  color?: LabelColor;\n  text?: string;\n  isAnimationDisabled?: boolean;\n  isLegIncluded?: boolean;\n  onClick?: (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => void;\n  celebrationAnimation?: boolean;\n  size?: Sizes;\n}\n\nconst Label: VibeComponent<LabelProps> & {\n  colors?: typeof LabelColor;\n  kinds?: typeof LabelKind;\n} = forwardRef<HTMLElement, LabelProps>(\n  (\n    {\n      className,\n      wrapperClassName,\n      labelClassName,\n      kind = LabelKind.FILL,\n      color = LabelColor.PRIMARY,\n      text = \"\",\n      isAnimationDisabled = false,\n      isLegIncluded = false,\n      id,\n      \"data-testid\": dataTestId,\n      onClick,\n      celebrationAnimation,\n      size = \"medium\"\n    },\n    ref\n  ) => {\n    const labelRef = useRef<HTMLSpanElement>(null);\n    const mergedRef = useMergeRef(ref, labelRef);\n    const [isCelebrationAnimation, setIsCelebrationAnimation] = useState(celebrationAnimation);\n\n    const overrideClassName = backwardCompatibilityForProperties([className, wrapperClassName]) as string;\n    const isClickable = Boolean(onClick);\n\n    const classNames = useMemo(\n      () =>\n        cx(\n          styles.label,\n          getStyle(styles, camelCase(\"kind\" + \"-\" + kind)),\n          getStyle(styles, camelCase(\"color\" + \"-\" + color)),\n          {\n            // When celebrationAnimation is active it wins over the default animation\n            [styles.withAnimation]: !isAnimationDisabled && !isCelebrationAnimation,\n            [styles.withLeg]: isLegIncluded,\n            [styles.clickable]: isClickable,\n            [styles.small]: size === \"small\"\n          },\n          labelClassName\n        ),\n      [kind, color, isAnimationDisabled, isLegIncluded, labelClassName, isCelebrationAnimation, isClickable, size]\n    );\n\n    const onClickCallback = useCallback(\n      (event: React.MouseEvent<HTMLSpanElement, MouseEvent>) => {\n        if (onClick) {\n          event.preventDefault();\n          onClick(event);\n        }\n      },\n      [onClick]\n    );\n\n    const clickableProps = useClickableProps(\n      {\n        onClick: onClickCallback,\n        id,\n        ariaHidden: false,\n        ariaHasPopup: false,\n        ariaExpanded: false\n      },\n      labelRef\n    );\n\n    useEffect(() => {\n      setIsCelebrationAnimation(celebrationAnimation);\n    }, [celebrationAnimation]);\n\n    const label = useMemo(() => {\n      return (\n        <span\n          {...(isClickable && clickableProps)}\n          className={cx({ [styles.clickableWrapper]: isClickable }, overrideClassName)}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.LABEL, id)}\n          ref={mergedRef}\n        >\n          <Text\n            element=\"span\"\n            type={mapSizesToTextSize[size]}\n            className={classNames}\n            color={Text.colors.ON_INVERTED}\n            data-celebration-text={isCelebrationAnimation}\n          >\n            <Text\n              element=\"span\"\n              type={mapSizesToTextSize[size]}\n              color={Text.colors.INHERIT}\n              className={cx({ [styles.smallText]: size === \"small\" })}\n            >\n              {text}\n            </Text>\n            <span className={cx(styles.legWrapper)}>{isLegIncluded ? <Leg /> : null}</span>\n          </Text>\n        </span>\n      );\n    }, [\n      isClickable,\n      clickableProps,\n      overrideClassName,\n      dataTestId,\n      id,\n      mergedRef,\n      classNames,\n      isCelebrationAnimation,\n      text,\n      isLegIncluded,\n      size\n    ]);\n\n    // Celebration animation is applied only for line kind\n    if (isCelebrationAnimation && kind === \"line\") {\n      return (\n        <LabelCelebrationAnimation onAnimationEnd={() => setIsCelebrationAnimation(false)}>\n          {label}\n        </LabelCelebrationAnimation>\n      );\n    }\n\n    return label;\n  }\n);\n\nexport default withStaticProps(Label, {\n  colors: LabelColor,\n  kinds: LabelKind\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","wrapperClassName","labelClassName","_ref$kind","kind","LabelKind","FILL","_ref$color","color","LabelColor","PRIMARY","_ref$text","text","_ref$isAnimationDisab","isAnimationDisabled","_ref$isLegIncluded","isLegIncluded","id","dataTestId","onClick","celebrationAnimation","_ref$size","size","labelRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isCelebrationAnimation","setIsCelebrationAnimation","overrideClassName","backwardCompatibilityForProperties","isClickable","classNames","useMemo","cx","styles","label","getStyle","camelCase","_defineProperty","withAnimation","withLeg","clickable","small","onClickCallback","useCallback","event","preventDefault","clickableProps","useClickableProps","ariaHidden","ariaHasPopup","ariaExpanded","useEffect","React","createElement","Object","assign","clickableWrapper","getTestId","ComponentDefaultTestId","LABEL","Text","element","type","mapSizesToTextSize","colors","ON_INVERTED","INHERIT","smallText","legWrapper","Leg","LabelCelebrationAnimation","onAnimationEnd","kinds"],"mappings":"47BAmCA,IA8HeA,EAAAA,EA3HXC,GACF,SAAAC,EAgBEC,GACE,IAfAC,EAASF,EAATE,UACAC,EAAgBH,EAAhBG,iBACAC,EAAcJ,EAAdI,eAAcC,EAAAL,EACdM,KAAAA,OAAI,IAAAD,EAAGE,EAAUC,KAAIH,EAAAI,EAAAT,EACrBU,MAAAA,OAAK,IAAAD,EAAGE,EAAWC,QAAOH,EAAAI,EAAAb,EAC1Bc,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EAAAE,EAAAf,EACTgB,oBAAAA,OAAsB,IAAHD,GAAQA,EAAAE,EAAAjB,EAC3BkB,cAAAA,OAAgB,IAAHD,GAAQA,EACrBE,EAAEnB,EAAFmB,GACeC,EAAUpB,EAAzB,eACAqB,EAAOrB,EAAPqB,QACAC,EAAoBtB,EAApBsB,qBAAoBC,EAAAvB,EACpBwB,KAAAA,OAAO,IAAHD,EAAG,SAAQA,EAIXE,EAAWC,EAAwB,MACnCC,EAAYC,EAAY3B,EAAKwB,GACnCI,EAA4DC,EAASR,GAAqBS,EAAAC,EAAAH,EAAA,GAAnFI,EAAsBF,EAAA,GAAEG,EAAyBH,EAAA,GAElDI,EAAoBC,EAAmC,CAAClC,EAAWC,IACnEkC,IAAsBhB,EAEtBiB,EAAaC,GACjB,WAAA,OACEC,EACEC,EAAOC,MACPC,EAASF,EAAQG,EAAU,QAAetC,IAC1CqC,EAASF,EAAQG,EAAU,SAAgBlC,IAAOmC,EAAAA,EAAAA,EAAAA,EAAA,CAAA,EAG/CJ,EAAOK,eAAiB9B,IAAwBiB,GAChDQ,EAAOM,QAAU7B,GACjBuB,EAAOO,UAAYX,GACnBI,EAAOQ,MAAiB,UAATzB,GAElBpB,EACD,GACH,CAACE,EAAMI,EAAOM,EAAqBE,EAAed,EAAgB6B,EAAwBI,EAAab,IAGnG0B,EAAkBC,GACtB,SAACC,GACK/B,IACF+B,EAAMC,iBACNhC,EAAQ+B,GAEZ,GACA,CAAC/B,IAGGiC,GAAiBC,EACrB,CACElC,QAAS6B,EACT/B,GAAAA,EACAqC,YAAY,EACZC,cAAc,EACdC,cAAc,GAEhBjC,GAGFkC,GAAU,WACRzB,EAA0BZ,EAC5B,GAAG,CAACA,IAEJ,IAAMoB,GAAQH,GAAQ,WACpB,OACEqB,EACMC,cAAA,OAAAC,OAAAC,OAAA,CAAA,EAAC1B,GAAeiB,GAAe,CACnCpD,UAAWsC,EAAEK,EAAIJ,CAAAA,EAAAA,EAAOuB,iBAAmB3B,GAAeF,GAC7C,cAAAf,GAAc6C,EAAUC,EAAuBC,MAAOhD,GACnElB,IAAK0B,IAELiC,EAACC,cAAAO,EACC,CAAAC,QAAQ,OACRC,KAAMC,EAAmB/C,GACzBtB,UAAWoC,EACX5B,MAAO0D,EAAKI,OAAOC,YAAW,wBACPxC,GAEvB2B,EAAAC,cAACO,EACC,CAAAC,QAAQ,OACRC,KAAMC,EAAmB/C,GACzBd,MAAO0D,EAAKI,OAAOE,QACnBxE,UAAWsC,EAAEK,EAAIJ,CAAAA,EAAAA,EAAOkC,UAAqB,UAATnD,KAEnCV,GAEH8C,EAAMC,cAAA,OAAA,CAAA3D,UAAWsC,EAAGC,EAAOmC,aAAc1D,EAAgB0C,EAACC,cAAAgB,EAAM,MAAG,OAI1E,GAAE,CACDxC,EACAiB,GACAnB,EACAf,EACAD,EACAQ,EACAW,EACAL,EACAnB,EACAI,EACAM,IAIF,OAAIS,GAAmC,SAAT3B,EAE1BsD,EAACC,cAAAiB,EAA0B,CAAAC,eAAgB,WAAA,OAAM7C,GAA0B,EAAM,GAC9EQ,IAKAA,EACT,IAGoC,CACpC8B,OAAQ7D,EACRqE,MAAOzE"}
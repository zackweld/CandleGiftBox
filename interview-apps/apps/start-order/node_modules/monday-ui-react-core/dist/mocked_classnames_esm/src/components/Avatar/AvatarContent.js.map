{"version":3,"file":"AvatarContent.js","sources":["../../../../../src/components/Avatar/AvatarContent.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React from \"react\";\nimport { AvatarSize, AvatarType } from \"./AvatarConstants\";\nimport Icon from \"../Icon/Icon\";\nimport { SubIcon, VibeComponentProps } from \"../../types\";\nimport styles from \"./AvatarContent.module.scss\";\n\nexport interface AvatarContentProps extends VibeComponentProps {\n  src?: string;\n  type?: AvatarType;\n  size?: AvatarSize;\n  role?: string;\n  ariaLabel?: string;\n  /** we support two types of icons - SVG and FONT (classname) so this prop is either the name of the icon or the component */\n  icon?: SubIcon;\n  textClassName?: string;\n  text?: string;\n}\n\nexport const AvatarContent: React.FC<AvatarContentProps> & {\n  sizes?: typeof AvatarSize;\n  types?: typeof AvatarType;\n} = ({\n  type = AvatarType.TEXT,\n  src,\n  icon,\n  text,\n  ariaLabel,\n  role,\n  size = AvatarSize.LARGE,\n  textClassName = \"\",\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  const className = cx(\n    getStyle(styles, camelCase(\"content_\" + type)),\n    getStyle(styles, camelCase(\"content_\" + type + \"--\" + size))\n  );\n  switch (type) {\n    case AvatarType.IMG:\n      return (\n        <img\n          role={role}\n          alt={ariaLabel}\n          src={src}\n          className={className}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR_CONTENT, id)}\n        />\n      );\n    case AvatarType.ICON:\n      return (\n        <Icon\n          icon={icon}\n          aria-label={ariaLabel}\n          // role={role}\n          clickable={false}\n          className={className}\n          ariaHidden={false}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR_CONTENT, id)}\n        />\n      );\n    case AvatarType.TEXT:\n      return (\n        <span\n          aria-label={ariaLabel}\n          role={role}\n          className={cx(className, textClassName)}\n          id={id}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.AVATAR_CONTENT, id)}\n        >\n          {text}\n        </span>\n      );\n    default:\n      return null;\n  }\n};\n\nObject.assign(AvatarContent, {\n  types: AvatarType,\n  sizes: AvatarSize\n});\n"],"names":["AvatarContent","_ref","_ref$type","type","AvatarType","TEXT","src","icon","text","ariaLabel","role","_ref$size","size","AvatarSize","LARGE","_ref$textClassName","textClassName","id","dataTestId","className","cx","getStyle","styles","camelCase","IMG","React","createElement","alt","getTestId","ComponentDefaultTestId","AVATAR_CONTENT","ICON","Icon","clickable","ariaHidden","Object","assign","types","sizes"],"mappings":"6XAsBaA,EAGT,SAHsBC,GAcrB,IAAAC,EAAAD,EAVHE,KAAAA,OAAI,IAAAD,EAAGE,EAAWC,KAAIH,EACtBI,EAAGL,EAAHK,IACAC,EAAIN,EAAJM,KACAC,EAAIP,EAAJO,KACAC,EAASR,EAATQ,UACAC,EAAIT,EAAJS,KAAIC,EAAAV,EACJW,KAAAA,OAAI,IAAAD,EAAGE,EAAWC,MAAKH,EAAAI,EAAAd,EACvBe,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAClBE,EAAEhB,EAAFgB,GACeC,EAAUjB,EAAzB,eAEMkB,EAAYC,EAChBC,EAASC,EAAQC,EAAU,WAAapB,IACxCkB,EAASC,EAAQC,EAAU,WAAapB,EAAO,KAAOS,KAExD,OAAQT,GACN,KAAKC,EAAWoB,IACd,OACEC,EAAAC,cAAA,MAAA,CACEhB,KAAMA,EACNiB,IAAKlB,EACLH,IAAKA,EACLa,UAAWA,EACXF,GAAIA,EACS,cAAAC,GAAcU,EAAUC,EAAuBC,eAAgBb,KAGlF,KAAKb,EAAW2B,KACd,OACEN,gBAACO,EAAI,CACHzB,KAAMA,eACME,EAEZwB,WAAW,EACXd,UAAWA,EACXe,YAAY,EACZjB,GAAIA,EAAE,cACOC,GAAcU,EAAUC,EAAuBC,eAAgBb,KAGlF,KAAKb,EAAWC,KACd,OACEoB,EAAAC,cAAA,OAAA,CAAA,aACcjB,EACZC,KAAMA,EACNS,UAAWC,EAAGD,EAAWH,GACzBC,GAAIA,EACS,cAAAC,GAAcU,EAAUC,EAAuBC,eAAgBb,IAE3ET,GAGP,QACE,OAAO,KAEb,EAEA2B,OAAOC,OAAOpC,EAAe,CAC3BqC,MAAOjC,EACPkC,MAAOzB"}
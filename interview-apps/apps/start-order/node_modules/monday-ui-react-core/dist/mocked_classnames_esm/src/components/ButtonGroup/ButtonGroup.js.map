{"version":3,"file":"ButtonGroup.js","sources":["../../../../../src/components/ButtonGroup/ButtonGroup.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { camelCase } from \"lodash-es\";\nimport cx from \"classnames\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport Button from \"../Button/Button\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { ButtonValue } from \"./ButtonGroupConstants\";\nimport { ButtonWrapper } from \"./ButtonWrapper\";\nimport { BASE_SIZES, DialogPosition, SIZES } from \"../../constants\";\nimport { ButtonType, Size } from \"../Button/ButtonConstants\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport styles from \"./ButtonGroup.module.scss\";\n\ntype ButtonGroupOption = {\n  icon?: SubIcon;\n  leftIcon?: SubIcon;\n  ariaLabel?: string;\n  subText?: string;\n  value: ButtonValue;\n  text: string;\n  disabled?: boolean;\n  tooltipContent?: string;\n};\n\nexport interface ButtonGroupProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  componentClassName?: string;\n  options: Array<ButtonGroupOption>;\n  value?: ButtonValue;\n  onSelect?: (value: ButtonValue, name: string) => void;\n  size?: Size;\n  kind?: ButtonType.SECONDARY | ButtonType.TERTIARY;\n  name?: string;\n  disabled?: boolean;\n  groupAriaLabel?: string;\n  /**\n   * Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ...\n   */\n  tooltipPosition?: DialogPosition;\n  tooltipHideDelay?: number;\n  tooltipShowDelay?: number;\n  tooltipContainerSelector?: string;\n  tooltipMoveBy?: MoveBy;\n  children?: React.ReactNode;\n  fullWidth?: boolean;\n}\n\nconst ButtonGroup: VibeComponent<ButtonGroupProps, HTMLDivElement> & {\n  sizes?: typeof SIZES;\n  kinds?: typeof ButtonType;\n} = forwardRef(\n  (\n    {\n      className,\n      // Backward compatibility for props naming\n      componentClassName,\n      options,\n      name = \"\",\n      disabled = false,\n      value = \"\",\n      onSelect,\n      size = BASE_SIZES.SMALL,\n      kind = ButtonType.SECONDARY,\n      groupAriaLabel = \"\",\n      tooltipPosition,\n      tooltipHideDelay,\n      tooltipShowDelay,\n      tooltipContainerSelector,\n      tooltipMoveBy,\n      id,\n      \"data-testid\": dataTestId,\n      fullWidth = false\n    },\n    ref\n  ) => {\n    const inputRef = useRef();\n    const mergedRef = useMergeRef(ref, inputRef);\n\n    const overrideClassName = backwardCompatibilityForProperties([className, componentClassName]);\n    const [valueState, setValueState] = useState(value);\n    const prevValue = usePrevious(value);\n\n    const onClick = useCallback(\n      (option: ButtonGroupOption) => {\n        const isDisabled = disabled || option.disabled;\n        if (!isDisabled) {\n          setValueState(option.value);\n          if (onSelect) {\n            onSelect(option.value, name);\n          }\n        }\n      },\n      [onSelect, disabled, name]\n    );\n\n    const selectedOption = useMemo(() => {\n      return options.find(option => option.value === valueState);\n    }, [options, valueState]);\n\n    const Buttons = useMemo(() => {\n      return options.map((option, index) => {\n        const isSelected = option.value === valueState;\n        return (\n          <ButtonWrapper\n            key={option.value}\n            size={size}\n            onClick={() => onClick(option)}\n            rightIcon={option.icon}\n            leftIcon={option.leftIcon}\n            active={isSelected}\n            rightFlat={index !== options.length - 1}\n            leftFlat={index !== 0}\n            kind={Button.kinds.TERTIARY}\n            preventClickAnimation\n            ariaLabel={option.ariaLabel}\n            tooltipContent={option.tooltipContent}\n            tooltipPosition={tooltipPosition}\n            tooltipHideDelay={tooltipHideDelay}\n            tooltipShowDelay={tooltipShowDelay}\n            tooltipContainerSelector={tooltipContainerSelector}\n            tooltipMoveBy={tooltipMoveBy}\n            className={cx(styles.button, styles.optionText, {\n              [styles.selected]: isSelected,\n              [styles.disabled]: disabled,\n              [styles.buttonDisabled]: option.disabled,\n              [styles.fullWidth]: fullWidth\n            })}\n            activeButtonClassName={styles.activeButton}\n          >\n            {option.text}\n          </ButtonWrapper>\n        );\n      });\n    }, [\n      options,\n      disabled,\n      onClick,\n      size,\n      valueState,\n      tooltipPosition,\n      tooltipHideDelay,\n      tooltipShowDelay,\n      tooltipContainerSelector,\n      tooltipMoveBy\n    ]);\n\n    // Effects\n    useEffect(() => {\n      // Update value if changed from props\n      if (value !== prevValue && value !== valueState) {\n        setValueState(value);\n      }\n    }, [value, prevValue, valueState, setValueState]);\n\n    return (\n      <div\n        className={cx(styles.buttonGroup, overrideClassName, getStyle(styles, camelCase(\"kind-\" + kind)), {\n          [styles.disabled]: disabled\n        })}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.BUTTON_GROUP, id)}\n        ref={mergedRef}\n      >\n        <div role=\"group\" aria-label={groupAriaLabel} className={cx(styles.buttonsContainer)} aria-disabled={disabled}>\n          {Buttons}\n        </div>\n        {selectedOption && selectedOption.subText && (\n          <div className={cx(styles.subTextContainer)}>{selectedOption.subText}</div>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(ButtonGroup, { sizes: Button.sizes, kinds: Button.kinds });\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","componentClassName","options","_ref$name","name","_ref$disabled","disabled","_ref$value","value","onSelect","_ref$size","size","BASE_SIZES","SMALL","_ref$kind","kind","ButtonType","SECONDARY","_ref$groupAriaLabel","groupAriaLabel","tooltipPosition","tooltipHideDelay","tooltipShowDelay","tooltipContainerSelector","tooltipMoveBy","id","dataTestId","_ref$fullWidth","fullWidth","inputRef","useRef","mergedRef","useMergeRef","overrideClassName","backwardCompatibilityForProperties","_useState","useState","_useState2","_slicedToArray","valueState","setValueState","prevValue","usePrevious","onClick","useCallback","option","selectedOption","useMemo","find","Buttons","map","index","isSelected","React","createElement","ButtonWrapper","key","rightIcon","icon","leftIcon","active","rightFlat","length","leftFlat","Button","kinds","TERTIARY","preventClickAnimation","ariaLabel","tooltipContent","cx","styles","button","optionText","_defineProperty","selected","buttonDisabled","activeButtonClassName","activeButton","text","useEffect","buttonGroup","getStyle","camelCase","getTestId","ComponentDefaultTestId","BUTTON_GROUP","role","buttonsContainer","subText","subTextContainer","sizes"],"mappings":"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"}
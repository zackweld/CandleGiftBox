{"version":3,"file":"Skeleton.js","sources":["../../../../../src/components/Skeleton/Skeleton.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC } from \"react\";\nimport {\n  SKELETON_SIZES,\n  SkeletonSizeType,\n  SkeletonType,\n  SKELETON_CUSTOM_SIZE,\n  TextSkeletonSize\n} from \"./SkeletonConstants\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { withStaticProps, VibeComponentProps } from \"../../types\";\nimport styles from \"./Skeleton.module.scss\";\n\nexport interface SkeletonProps extends VibeComponentProps {\n  type?: SkeletonType;\n  size?: SkeletonSizeType;\n  width?: number;\n  height?: number;\n  wrapperClassName?: string;\n  /**\n   * Is the skeleton wrapper width equal to its container\n   */\n  fullWidth?: boolean;\n}\n\nconst Skeleton: FC<SkeletonProps> & {\n  types?: typeof SkeletonType;\n  sizes?: typeof SKELETON_SIZES;\n} = ({\n  type = SkeletonType.RECTANGLE,\n  size = SKELETON_SIZES.CUSTOM,\n  className,\n  wrapperClassName,\n  width,\n  height,\n  fullWidth = false,\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  const skeletonType = Object.values(SkeletonType).includes(type) ? type : SkeletonType.RECTANGLE;\n\n  // Skeleton has sizes only for text type, other types support only custom size\n  const skeletonSize = (Object.values(TextSkeletonSize) as string[]).includes(size) ? size : SKELETON_CUSTOM_SIZE;\n  return (\n    <div\n      id={id}\n      className={cx(styles.skeleton, wrapperClassName, { [styles.fullWidth]: fullWidth })}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SKELETON, id)}\n    >\n      <div\n        className={cx(styles[skeletonType], getStyle(styles, camelCase(skeletonType + \"-\" + skeletonSize)), className, {\n          [styles.fullWidth]: fullWidth\n        })}\n        style={{ width, height }}\n      />\n    </div>\n  );\n};\n\nexport default withStaticProps(Skeleton, {\n  types: SkeletonType,\n  sizes: SKELETON_SIZES\n});\n"],"names":["withStaticProps","_ref","_ref$type","type","SkeletonType","RECTANGLE","_ref$size","size","SKELETON_SIZES","CUSTOM","className","wrapperClassName","width","height","_ref$fullWidth","fullWidth","id","dataTestId","skeletonType","Object","values","includes","skeletonSize","TextSkeletonSize","SKELETON_CUSTOM_SIZE","React","createElement","cx","styles","skeleton","_defineProperty","getTestId","ComponentDefaultTestId","SKELETON","getStyle","camelCase","style","types","sizes"],"mappings":"8hBA2BA,IAkCeA,EAAAA,GA/BX,SAHUC,GAaT,IAAAC,EAAAD,EATHE,KAAAA,OAAI,IAAAD,EAAGE,EAAaC,UAASH,EAAAI,EAAAL,EAC7BM,KAAAA,OAAI,IAAAD,EAAGE,EAAeC,OAAMH,EAC5BI,EAAST,EAATS,UACAC,EAAgBV,EAAhBU,iBACAC,EAAKX,EAALW,MACAC,EAAMZ,EAANY,OAAMC,EAAAb,EACNc,UAAAA,OAAY,IAAHD,GAAQA,EACjBE,EAAEf,EAAFe,GACeC,EAAUhB,EAAzB,eAEMiB,EAAeC,OAAOC,OAAOhB,GAAciB,SAASlB,GAAQA,EAAOC,EAAaC,UAGhFiB,EAAgBH,OAAOC,OAAOG,GAA+BF,SAASd,GAAQA,EAAOiB,EAC3F,OACEC,EACEC,cAAA,MAAA,CAAAV,GAAIA,EACJN,UAAWiB,EAAGC,EAAOC,SAAUlB,EAAgBmB,KAAKF,EAAOb,UAAYA,IAC1D,cAAAE,GAAcc,EAAUC,EAAuBC,SAAUjB,IAEtES,EACEC,cAAA,MAAA,CAAAhB,UAAWiB,EAAGC,EAAOV,GAAegB,EAASN,EAAQO,EAAUjB,EAAe,IAAMI,IAAgBZ,EAASoB,EAC1GF,CAAAA,EAAAA,EAAOb,UAAYA,IAEtBqB,MAAO,CAAExB,MAAAA,EAAOC,OAAAA,KAIxB,GAEyC,CACvCwB,MAAOjC,EACPkC,MAAO9B"}
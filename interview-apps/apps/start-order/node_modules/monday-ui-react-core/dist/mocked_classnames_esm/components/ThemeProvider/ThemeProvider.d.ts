import React, { ReactElement } from "react";
import { SystemTheme, Theme, ThemeColor } from "./ThemeProviderConstants";
export interface ThemeProviderProps {
    /**
     * @deprecated use themeConfig instead
     */
    theme?: Theme;
    /**
     * The theme config to apply, consists of a "name" - the name of css class that will be added to the children, which should be unique, and the object of colors overrides for each system theme.
     */
    themeConfig?: Theme;
    /**
     * The children to render with the theme
     */
    children: ReactElement;
    /**
     * String which adds up to theme name selector to make it more specific (in case if themeConfig.name is colliding with some other class name)
     */
    themeClassSpecifier?: string;
    /**
     * The system theme to apply to the body element on mount, if there is no theme class name on the body element already
     */
    systemTheme?: SystemTheme;
    /**
     * ClassName to add to the wrapping div
     */
    className?: string;
}
declare const _default: ((import("../../types/VibeComponent").default<ThemeProviderProps, unknown> & Partial<{
    systemThemes: typeof SystemTheme;
    colors: typeof ThemeColor;
}>) | (React.FC<ThemeProviderProps> & Partial<{
    systemThemes: typeof SystemTheme;
    colors: typeof ThemeColor;
}>)) & {
    systemThemes: typeof SystemTheme;
    colors: typeof ThemeColor;
};
export default _default;

{"version":3,"file":"TextField.js","sources":["../../../../../src/components/TextField/TextField.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, {\n  ChangeEvent,\n  ChangeEventHandler,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from \"react\";\nimport useDebounceEvent from \"../../hooks/useDebounceEvent\";\nimport Icon from \"../Icon/Icon\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport Loader from \"../Loader/Loader\";\nimport Text from \"../Text/Text\";\nimport FieldLabel from \"../FieldLabel/FieldLabel\";\nimport {\n  FEEDBACK_CLASSES,\n  getActualSize,\n  SIZE_MAPPER,\n  TextFieldAriaLabel,\n  TextFieldFeedbackState,\n  TextFieldSize,\n  TextFieldTextType\n} from \"./TextFieldConstants\";\nimport { BASE_SIZES } from \"../../constants/sizes\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Clickable from \"../../components/Clickable/Clickable\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { VibeComponentProps, VibeComponent, withStaticProps } from \"../../types\";\nimport styles from \"./TextField.module.scss\";\nimport { Tooltip } from \"../Tooltip\";\n\nconst EMPTY_OBJECT = { primary: \"\", secondary: \"\", layout: \"\" };\n\nexport interface TextFieldProps extends VibeComponentProps {\n  placeholder?: string;\n  /** See https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete for all of the available options */\n  autoComplete?: string;\n  value?: string;\n  onChange?: (\n    value: string,\n    event: React.ChangeEvent<HTMLInputElement> | Pick<React.ChangeEvent<HTMLInputElement>, \"target\">\n  ) => void;\n  onBlur?: (event: React.FocusEvent) => void;\n  onFocus?: (event: React.FocusEvent) => void;\n  onKeyDown?: (event: React.KeyboardEvent) => void;\n  onWheel?: (event: React.WheelEvent) => void;\n  debounceRate?: number;\n  autoFocus?: boolean;\n  disabled?: boolean;\n  readonly?: boolean;\n  setRef?: (node: HTMLElement) => void;\n  iconName?: string | React.FunctionComponent | null;\n  secondaryIconName?: string | React.FunctionComponent | null;\n  title?: string;\n  /** SIZES is exposed on the component itself */\n  size?: TextFieldSize;\n  /** Don't provide status for plain assistant text */\n  validation?: { status?: \"error\" | \"success\"; text?: string }; // TODO make common validation class?\n  wrapperClassName?: string;\n  onIconClick?: (icon: string | React.FunctionComponent | null) => void;\n  clearOnIconClick?: boolean;\n  labelIconName?: string | React.FunctionComponent | null;\n  showCharCount?: boolean;\n  inputAriaLabel?: string;\n  searchResultsContainerId?: string;\n  activeDescendant?: string;\n  /**  Icon names labels for a11y */\n  /// TODO Remove layout in next major\n  iconsNames?: {\n    layout: string;\n    primary: string;\n    secondary: string;\n  };\n  /** TEXT_TYPES is exposed on the component itself */\n  type?: TextFieldTextType;\n  maxLength?: number;\n  trim?: boolean;\n  /** ARIA role for container landmark */\n  role?: string;\n  /** adds required to the input element */\n  required?: boolean;\n  requiredErrorText?: string;\n  /** shows loading animation */\n  loading?: boolean;\n  /**\n   * @deprecated - use \"data-testid\" instead\n   */\n  dataTestId?: string;\n  requiredAsterisk?: boolean; // TODO: Deprecate in next major version.\n  secondaryDataTestId?: string;\n  tabIndex?: number;\n  name?: string;\n  underline?: boolean;\n  /**\n   * Apply new style for read only, use along with `readonly` prop\n   */\n  withReadOnlyStyle?: boolean;\n  /**\n   * When true, component is controlled by an external state\n   */\n  controlled?: boolean;\n  iconTooltipContent?: string;\n  secondaryTooltipContent?: string;\n}\n\nconst TextField: VibeComponent<TextFieldProps, unknown> & {\n  sizes?: typeof BASE_SIZES;\n  types?: typeof TextFieldTextType;\n  feedbacks?: typeof TextFieldFeedbackState;\n} = forwardRef(\n  (\n    {\n      className = \"\",\n      placeholder = \"\",\n      autoComplete = \"off\",\n      value,\n      onChange = NOOP,\n      onBlur = NOOP,\n      onFocus = NOOP,\n      onKeyDown = NOOP,\n      onWheel = NOOP,\n      debounceRate = 0,\n      autoFocus = false,\n      disabled = false,\n      readonly = false,\n      setRef = NOOP,\n      iconName,\n      secondaryIconName,\n      id = \"input\",\n      title = \"\",\n      size = TextField.sizes.SMALL,\n      validation = null,\n      wrapperClassName = \"\",\n      onIconClick = NOOP,\n      clearOnIconClick = false,\n      labelIconName,\n      showCharCount = false,\n      inputAriaLabel,\n      searchResultsContainerId = \"\",\n      activeDescendant = \"\",\n      iconsNames = EMPTY_OBJECT,\n      type = TextFieldTextType.TEXT,\n      maxLength = null,\n      trim = false,\n      role = \"\",\n      required = false,\n      requiredErrorText = \"\",\n      loading = false,\n      requiredAsterisk = false,\n      dataTestId: backwardCompatibilityDataTestId,\n      \"data-testid\": dataTestId,\n      secondaryDataTestId,\n      tabIndex,\n      underline = false,\n      name,\n      withReadOnlyStyle,\n      controlled = false,\n      iconTooltipContent,\n      secondaryTooltipContent\n    },\n    ref\n  ) => {\n    const [isRequiredAndEmpty, setIsRequiredAndEmpty] = useState(false);\n\n    const overrideDataTestId = backwardCompatibilityForProperties(\n      [dataTestId, backwardCompatibilityDataTestId],\n      getTestId(ComponentDefaultTestId.TEXT_FIELD, id)\n    );\n    const inputRef = useRef(null);\n    const mergedRef = useMergeRef(ref, inputRef, setRef);\n\n    const onBlurCallback = useCallback(\n      (e: React.FocusEvent<HTMLInputElement>) => {\n        if (required && !e.target.value) {\n          setIsRequiredAndEmpty(true);\n        }\n        onBlur(e);\n      },\n      [onBlur, required]\n    );\n\n    const onChangeCallback = useCallback(\n      (value: string, e?: React.ChangeEvent<HTMLInputElement>) => {\n        if (isRequiredAndEmpty && value) {\n          setIsRequiredAndEmpty(false);\n        }\n        const event = e || { target: inputRef.current };\n        onChange(value, event);\n      },\n      [onChange, isRequiredAndEmpty]\n    );\n\n    const {\n      inputValue: uncontrolledInput,\n      onEventChanged,\n      clearValue\n    } = useDebounceEvent({\n      delay: debounceRate,\n      onChange: onChangeCallback,\n      initialStateValue: value,\n      trim\n    });\n\n    const inputValue = useMemo(() => {\n      return controlled ? value : uncontrolledInput;\n    }, [controlled, value, uncontrolledInput]);\n\n    const handleChange = useCallback<ChangeEventHandler<HTMLInputElement>>(\n      event => {\n        controlled ? onChangeCallback(event.target.value, event) : onEventChanged(event);\n      },\n      [controlled, onChangeCallback, onEventChanged]\n    );\n\n    const currentStateIconName = useMemo(() => {\n      if (secondaryIconName) {\n        return inputValue ? secondaryIconName : iconName;\n      }\n      return iconName;\n    }, [iconName, secondaryIconName, inputValue]);\n\n    const onIconClickCallback = useCallback(() => {\n      if (disabled) {\n        return;\n      }\n\n      if (clearOnIconClick) {\n        if (inputRef.current) {\n          inputRef.current.focus();\n        }\n        // Do it cause otherwise the value is not cleared in target object\n        inputRef.current.value = \"\";\n        controlled ? onChangeCallback(\"\") : clearValue();\n      }\n      onIconClick(currentStateIconName);\n    }, [disabled, clearOnIconClick, onIconClick, currentStateIconName, controlled, onChangeCallback, clearValue]);\n\n    const validationClass = useMemo(() => {\n      if ((!validation || !validation.status) && !isRequiredAndEmpty) {\n        return \"\";\n      }\n      const status = isRequiredAndEmpty ? \"error\" : validation.status;\n      return FEEDBACK_CLASSES[status];\n    }, [validation, isRequiredAndEmpty]);\n\n    const hasIcon = iconName || secondaryIconName;\n    const shouldShowExtraText = showCharCount || (validation && validation.text) || isRequiredAndEmpty;\n    const isSecondary = secondaryIconName === currentStateIconName;\n    const isPrimary = iconName === currentStateIconName;\n    const shouldFocusOnPrimaryIcon =\n      (onIconClick !== NOOP || iconsNames.primary || iconTooltipContent) && inputValue && iconName.length && isPrimary;\n    const shouldFocusOnSecondaryIcon = (secondaryIconName || secondaryTooltipContent) && isSecondary && !!inputValue;\n\n    useEffect(() => {\n      if (!inputRef?.current || !autoFocus) {\n        return;\n      }\n\n      const animationFrame = requestAnimationFrame(() => inputRef.current.focus());\n      return () => cancelAnimationFrame(animationFrame);\n    }, [inputRef, autoFocus]);\n\n    const isIconContainerClickable = onIconClick !== NOOP || clearOnIconClick;\n\n    const primaryIconLabel = iconsNames.primary || iconTooltipContent;\n    const secondaryIconLabel = iconsNames.secondary || secondaryTooltipContent;\n\n    return (\n      <div\n        className={cx(styles.textField, wrapperClassName, {\n          [styles.disabled]: disabled,\n          [styles.onlyUnderline]: underline\n        })}\n        role={role}\n        aria-busy={loading}\n      >\n        <div className={cx(styles.labelWrapper)}>\n          <FieldLabel labelText={title} icon={labelIconName} labelFor={id} requiredAsterisk={requiredAsterisk} />\n          <div className={cx(styles.inputWrapper, SIZE_MAPPER[getActualSize(size)], validationClass)}>\n            {/*Programatical input (tabIndex={-1}) is working fine with aria-activedescendant attribute despite the rule*/}\n            {/*eslint-disable-next-line jsx-a11y/aria-activedescendant-has-tabindex*/}\n            <input\n              className={cx(className, styles.input, {\n                [styles.inputHasIcon]: !!hasIcon,\n                [styles.readOnly]: readonly,\n                // TODO: use `readonly` prop next major instead of withReadOnlyStyle\n                [styles.withReadOnlyStyle]: withReadOnlyStyle\n              })}\n              placeholder={placeholder}\n              autoComplete={autoComplete}\n              value={inputValue}\n              onChange={handleChange}\n              disabled={disabled}\n              readOnly={readonly}\n              ref={mergedRef}\n              type={type}\n              id={id}\n              data-testid={overrideDataTestId}\n              name={name}\n              onBlur={onBlurCallback}\n              onFocus={onFocus}\n              onKeyDown={onKeyDown}\n              onWheel={onWheel}\n              maxLength={maxLength}\n              role={searchResultsContainerId && \"combobox\"} // For voice reader\n              aria-label={inputAriaLabel || placeholder}\n              aria-invalid={(validation && validation.status === \"error\") || isRequiredAndEmpty}\n              aria-owns={searchResultsContainerId}\n              aria-activedescendant={activeDescendant}\n              aria-required={required}\n              required={required}\n              tabIndex={tabIndex}\n            />\n            {loading && (\n              <div\n                className={cx(styles.loaderContainer, {\n                  [styles.loaderContainerHasIcon]: hasIcon\n                })}\n              >\n                <div className={cx(styles.loader)}>\n                  <Loader svgClassName={cx(styles.loaderSvg)} />\n                </div>\n              </div>\n            )}\n            <Tooltip\n              content={isPrimary ? iconTooltipContent : undefined}\n              addKeyboardHideShowTriggersByDefault\n              referenceWrapperClassName={styles.tooltipContainer}\n            >\n              <Clickable\n                className={cx(styles.iconContainer, {\n                  [styles.iconContainerHasIcon]: hasIcon,\n                  [styles.iconContainerActive]: isPrimary,\n                  [styles.iconContainerClickable]: isIconContainerClickable\n                })}\n                onClick={onIconClickCallback}\n                tabIndex={shouldFocusOnPrimaryIcon ? \"0\" : \"-1\"}\n                ariaLabel={primaryIconLabel}\n              >\n                <Icon\n                  icon={iconName}\n                  className={cx(styles.icon)}\n                  clickable={false}\n                  iconType={Icon.type.ICON_FONT}\n                  iconSize={size === TextField.sizes.SMALL ? \"16px\" : \"18px\"}\n                />\n              </Clickable>\n            </Tooltip>\n            <Tooltip\n              content={isSecondary ? secondaryTooltipContent : undefined}\n              addKeyboardHideShowTriggersByDefault\n              referenceWrapperClassName={styles.tooltipContainer}\n            >\n              <Clickable\n                className={cx(styles.iconContainer, {\n                  [styles.iconContainerHasIcon]: hasIcon,\n                  [styles.iconContainerActive]: isSecondary,\n                  [styles.iconContainerClickable]: isIconContainerClickable\n                })}\n                onClick={onIconClickCallback}\n                tabIndex={shouldFocusOnSecondaryIcon ? \"0\" : \"-1\"}\n                data-testid={secondaryDataTestId || getTestId(ComponentDefaultTestId.TEXT_FIELD_SECONDARY_BUTTON, id)}\n                ariaLabel={secondaryIconLabel}\n              >\n                <Icon\n                  icon={secondaryIconName}\n                  className={cx(styles.icon)}\n                  clickable={false}\n                  iconType={Icon.type.ICON_FONT}\n                  iconSize={size === TextField.sizes.SMALL ? \"16px\" : \"18px\"}\n                />\n              </Clickable>\n            </Tooltip>\n          </div>\n          {shouldShowExtraText && (\n            <Text type={Text.types.TEXT2} color={Text.colors.SECONDARY} className={cx(styles.subTextContainer)}>\n              {validation && validation.text && (\n                <span className={cx(styles.subTextContainerStatus)}>\n                  {isRequiredAndEmpty ? requiredErrorText : validation.text}\n                </span>\n              )}\n              {showCharCount && (\n                <span className={cx(styles.counter)} aria-label={TextFieldAriaLabel.CHAR}>\n                  {(inputValue && inputValue.length) || 0}\n                </span>\n              )}\n            </Text>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(TextField, {\n  sizes: BASE_SIZES,\n  feedbacks: TextFieldFeedbackState,\n  types: TextFieldTextType\n});\n"],"names":["EMPTY_OBJECT","primary","secondary","layout","TextField","forwardRef","_ref","ref","_ref$className","className","_ref$placeholder","placeholder","_ref$autoComplete","autoComplete","value","_ref$onChange","onChange","NOOP","_ref$onBlur","onBlur","_ref$onFocus","onFocus","_ref$onKeyDown","onKeyDown","_ref$onWheel","onWheel","_ref$debounceRate","debounceRate","_ref$autoFocus","autoFocus","_ref$disabled","disabled","_ref$readonly","readonly","_ref$setRef","setRef","iconName","secondaryIconName","_ref$id","id","_ref$title","title","_ref$size","size","sizes","SMALL","_ref$validation","validation","_ref$wrapperClassName","wrapperClassName","_ref$onIconClick","onIconClick","_ref$clearOnIconClick","clearOnIconClick","labelIconName","_ref$showCharCount","showCharCount","inputAriaLabel","_ref$searchResultsCon","searchResultsContainerId","_ref$activeDescendant","activeDescendant","_ref$iconsNames","iconsNames","_ref$type","type","TextFieldTextType","TEXT","_ref$maxLength","maxLength","_ref$trim","trim","_ref$role","role","_ref$required","required","_ref$requiredErrorTex","requiredErrorText","_ref$loading","loading","_ref$requiredAsterisk","requiredAsterisk","backwardCompatibilityDataTestId","dataTestId","secondaryDataTestId","tabIndex","_ref$underline","underline","name","withReadOnlyStyle","_ref$controlled","controlled","iconTooltipContent","secondaryTooltipContent","_useState","useState","_useState2","_slicedToArray","isRequiredAndEmpty","setIsRequiredAndEmpty","overrideDataTestId","backwardCompatibilityForProperties","getTestId","ComponentDefaultTestId","TEXT_FIELD","inputRef","useRef","mergedRef","useMergeRef","onBlurCallback","useCallback","e","target","onChangeCallback","current","_useDebounceEvent","useDebounceEvent","delay","initialStateValue","uncontrolledInput","inputValue","onEventChanged","clearValue","useMemo","handleChange","event","currentStateIconName","onIconClickCallback","focus","validationClass","status","FEEDBACK_CLASSES","hasIcon","shouldShowExtraText","text","isSecondary","isPrimary","shouldFocusOnPrimaryIcon","length","shouldFocusOnSecondaryIcon","useEffect","animationFrame","requestAnimationFrame","cancelAnimationFrame","isIconContainerClickable","primaryIconLabel","secondaryIconLabel","React","createElement","cx","styles","textField","_defineProperty","onlyUnderline","labelWrapper","FieldLabel","labelText","icon","labelFor","inputWrapper","SIZE_MAPPER","getActualSize","input","inputHasIcon","readOnly","loaderContainer","loaderContainerHasIcon","loader","Loader","svgClassName","loaderSvg","Tooltip","content","undefined","addKeyboardHideShowTriggersByDefault","referenceWrapperClassName","tooltipContainer","Clickable","iconContainer","iconContainerHasIcon","iconContainerActive","iconContainerClickable","onClick","ariaLabel","Icon","clickable","iconType","ICON_FONT","iconSize","TEXT_FIELD_SECONDARY_BUTTON","Text","types","TEXT2","color","colors","SECONDARY","subTextContainer","subTextContainerStatus","counter","TextFieldAriaLabel","CHAR","withStaticProps","BASE_SIZES","feedbacks","TextFieldFeedbackState"],"mappings":"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"}
{"version":3,"file":"useResizeObserver.js","sources":["../../../../src/hooks/useResizeObserver.ts"],"sourcesContent":["import { RefObject, useCallback, useEffect } from \"react\";\nimport { debounce } from \"lodash-es\";\n\ntype ResizeCallback = ({ borderBoxSize }: { borderBoxSize: ResizeObserverSize }) => void;\n\nexport default function useResizeObserver({\n  ref,\n  callback,\n  debounceTime = 200\n}: {\n  ref: RefObject<HTMLElement>;\n  callback: ResizeCallback;\n  debounceTime?: number;\n}) {\n  const debouncedCallback = useCallback(debounce<ResizeCallback>(callback, debounceTime), [callback, debounceTime]);\n\n  useEffect(() => {\n    if (!window.ResizeObserver) {\n      return;\n    }\n    if (!ref?.current) return;\n\n    function borderBoxSizeCallback(borderBoxSize: ResizeObserverSize | ReadonlyArray<ResizeObserverSize>): number {\n      const value = Array.isArray(borderBoxSize) ? borderBoxSize[0] : borderBoxSize;\n      return window.requestAnimationFrame(() => {\n        debouncedCallback({ borderBoxSize: value });\n      });\n    }\n\n    let animationFrameId: number | null = null;\n\n    const resizeObserver = new ResizeObserver(entries => {\n      const entry = entries[0];\n      if (entry && entry.borderBoxSize) {\n        // handle chrome (entry.borderBoxSize[0])\n        // handle ff (entry.borderBoxSize)\n        if (!Array.isArray(entry.borderBoxSize)) {\n          animationFrameId = borderBoxSizeCallback(entry.borderBoxSize);\n        } else {\n          const borderBoxEntry = entry.borderBoxSize[0];\n          animationFrameId = borderBoxSizeCallback(borderBoxEntry);\n        }\n      } else if (entry.contentRect) {\n        // handle safari (entry.contentRect)\n        const borderBoxSize = { blockSize: entry.contentRect.height, inlineSize: entry?.contentRect?.width || 0 };\n        animationFrameId = borderBoxSizeCallback(borderBoxSize);\n      } else {\n        return;\n      }\n    });\n\n    resizeObserver.observe(ref?.current);\n\n    return () => {\n      if (debounceTime !== 0) {\n        debouncedCallback.cancel();\n      }\n\n      if (animationFrameId) {\n        window.cancelAnimationFrame(animationFrameId);\n      }\n\n      resizeObserver.disconnect();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ref?.current, callback, debounceTime, debouncedCallback]);\n}\n"],"names":["useResizeObserver","_ref","ref","callback","_ref$debounceTime","debounceTime","debouncedCallback","useCallback","debounce","useEffect","window","ResizeObserver","current","animationFrameId","resizeObserver","entries","entry","borderBoxSize","Array","isArray","borderBoxSizeCallback","contentRect","blockSize","height","inlineSize","_a","width","observe","cancel","cancelAnimationFrame","disconnect","value","requestAnimationFrame"],"mappings":"wFAKwB,SAAAA,EAAiBC,GAQxC,IAPCC,EAAGD,EAAHC,IACAC,EAAQF,EAARE,SAAQC,EAAAH,EACRI,aAAAA,OAAe,IAAHD,EAAG,IAAGA,EAMZE,EAAoBC,EAAYC,EAAyBL,EAAUE,GAAe,CAACF,EAAUE,IAEnGI,GAAU,WACR,GAAKC,OAAOC,iBAGPT,aAAA,EAAAA,EAAKU,SAAV,CASA,IAAIC,EAAkC,KAEhCC,EAAiB,IAAIH,gBAAe,SAAAI,SAClCC,EAAQD,EAAQ,GACtB,GAAIC,GAASA,EAAMC,cAAe,CAGhC,GAAKC,MAAMC,QAAQH,EAAMC,eAIvBJ,EAAmBO,EADIJ,EAAMC,cAAc,SAF3CJ,EAAmBO,EAAsBJ,EAAMC,cAKlD,KAAM,KAAID,EAAMK,YAKf,OAHA,IAAMJ,EAAgB,CAAEK,UAAWN,EAAMK,YAAYE,OAAQC,YAA8B,QAAlBC,EAAAT,aAAK,EAALA,EAAOK,mBAAW,IAAAI,OAAA,EAAAA,EAAEC,QAAS,GACtGb,EAAmBO,EAAsBH,EAG1C,CACH,IAIA,OAFAH,EAAea,QAAQzB,aAAG,EAAHA,EAAKU,SAErB,WACgB,IAAjBP,GACFC,EAAkBsB,SAGhBf,GACFH,OAAOmB,qBAAqBhB,GAG9BC,EAAegB,aA1CE,CAEnB,SAASV,EAAsBH,GAC7B,IAAMc,EAAQb,MAAMC,QAAQF,GAAiBA,EAAc,GAAKA,EAChE,OAAOP,OAAOsB,uBAAsB,WAClC1B,EAAkB,CAAEW,cAAec,GACrC,GACF,CAsCD,GAAE,CAAC7B,eAAAA,EAAKU,QAAST,EAAUE,EAAcC,GAC5C"}
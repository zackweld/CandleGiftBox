{"version":3,"file":"StepIndicator.js","sources":["../../../../../../../src/components/MultiStepIndicator/components/StepIndicator/StepIndicator.tsx"],"sourcesContent":["/* eslint-disable react/default-props-match-prop-types,react/require-default-props */\nimport { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport { keyCodes } from \"../../../../constants/keyCodes\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport useEventListener from \"../../../../hooks/useEventListener\";\nimport useKeyEvent from \"../../../../hooks/useKeyEvent\";\nimport Icon from \"../../../../components/Icon/Icon\";\nimport Check from \"../../../../components/Icon/Icons/components/Check\";\nimport Divider from \"../../../../components/Divider/Divider\";\nimport { NOOP } from \"../../../../utils/function-utils\";\nimport HiddenText from \"../../../../components/HiddenText/HiddenText\";\nimport Clickable from \"../../../../components/Clickable/Clickable\";\nimport { Size, MultiStepType, StepStatus } from \"../../MultiStepConstants\";\nimport styles from \"./StepIndicator.module.scss\";\nimport classNames from \"classnames\";\nimport { SubIcon, VibeComponentProps } from \"../../../../types\";\nimport { IconType } from \"../../../Icon/IconConstants\";\n\nconst KEYS = [keyCodes.ENTER, keyCodes.SPACE];\n\nexport interface StepCircleDisplayProps {\n  status: StepStatus;\n  isFulfilledStepDisplayNumber: boolean;\n  fulfilledStepIcon: SubIcon;\n  fulfilledStepIconType: IconType.SVG | IconType.ICON_FONT;\n  stepNumber: number;\n}\n\nconst StepCircleDisplay: React.FC<StepCircleDisplayProps> = ({\n  status,\n  isFulfilledStepDisplayNumber,\n  fulfilledStepIcon,\n  fulfilledStepIconType,\n  stepNumber\n}) => {\n  return status === StepStatus.FULFILLED && !isFulfilledStepDisplayNumber ? (\n    <Icon\n      icon={fulfilledStepIcon}\n      className={classNames(styles.numberContainerTextCheckIcon)}\n      iconType={fulfilledStepIconType}\n      ignoreFocusStyle\n      clickable={false}\n      ariaHidden={true}\n    />\n  ) : (\n    <>{stepNumber}</>\n  );\n};\n\nexport interface StepIndicatorProps extends VibeComponentProps {\n  status: StepStatus;\n  titleText: string;\n  subtitleText?: string;\n  stepNumber?: number;\n  stepComponentClassName?: string;\n  type?: MultiStepType;\n  fulfilledStepIcon?: SubIcon;\n  fulfilledStepIconType?: IconType.SVG | IconType.ICON_FONT;\n  isFulfilledStepDisplayNumber?: boolean;\n  onClick?: (stepNumber: number) => void;\n  isFollowedByDivider?: boolean;\n  stepDividerClassName?: string;\n  isVertical?: boolean;\n  size?: Size;\n}\n\nconst StepIndicator: React.FC<StepIndicatorProps> = ({\n  stepComponentClassName,\n  stepNumber = 1,\n  status = StepStatus.PENDING,\n  titleText = \"Heading text\",\n  subtitleText = \"Subtitle text\",\n  type = MultiStepType.PRIMARY,\n  fulfilledStepIcon = Check,\n  fulfilledStepIconType = IconType.SVG,\n  isFulfilledStepDisplayNumber = false,\n  onClick = NOOP,\n  isFollowedByDivider = false,\n  stepDividerClassName,\n  isVertical = false,\n  id,\n  size = Size.REGULAR,\n  \"data-testid\": dataTestId\n}) => {\n  // Animations state\n  const [statusChangeAnimationState, setStatusChangeAnimationState] = useState(false);\n\n  // Refs\n  const componentRef = useRef(null);\n  const prevStatusRef = useRef(status);\n\n  // Callbacks for modifying animation state\n  const enableStatusChangeAnimation = useCallback(() => {\n    setStatusChangeAnimationState(true);\n  }, [setStatusChangeAnimationState]);\n\n  const disableStatusChangeAnimation = useCallback(() => {\n    setStatusChangeAnimationState(false);\n  }, [setStatusChangeAnimationState]);\n\n  const isStatusTransition = useCallback(() => prevStatusRef.current !== status, [prevStatusRef, status]);\n\n  const handleClick = useCallback(() => {\n    if (onClick) onClick(stepNumber);\n  }, [onClick, stepNumber]);\n\n  // Event listeners for removing animation.\n  useEventListener({\n    eventName: \"animationend\",\n    callback: disableStatusChangeAnimation,\n    ref: componentRef\n  });\n\n  useKeyEvent({\n    keys: KEYS,\n    callback: handleClick,\n    ref: componentRef\n  });\n\n  // Effect - triggering animation when necessary.\n  useEffect(() => {\n    if (isStatusTransition()) {\n      enableStatusChangeAnimation();\n    }\n  }, [status, isStatusTransition, enableStatusChangeAnimation]);\n\n  // Effect - updating previous status ref value (for animation) after component update.\n  useEffect(() => {\n    prevStatusRef.current = status;\n  }, [status]);\n\n  const ariaLabel = useMemo(() => {\n    return `Step ${stepNumber}: ${titleText} - ${subtitleText}, status: ${status}`;\n  }, [status, titleText, stepNumber, subtitleText]);\n\n  const getClassNamesWithSuffix = (suffix: string) => {\n    return [\n      getStyle(styles, camelCase(suffix || \"indicator\")),\n      getStyle(styles, camelCase(`type-${type}${suffix}`)),\n      getStyle(styles, camelCase(`status-${status}${suffix}`)),\n      getStyle(styles, camelCase(`size-${size}${suffix}`))\n    ];\n  };\n\n  return (\n    <Clickable\n      tabIndex=\"-1\"\n      elementType=\"li\"\n      className={cx(...getClassNamesWithSuffix(\"\"), stepComponentClassName, {\n        [styles.withAnimation]: statusChangeAnimationState,\n        [styles.clickable]: onClick,\n        [styles.textPlacementVertical]: isVertical\n      })}\n      aria-label={ariaLabel}\n      onClick={handleClick}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.STEP_INDICATOR, id)}\n    >\n      <div className={cx(...getClassNamesWithSuffix(\"__number-divider-container\"))}>\n        <div\n          className={cx(...getClassNamesWithSuffix(\"__number-container\"))}\n          ref={componentRef}\n          tabIndex={0}\n          role=\"button\"\n        >\n          <SwitchTransition mode=\"out-in\">\n            <CSSTransition<undefined>\n              // CSSTransition needs to be specified with the generic parameter to decide type for addEndListener's callback\n              // otherwise, addEndListener cb has only `done` param (ts error)\n              classNames={{\n                enter: styles.swapEnter,\n                enterActive: styles.swapEnterActive,\n                exit: styles.swapExit,\n                exitActive: styles.swapExitActive\n              }}\n              addEndListener={(node: HTMLElement, done: () => void) => {\n                node.addEventListener(\"transitionend\", done, false);\n              }}\n              key={status}\n            >\n              <span className={cx(...getClassNamesWithSuffix(\"__number-container__text\"))}>\n                <StepCircleDisplay\n                  fulfilledStepIcon={fulfilledStepIcon}\n                  fulfilledStepIconType={fulfilledStepIconType}\n                  isFulfilledStepDisplayNumber={isFulfilledStepDisplayNumber}\n                  stepNumber={stepNumber}\n                  status={status}\n                />\n              </span>\n            </CSSTransition>\n          </SwitchTransition>\n        </div>\n        {isFollowedByDivider && isVertical && <Divider className={cx(styles.divider, stepDividerClassName)} />}\n      </div>\n      <div className={cx(...getClassNamesWithSuffix(\"__text-container\"))}>\n        <div className={cx(...getClassNamesWithSuffix(\"__text-container__title\"))}>\n          <HiddenText text={status} /> {/* for accessibility */}\n          <span className={cx(...getClassNamesWithSuffix(\"__text-container__title__text\"))}>{titleText}</span>\n        </div>\n        {size !== Size.COMPACT ? (\n          <span className={cx(...getClassNamesWithSuffix(\"__text-container__subtitle__text\"))}>{subtitleText}</span>\n        ) : null}\n      </div>\n    </Clickable>\n  );\n};\n\nexport default StepIndicator;\n"],"names":["KEYS","keyCodes","ENTER","SPACE","StepCircleDisplay","_ref","fulfilledStepIcon","fulfilledStepIconType","status","StepStatus","FULFILLED","isFulfilledStepDisplayNumber","React","createElement","Fragment","stepNumber","Icon","icon","className","classNames","styles","numberContainerTextCheckIcon","iconType","ignoreFocusStyle","clickable","ariaHidden","StepIndicator","_ref2","stepComponentClassName","_ref2$stepNumber","_ref2$status","PENDING","_ref2$titleText","titleText","_ref2$subtitleText","subtitleText","_ref2$type","type","MultiStepType","PRIMARY","_ref2$fulfilledStepIc","Check","_ref2$fulfilledStepIc2","IconType","SVG","_ref2$isFulfilledStep","_ref2$onClick","onClick","NOOP","_ref2$isFollowedByDiv","isFollowedByDivider","stepDividerClassName","_ref2$isVertical","isVertical","id","_ref2$size","size","Size","REGULAR","dataTestId","_useState","useState","_useState2","_slicedToArray","statusChangeAnimationState","setStatusChangeAnimationState","componentRef","useRef","prevStatusRef","enableStatusChangeAnimation","useCallback","disableStatusChangeAnimation","isStatusTransition","current","handleClick","useEventListener","eventName","callback","ref","useKeyEvent","keys","useEffect","ariaLabel","useMemo","concat","getClassNamesWithSuffix","suffix","getStyle","camelCase","Clickable","tabIndex","elementType","cx","apply","_toConsumableArray","_defineProperty","withAnimation","textPlacementVertical","getTestId","ComponentDefaultTestId","STEP_INDICATOR","role","SwitchTransition","mode","CSSTransition","enter","swapEnter","enterActive","swapEnterActive","exit","swapExit","exitActive","swapExitActive","addEndListener","node","done","addEventListener","key","Divider","divider","HiddenText","text","COMPACT"],"mappings":"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"}
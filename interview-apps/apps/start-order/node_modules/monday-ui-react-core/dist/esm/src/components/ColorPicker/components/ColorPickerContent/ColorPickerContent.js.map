{"version":3,"file":"ColorPickerContent.js","sources":["../../../../../../../src/components/ColorPicker/components/ColorPickerContent/ColorPickerContent.tsx"],"sourcesContent":["import { difference as _difference, intersection as _intersection } from \"lodash-es\";\nimport React, { forwardRef, useCallback, useMemo, useRef } from \"react\";\nimport { BaseSizes } from \"../../../../constants\";\nimport { ColorStyle, CONTENT_COLORS_VALUES, contentColors } from \"../../../../utils/colors-vars-map\";\nimport NoColor from \"../../../Icon/Icons/components/NoColor\";\nimport {\n  ColorShapes,\n  DEFAULT_NUMBER_OF_COLORS_IN_LINE,\n  ColorPickerValue,\n  ColorPickerArrayValueOnly\n} from \"../../ColorPickerConstants\";\nimport { calculateColorPickerWidth } from \"../../services/ColorPickerStyleService\";\nimport {\n  GridKeyboardNavigationContext,\n  useGridKeyboardNavigationContext\n} from \"../../../GridKeyboardNavigationContext/GridKeyboardNavigationContext\";\nimport { ColorPickerClearButton } from \"./ColorPickerClearButton\";\nimport { ColorPickerColorsGrid } from \"./ColorPickerColorsGrid\";\nimport { VibeComponentProps, VibeComponent, SubIcon, withStaticProps } from \"../../../../types\";\nimport useMergeRef from \"../../../../hooks/useMergeRef\";\n\nexport interface ColorPickerContentProps extends VibeComponentProps {\n  value: ColorPickerValue;\n  onValueChange: (value: ColorPickerArrayValueOnly) => void;\n  colorsList: ColorPickerArrayValueOnly;\n  ColorIndicatorIcon?: SubIcon;\n  SelectedIndicatorIcon?: SubIcon;\n  NoColorIcon?: SubIcon;\n  colorStyle?: ColorStyle;\n  colorSize?: BaseSizes;\n  colorShape?: ColorShapes;\n  tooltipContentByColor?: Partial<Record<CONTENT_COLORS_VALUES, string>>;\n  noColorText?: string;\n  shouldRenderIndicatorWithoutBackground?: boolean;\n  isBlackListMode?: boolean;\n  numberOfColorsInLine?: number;\n  focusOnMount?: boolean;\n  isMultiselect?: boolean;\n  /**\n   * Used to force the component render the colorList prop as is. Usually, this flag should not be used. It's intended only for edge cases.\n   * Usually, only \"monday colors\" will be rendered (unless blacklist mode is used). This flag will override this behavior.\n   */\n  forceUseRawColorList?: boolean;\n  /**\n   * Used to enable color name tooltip on each color in the component. it's incompatible with forceUseRawColorList flag.\n   * When \"tooltipContentByColor\" is supplied, it will override the color name tooltip.\n   */\n  showColorNameTooltip?: boolean;\n}\n\nconst ColorPickerContent: VibeComponent<ColorPickerContentProps, HTMLDivElement> & {\n  // Backward compatibility for enum naming\n  COLOR_STYLES?: typeof ColorStyle;\n  sizes?: typeof BaseSizes;\n  colorStyles?: typeof ColorStyle;\n  colorSizes?: typeof BaseSizes;\n  colorShapes?: typeof ColorShapes;\n} = forwardRef(\n  (\n    {\n      className,\n      onValueChange,\n      value,\n      noColorText,\n      colorStyle = ColorStyle.REGULAR,\n      ColorIndicatorIcon,\n      SelectedIndicatorIcon,\n      shouldRenderIndicatorWithoutBackground,\n      NoColorIcon = NoColor,\n      isBlackListMode = true,\n      colorsList,\n      isMultiselect,\n      colorSize = BaseSizes.MEDIUM,\n      numberOfColorsInLine = DEFAULT_NUMBER_OF_COLORS_IN_LINE,\n      tooltipContentByColor = {},\n      focusOnMount,\n      colorShape = ColorShapes.SQUARE,\n      forceUseRawColorList,\n      showColorNameTooltip,\n      id,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const gridRef = useRef(null);\n    const mergedRef = useMergeRef(ref, gridRef);\n    const colorsRef = useRef(null);\n    const buttonRef = useRef(null);\n\n    const onClearButton = useCallback(() => {\n      onValueChange(null);\n    }, [onValueChange]);\n\n    const colorsToRender = useMemo(() => {\n      if (forceUseRawColorList) {\n        return colorsList;\n      }\n      return isBlackListMode ? _difference(contentColors, colorsList) : _intersection(contentColors, colorsList);\n    }, [forceUseRawColorList, isBlackListMode, colorsList]);\n\n    const onColorClicked = useCallback(\n      (color: CONTENT_COLORS_VALUES) => {\n        if (!isMultiselect) {\n          onValueChange([color]);\n          return;\n        }\n        const colors = [...value];\n        if (colors.includes(color)) {\n          const indexInSelected = colors.indexOf(color);\n          if (indexInSelected > -1) {\n            colors.splice(indexInSelected, 1);\n          }\n        } else {\n          colors.push(color);\n        }\n        onValueChange(colors);\n      },\n      [isMultiselect, onValueChange, value]\n    );\n\n    const positions = useMemo(() => [{ topElement: colorsRef, bottomElement: buttonRef }], []);\n    const keyboardContext = useGridKeyboardNavigationContext(positions, gridRef);\n    const width = calculateColorPickerWidth(colorSize, numberOfColorsInLine);\n\n    return (\n      <div className={className} style={{ width }} ref={mergedRef} tabIndex={-1}>\n        <GridKeyboardNavigationContext.Provider value={keyboardContext}>\n          <ColorPickerColorsGrid\n            ref={colorsRef}\n            onColorClicked={onColorClicked}\n            colorsToRender={colorsToRender}\n            numberOfColorsInLine={numberOfColorsInLine}\n            focusOnMount={focusOnMount}\n            value={value}\n            colorStyle={colorStyle}\n            ColorIndicatorIcon={ColorIndicatorIcon}\n            shouldRenderIndicatorWithoutBackground={shouldRenderIndicatorWithoutBackground}\n            SelectedIndicatorIcon={SelectedIndicatorIcon}\n            colorSize={colorSize}\n            tooltipContentByColor={tooltipContentByColor}\n            colorShape={colorShape}\n            showColorNameTooltip={showColorNameTooltip && !forceUseRawColorList}\n            id={id}\n            data-testid={dataTestId}\n          />\n          {noColorText && (\n            <ColorPickerClearButton Icon={NoColorIcon} onClick={onClearButton} text={noColorText} ref={buttonRef} />\n          )}\n        </GridKeyboardNavigationContext.Provider>\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(ColorPickerContent, {\n  // Backward compatibility for enum naming\n  COLOR_STYLES: ColorStyle,\n  sizes: BaseSizes,\n  colorStyles: ColorStyle,\n  colorSizes: BaseSizes,\n  colorShapes: ColorShapes\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","onValueChange","value","noColorText","_ref$colorStyle","colorStyle","ColorStyle","REGULAR","ColorIndicatorIcon","SelectedIndicatorIcon","shouldRenderIndicatorWithoutBackground","_ref$NoColorIcon","NoColorIcon","NoColor","_ref$isBlackListMode","isBlackListMode","colorsList","isMultiselect","_ref$colorSize","colorSize","BaseSizes","MEDIUM","_ref$numberOfColorsIn","numberOfColorsInLine","DEFAULT_NUMBER_OF_COLORS_IN_LINE","_ref$tooltipContentBy","tooltipContentByColor","focusOnMount","_ref$colorShape","colorShape","ColorShapes","SQUARE","forceUseRawColorList","showColorNameTooltip","id","dataTestId","gridRef","useRef","mergedRef","useMergeRef","colorsRef","buttonRef","onClearButton","useCallback","colorsToRender","useMemo","_difference","contentColors","_intersection","onColorClicked","color","colors","_toConsumableArray","includes","indexInSelected","indexOf","splice","push","positions","topElement","bottomElement","keyboardContext","useGridKeyboardNavigationContext","width","calculateColorPickerWidth","React","createElement","style","tabIndex","GridKeyboardNavigationContext","Provider","ColorPickerColorsGrid","ColorPickerClearButton","Icon","onClick","text","COLOR_STYLES","sizes","colorStyles","colorSizes","colorShapes"],"mappings":"mlCAkDA,IAwGeA,EAAAA,EAjGXC,GACF,SAAAC,EAwBEC,GACE,IAvBAC,EAASF,EAATE,UACAC,EAAaH,EAAbG,cACAC,EAAKJ,EAALI,MACAC,EAAWL,EAAXK,YAAWC,EAAAN,EACXO,WAAAA,OAAU,IAAAD,EAAGE,EAAWC,QAAOH,EAC/BI,EAAkBV,EAAlBU,mBACAC,EAAqBX,EAArBW,sBACAC,EAAsCZ,EAAtCY,uCAAsCC,EAAAb,EACtCc,YAAAA,OAAcC,IAAHF,EAAGE,EAAOF,EAAAG,EAAAhB,EACrBiB,gBAAAA,OAAkB,IAAHD,GAAOA,EACtBE,EAAUlB,EAAVkB,WACAC,EAAanB,EAAbmB,cAAaC,EAAApB,EACbqB,UAAAA,OAAS,IAAAD,EAAGE,EAAUC,OAAMH,EAAAI,EAAAxB,EAC5ByB,qBAAAA,OAAuBC,IAAHF,EAAGE,EAAgCF,EAAAG,EAAA3B,EACvD4B,sBAAAA,OAAqB,IAAAD,EAAG,CAAE,EAAAA,EAC1BE,EAAY7B,EAAZ6B,aAAYC,EAAA9B,EACZ+B,WAAAA,OAAU,IAAAD,EAAGE,EAAYC,OAAMH,EAC/BI,EAAoBlC,EAApBkC,qBACAC,EAAoBnC,EAApBmC,qBACAC,EAAEpC,EAAFoC,GACeC,EAAUrC,EAAzB,eAIIsC,EAAUC,EAAO,MACjBC,EAAYC,EAAYxC,EAAKqC,GAC7BI,EAAYH,EAAO,MACnBI,EAAYJ,EAAO,MAEnBK,EAAgBC,GAAY,WAChC1C,EAAc,KAChB,GAAG,CAACA,IAEE2C,GAAiBC,GAAQ,WAC7B,OAAIb,EACKhB,EAEFD,EAAkB+B,EAAYC,EAAe/B,GAAcgC,EAAcD,EAAe/B,EAChG,GAAE,CAACgB,EAAsBjB,EAAiBC,IAErCiC,GAAiBN,GACrB,SAACO,GACC,GAAKjC,EAAL,CAIA,IAAMkC,EAAMC,EAAOlD,GACnB,GAAIiD,EAAOE,SAASH,GAAQ,CAC1B,IAAMI,EAAkBH,EAAOI,QAAQL,GACnCI,GAAmB,GACrBH,EAAOK,OAAOF,EAAiB,EAElC,MACCH,EAAOM,KAAKP,GAEdjD,EAAckD,EAVb,MAFClD,EAAc,CAACiD,GAalB,GACD,CAACjC,EAAehB,EAAeC,IAG3BwD,GAAYb,GAAQ,WAAA,MAAM,CAAC,CAAEc,WAAYnB,EAAWoB,cAAenB,GAAY,GAAE,IACjFoB,GAAkBC,EAAiCJ,GAAWtB,GAC9D2B,GAAQC,EAA0B7C,EAAWI,GAEnD,OACE0C,EAAKC,cAAA,MAAA,CAAAlE,UAAWA,EAAWmE,MAAO,CAAEJ,MAAAA,IAAShE,IAAKuC,EAAW8B,UAAW,GACtEH,EAAAC,cAACG,EAA8BC,SAAS,CAAApE,MAAO2D,IAC7CI,EAAAC,cAACK,EAAqB,CACpBxE,IAAKyC,EACLS,eAAgBA,GAChBL,eAAgBA,GAChBrB,qBAAsBA,EACtBI,aAAcA,EACdzB,MAAOA,EACPG,WAAYA,EACZG,mBAAoBA,EACpBE,uCAAwCA,EACxCD,sBAAuBA,EACvBU,UAAWA,EACXO,sBAAuBA,EACvBG,WAAYA,EACZI,qBAAsBA,IAAyBD,EAC/CE,GAAIA,EAAE,cACOC,IAEdhC,GACC8D,EAAAC,cAACM,EAAsB,CAACC,KAAM7D,EAAa8D,QAAShC,EAAeiC,KAAMxE,EAAaJ,IAAK0C,KAKrG,IAGiD,CAEjDmC,aAActE,EACduE,MAAOzD,EACP0D,YAAaxE,EACbyE,WAAY3D,EACZ4D,YAAalD"}
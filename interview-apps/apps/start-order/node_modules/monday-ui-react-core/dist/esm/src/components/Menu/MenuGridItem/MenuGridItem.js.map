{"version":3,"file":"MenuGridItem.js","sources":["../../../../../../src/components/Menu/MenuGridItem/MenuGridItem.tsx"],"sourcesContent":["import React, { forwardRef, ReactElement, useCallback, useRef } from \"react\";\nimport useMergeRef from \"../../../hooks/useMergeRef\";\nimport { GridKeyboardNavigationContext } from \"../../GridKeyboardNavigationContext/GridKeyboardNavigationContext\";\nimport { useMenuGridItemNavContext } from \"./useMenuGridItemNavContext\";\nimport { useFocusGridItemByActiveStatus } from \"./useFocusGridItemByActiveStatus\";\nimport { useFocusWithin } from \"../../../hooks/useFocusWithin\";\nimport { VibeComponent, VibeComponentProps } from \"../../../types\";\nimport { CloseMenuOption } from \"../Menu/MenuConstants\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../tests/test-ids-utils\";\n\nexport interface MenuGridItemProps extends VibeComponentProps {\n  children?: ReactElement | ReactElement[];\n  /** if true, keyboard navigation will skip on this item. Also, this prop will be passed on to the child **/\n  disabled?: boolean;\n  /** a callback to close the wrapping menu **/\n  closeMenu?: (option: CloseMenuOption) => void;\n  /** the currently active index of the wrapping menu **/\n  activeItemIndex?: number;\n  setActiveItemIndex?: (index: number) => void;\n  getNextSelectableIndex?: (activeItemIndex: number) => number;\n  getPreviousSelectableIndex?: (activeItemIndex: number) => number;\n  /** the index of this item **/\n  index?: number;\n  /** true if this item is under a submenu, and not a top-level menu **/\n  isUnderSubMenu?: boolean;\n  setSubMenuIsOpenByIndex?: (index: number, isOpen: boolean) => void;\n  useDocumentEventListeners?: boolean;\n}\n\nconst MenuGridItem: VibeComponent<MenuGridItemProps> & {\n  isMenuChild?: boolean;\n  isSelectable?: boolean;\n} = forwardRef(\n  (\n    {\n      className,\n      id,\n      children,\n      index,\n      activeItemIndex = -1,\n      closeMenu,\n      getNextSelectableIndex,\n      getPreviousSelectableIndex,\n      setActiveItemIndex,\n      setSubMenuIsOpenByIndex,\n      isUnderSubMenu = false,\n      disabled = false,\n      useDocumentEventListeners = false,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const childRef = useRef();\n\n    const child = children && React.Children.only(children);\n    if (!child) {\n      console.error(\n        \"MenuGridItem can accept only a single element as first level child, this element is not valid: \",\n        child\n      );\n    }\n\n    const onFocusWithinChange = useCallback(\n      (isFocusWithin: boolean) => {\n        setSubMenuIsOpenByIndex(index, isFocusWithin);\n        if (isFocusWithin) {\n          setActiveItemIndex(index);\n        }\n      },\n      [index, setActiveItemIndex, setSubMenuIsOpenByIndex]\n    );\n    const { focusWithinProps } = useFocusWithin({ onFocusWithinChange });\n\n    useFocusGridItemByActiveStatus({\n      wrapperRef: componentRef,\n      childRef,\n      activeItemIndex,\n      index,\n      useDocumentEventListeners\n    });\n\n    const keyboardContext = useMenuGridItemNavContext({\n      wrapperRef: componentRef,\n      setActiveItemIndex,\n      getPreviousSelectableIndex,\n      getNextSelectableIndex,\n      activeItemIndex,\n      isUnderSubMenu,\n      closeMenu\n    });\n\n    return (\n      <section\n        ref={mergedRef}\n        className={className}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU_GRID_ITEM, id)}\n        tabIndex={-1}\n        role=\"grid\"\n        {...focusWithinProps}\n      >\n        <GridKeyboardNavigationContext.Provider value={keyboardContext}>\n          {React.cloneElement(child, {\n            ...child?.props,\n            disabled,\n            ref: childRef\n          })}\n        </GridKeyboardNavigationContext.Provider>\n      </section>\n    );\n  }\n);\n\nObject.assign(MenuGridItem, {\n  isMenuChild: true,\n  isSelectable: true\n});\n\nexport default MenuGridItem;\n"],"names":["MenuGridItem","forwardRef","_ref","ref","className","id","children","index","_ref$activeItemIndex","activeItemIndex","closeMenu","getNextSelectableIndex","getPreviousSelectableIndex","setActiveItemIndex","setSubMenuIsOpenByIndex","_ref$isUnderSubMenu","isUnderSubMenu","_ref$disabled","disabled","_ref$useDocumentEvent","useDocumentEventListeners","dataTestId","componentRef","useRef","mergedRef","useMergeRef","childRef","child","React","Children","only","console","error","onFocusWithinChange","useCallback","isFocusWithin","focusWithinProps","useFocusWithin","useFocusGridItemByActiveStatus","wrapperRef","keyboardContext","useMenuGridItemNavContext","createElement","Object","assign","getTestId","ComponentDefaultTestId","MENU_GRID_ITEM","tabIndex","role","GridKeyboardNavigationContext","Provider","value","cloneElement","props","isMenuChild","isSelectable"],"mappings":"yhBA6BMA,IAAAA,EAGFC,GACF,SAAAC,EAiBEC,GACE,IAhBAC,EAASF,EAATE,UACAC,EAAEH,EAAFG,GACAC,EAAQJ,EAARI,SACAC,EAAKL,EAALK,MAAKC,EAAAN,EACLO,gBAAAA,OAAe,IAAAD,GAAI,EAACA,EACpBE,EAASR,EAATQ,UACAC,EAAsBT,EAAtBS,uBACAC,EAA0BV,EAA1BU,2BACAC,EAAkBX,EAAlBW,mBACAC,EAAuBZ,EAAvBY,wBAAuBC,EAAAb,EACvBc,eAAAA,OAAiB,IAAHD,GAAQA,EAAAE,EAAAf,EACtBgB,SAAAA,OAAW,IAAHD,GAAQA,EAAAE,EAAAjB,EAChBkB,0BAAAA,OAA4B,IAAHD,GAAQA,EAClBE,EAAUnB,EAAzB,eAIIoB,EAAeC,EAAO,MACtBC,EAAYC,EAAYtB,EAAKmB,GAC7BI,EAAWH,IAEXI,EAAQrB,GAAYsB,EAAMC,SAASC,KAAKxB,GACzCqB,GACHI,QAAQC,MACN,kGACAL,GAIJ,IAAMM,EAAsBC,GAC1B,SAACC,GACCrB,EAAwBP,EAAO4B,GAC3BA,GACFtB,EAAmBN,EAEtB,GACD,CAACA,EAAOM,EAAoBC,IAEtBsB,EAAqBC,EAAe,CAAEJ,oBAAAA,IAAtCG,iBAERE,EAA+B,CAC7BC,WAAYjB,EACZI,SAAAA,EACAjB,gBAAAA,EACAF,MAAAA,EACAa,0BAAAA,IAGF,IAAMoB,EAAkBC,EAA0B,CAChDF,WAAYjB,EACZT,mBAAAA,EACAD,2BAAAA,EACAD,uBAAAA,EACAF,gBAAAA,EACAO,eAAAA,EACAN,UAAAA,IAGF,OACEkB,EAAAc,cAAA,UAAAC,OAAAC,OAAA,CACEzC,IAAKqB,EACLpB,UAAWA,EACXC,GAAIA,EAAE,cACOgB,GAAcwB,EAAUC,EAAuBC,eAAgB1C,GAC5E2C,UAAW,EACXC,KAAK,QACDb,GAEJR,EAAAc,cAACQ,EAA8BC,SAAQ,CAACC,MAAOZ,GAC5CZ,EAAMyB,aAAa1B,EACfgB,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAAjB,aAAA,EAAAA,EAAO2B,QACVpC,SAAAA,EACAf,IAAKuB,MAKf,IAGFiB,OAAOC,OAAO5C,EAAc,CAC1BuD,aAAa,EACbC,cAAc"}
{"version":3,"file":"TableRowMenuContext.js","sources":["../../../../../../../src/components/Table/context/TableRowMenuContext/TableRowMenuContext.tsx"],"sourcesContent":["import React, { createContext, useCallback, useContext, useMemo, useRef, useState } from \"react\";\nimport { ITableRowMenuContext, ITableRowMenuProviderProps } from \"./TableRowMenuContext.types\";\nimport { useTable } from \"../TableContext/TableContext\";\n\nconst TableRowMenuContext = createContext<ITableRowMenuContext | undefined>(undefined);\n\nexport const TableRowMenuProvider = ({ children }: ITableRowMenuProviderProps) => {\n  const { tableRootRef } = useTable();\n  const [isMenuOpen, setIsMenuOpen] = useState<boolean>(false);\n\n  const [hoveredRowRef, setHoveredRowRef] = useState<React.MutableRefObject<HTMLDivElement>>(null);\n  const hoveredRowId = useMemo<string>(() => hoveredRowRef?.current?.id, [hoveredRowRef]);\n\n  const rowMouseLeaveTimeoutId = useRef<ReturnType<typeof setTimeout>>(null);\n\n  const resetTimeout = useCallback(() => {\n    clearTimeout(rowMouseLeaveTimeoutId.current);\n    rowMouseLeaveTimeoutId.current = null;\n  }, []);\n\n  const startTimeout = useCallback((callback: () => void) => {\n    rowMouseLeaveTimeoutId.current = setTimeout(() => {\n      callback();\n    }, 400);\n  }, []);\n\n  const menuButtonPosition = useMemo<number>(() => {\n    if (!tableRootRef?.current || !hoveredRowRef?.current) return 0;\n    const tableRootTop = tableRootRef.current.getBoundingClientRect().top;\n    const rowTop = hoveredRowRef.current.getBoundingClientRect().top;\n    return rowTop - tableRootTop;\n  }, [hoveredRowRef, tableRootRef]);\n\n  const onMouseOverRow = useCallback(\n    (rowRef: React.MutableRefObject<HTMLDivElement>) => {\n      if (isMenuOpen || hoveredRowRef?.current === rowRef.current) return;\n      resetTimeout();\n      setHoveredRowRef(rowRef);\n    },\n    [isMenuOpen, hoveredRowRef, resetTimeout]\n  );\n\n  const onMouseLeaveRow = useCallback(() => {\n    if (isMenuOpen) return;\n    startTimeout(() => setHoveredRowRef(null));\n  }, [isMenuOpen, startTimeout]);\n\n  const onMouseOverRowMenu = useCallback(() => {\n    if (isMenuOpen) return;\n    resetTimeout();\n  }, [isMenuOpen, resetTimeout]);\n\n  const onMouseLeaveRowMenu = useCallback(() => {\n    if (isMenuOpen) return;\n    setHoveredRowRef(null);\n  }, [isMenuOpen]);\n\n  const resetHoveredRow = useCallback(() => {\n    setIsMenuOpen(false);\n    setHoveredRowRef(null);\n  }, []);\n\n  const contextValue = useMemo<ITableRowMenuContext>(\n    () => ({\n      hoveredRowId,\n      resetHoveredRow,\n      menuButtonPosition,\n      onMouseOverRow,\n      onMouseLeaveRow,\n      onMouseOverRowMenu,\n      onMouseLeaveRowMenu,\n      setTableMenuShown: () => setIsMenuOpen(true),\n      setTableMenuHidden: () => setIsMenuOpen(false)\n    }),\n    [\n      hoveredRowId,\n      resetHoveredRow,\n      menuButtonPosition,\n      onMouseLeaveRow,\n      onMouseLeaveRowMenu,\n      onMouseOverRow,\n      onMouseOverRowMenu\n    ]\n  );\n\n  return <TableRowMenuContext.Provider value={contextValue}>{children}</TableRowMenuContext.Provider>;\n};\n\nexport const useTableRowMenu = () => {\n  const context = useContext(TableRowMenuContext);\n  if (!context) {\n    throw new Error(\"useTableRowMenuContext must be used within a TableRowMenuProvider\");\n  }\n  return context;\n};\n"],"names":["TableRowMenuContext","createContext","undefined","TableRowMenuProvider","_ref","children","tableRootRef","useTable","_useState","useState","_useState2","_slicedToArray","isMenuOpen","setIsMenuOpen","_useState3","_useState4","hoveredRowRef","setHoveredRowRef","hoveredRowId","useMemo","_a","current","id","rowMouseLeaveTimeoutId","useRef","resetTimeout","useCallback","clearTimeout","startTimeout","callback","setTimeout","menuButtonPosition","tableRootTop","getBoundingClientRect","top","onMouseOverRow","rowRef","onMouseLeaveRow","onMouseOverRowMenu","onMouseLeaveRowMenu","resetHoveredRow","contextValue","setTableMenuShown","setTableMenuHidden","React","createElement","Provider","value","useTableRowMenu","context","useContext","Error"],"mappings":"iQAIA,IAAMA,EAAsBC,OAAgDC,GAE/DC,EAAuB,SAAHC,GAAgD,IAA1CC,EAAQD,EAARC,SAC7BC,EAAiBC,IAAjBD,aACRE,EAAoCC,GAAkB,GAAMC,EAAAC,EAAAH,EAAA,GAArDI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAEhCI,EAA0CL,EAAiD,MAAKM,EAAAJ,EAAAG,EAAA,GAAzFE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAChCG,EAAeC,GAAgB,WAAM,IAAAC,EAAA,OAAsB,QAAtBA,EAAAJ,eAAAA,EAAeK,eAAO,IAAAD,OAAA,EAAAA,EAAEE,EAAE,GAAE,CAACN,IAElEO,EAAyBC,EAAsC,MAE/DC,EAAeC,GAAY,WAC/BC,aAAaJ,EAAuBF,SACpCE,EAAuBF,QAAU,IAClC,GAAE,IAEGO,EAAeF,GAAY,SAACG,GAChCN,EAAuBF,QAAUS,YAAW,WAC1CD,GACD,GAAE,IACJ,GAAE,IAEGE,EAAqBZ,GAAgB,WACzC,KAAKb,aAAA,EAAAA,EAAce,YAAYL,eAAAA,EAAeK,SAAS,OAAO,EAC9D,IAAMW,EAAe1B,EAAae,QAAQY,wBAAwBC,IAElE,OADelB,EAAcK,QAAQY,wBAAwBC,IAC7CF,CAClB,GAAG,CAAChB,EAAeV,IAEb6B,EAAiBT,GACrB,SAACU,GACKxB,IAAcI,aAAA,EAAAA,EAAeK,WAAYe,EAAOf,UACpDI,IACAR,EAAiBmB,GAClB,GACD,CAACxB,EAAYI,EAAeS,IAGxBY,EAAkBX,GAAY,WAC9Bd,GACJgB,GAAa,WAAA,OAAMX,EAAiB,QACtC,GAAG,CAACL,EAAYgB,IAEVU,EAAqBZ,GAAY,WACjCd,GACJa,GACF,GAAG,CAACb,EAAYa,IAEVc,EAAsBb,GAAY,WAClCd,GACJK,EAAiB,KACnB,GAAG,CAACL,IAEE4B,EAAkBd,GAAY,WAClCb,GAAc,GACdI,EAAiB,KAClB,GAAE,IAEGwB,EAAetB,GACnB,WAAA,MAAO,CACLD,aAAAA,EACAsB,gBAAAA,EACAT,mBAAAA,EACAI,eAAAA,EACAE,gBAAAA,EACAC,mBAAAA,EACAC,oBAAAA,EACAG,kBAAmB,WAAA,OAAM7B,GAAc,EAAK,EAC5C8B,mBAAoB,WAAA,OAAM9B,GAAc,EAAM,EAC/C,GACD,CACEK,EACAsB,EACAT,EACAM,EACAE,EACAJ,EACAG,IAIJ,OAAOM,EAAAC,cAAC7C,EAAoB8C,SAAQ,CAACC,MAAON,GAAepC,EAC7D,EAEa2C,EAAkB,WAC7B,IAAMC,EAAUC,EAAWlD,GAC3B,IAAKiD,EACH,MAAUE,MAAM,qEAElB,OAAOF,CACT"}
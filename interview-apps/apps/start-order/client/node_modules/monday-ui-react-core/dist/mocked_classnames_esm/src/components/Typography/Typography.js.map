{"version":3,"file":"Typography.js","sources":["../../../../../src/components/Typography/Typography.tsx"],"sourcesContent":["import React, { forwardRef, useRef, HTMLAttributes, useContext } from \"react\";\nimport cx from \"classnames\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport VibeComponent from \"../../types/VibeComponent\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport { ElementContent } from \"../../types\";\nimport { TypographyColor, TypographyAlign } from \"./TypographyConstants\";\nimport { useEllipsisClass, useTooltipProps } from \"./TypographyHooks\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport { TypographyContext } from \"./utils/TypographyContext\";\nimport styles from \"./Typography.module.scss\";\n\nexport interface TypographyProps extends VibeComponentProps, HTMLAttributes<HTMLElement> {\n  /**\n   * The element tag of the text component\n   */\n  element?: string;\n  /**\n   * The textual content\n   */\n  children: ElementContent;\n  color?: TypographyColor;\n  align?: TypographyAlign;\n  /**\n   * When the text is too long, cut the end of the text and display instead of it three dots (...)\n   */\n  ellipsis?: boolean;\n  /**\n   * Use this prop combined with the boolean ellipsis prop for truncate the text and add an ellipsis after a certain number of lines\n   */\n  maxLines?: number;\n  /**\n   * All props are passed to the tooltip displayed when hovering over the text. By default, the tooltip will display when text contains an ellipsis and will show the full text\n   */\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * Hide tooltip when hovering the text, by default the tooltip swill display when text contains an ellipsis\n   */\n  withoutTooltip?: boolean;\n}\n\nconst Typography: VibeComponent<TypographyProps, HTMLElement> = forwardRef(\n  (\n    {\n      className,\n      id,\n      children,\n      tooltipProps,\n      \"data-testid\": dataTestId = getTestId(ComponentDefaultTestId.TEXT, id),\n      element = \"span\",\n      color = TypographyColor.PRIMARY,\n      align = TypographyAlign.START,\n      ellipsis = true,\n      maxLines = 1,\n      withoutTooltip = false,\n      role,\n      ...htmlAttributes\n    },\n    ref\n  ) => {\n    const { overflowTolerance } = useContext(TypographyContext);\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const ignoreHeightOverflow = maxLines === 1;\n    const { ref: overrideRef, class: ellipsisClass } = useEllipsisClass(mergedRef, ellipsis, maxLines);\n    const overrideTooltipProps = useTooltipProps(\n      componentRef,\n      withoutTooltip,\n      ellipsis,\n      tooltipProps,\n      children,\n      ignoreHeightOverflow,\n      overflowTolerance\n    ) as TooltipProps;\n\n    return (\n      <Tooltip {...overrideTooltipProps}>\n        {React.createElement(\n          element,\n          {\n            id,\n            \"data-testid\": dataTestId,\n            className: cx(styles.typography, styles[color], styles[align], ellipsisClass, className),\n            ref: overrideRef,\n            role,\n            ...htmlAttributes\n          },\n          children\n        )}\n      </Tooltip>\n    );\n  }\n);\n\nexport default Typography;\n"],"names":["Typography","forwardRef","_a","ref","className","id","children","tooltipProps","_a$dataTestid","dataTestId","getTestId","ComponentDefaultTestId","TEXT","_a$element","element","_a$color","color","TypographyColor","PRIMARY","_a$align","align","TypographyAlign","START","_a$ellipsis","ellipsis","_a$maxLines","maxLines","_a$withoutTooltip","withoutTooltip","role","htmlAttributes","__rest","overflowTolerance","useContext","TypographyContext","componentRef","useRef","mergedRef","useMergeRef","ignoreHeightOverflow","_useEllipsisClass","useEllipsisClass","overrideRef","ellipsisClass","class","overrideTooltipProps","useTooltipProps","React","createElement","Tooltip","Object","assign","cx","styles","typography"],"mappings":"8lBA2CMA,IAAAA,EAA0DC,GAC9D,SACEC,EAeAC,OAdEC,EAWIF,EAXJE,UACAC,EAUIH,EAVJG,GACAC,EASIJ,EATJI,SACAC,EAQIL,EARJK,aAAYC,EAQRN,EAPJ,eAAeO,OAAaC,IAAHF,EAAGE,EAAUC,EAAuBC,KAAMP,GAAGG,EAAAK,EAOlEX,EANJY,QAAAA,OAAU,IAAHD,EAAG,OAAMA,EAAAE,EAMZb,EALJc,MAAAA,OAAK,IAAAD,EAAGE,EAAgBC,QAAOH,EAAAI,EAK3BjB,EAJJkB,MAAAA,OAAK,IAAAD,EAAGE,EAAgBC,MAAKH,EAAAI,EAIzBrB,EAHJsB,SAAAA,OAAW,IAAHD,GAAOA,EAAAE,EAGXvB,EAFJwB,SAAAA,OAAW,IAAHD,EAAG,EAACA,EAAAE,EAERzB,EADJ0B,eAAAA,OAAiB,IAAHD,GAAQA,EACtBE,EAAI3B,EAAJ2B,KACGC,EAbLC,EAAA7B,EAAA,CAAA,YAAA,KAAA,WAAA,eAAA,cAAA,UAAA,QAAA,QAAA,WAAA,WAAA,iBAAA,SAiBQ8B,EAAsBC,EAAWC,GAAjCF,kBACFG,EAAeC,EAAO,MACtBC,EAAYC,EAAYnC,EAAKgC,GAC7BI,EAAoC,IAAbb,EAC7Bc,EAAmDC,EAAiBJ,EAAWb,EAAUE,GAA5EgB,EAAWF,EAAhBrC,IAAyBwC,EAAaH,EAApBI,MACpBC,EAAuBC,EAC3BX,EACAP,EACAJ,EACAjB,EACAD,EACAiC,EACAP,GAGF,OACEe,EAACC,cAAAC,EAAYC,OAAAC,OAAA,CAAA,EAAAN,GACVE,EAAMC,cACLlC,EAAOoC,OAAAC,OAAA,CAEL9C,GAAAA,EACA,cAAeI,EACfL,UAAWgD,EAAGC,EAAOC,WAAYD,EAAOrC,GAAQqC,EAAOjC,GAAQuB,EAAevC,GAC9ED,IAAKuC,EACLb,KAAAA,GACGC,GAELxB,GAIR"}
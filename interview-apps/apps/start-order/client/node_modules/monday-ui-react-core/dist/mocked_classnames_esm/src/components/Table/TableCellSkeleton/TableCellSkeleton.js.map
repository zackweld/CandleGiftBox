{"version":3,"file":"TableCellSkeleton.js","sources":["../../../../../../src/components/Table/TableCellSkeleton/TableCellSkeleton.tsx"],"sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport TableCell from \"../TableCell/TableCell\";\nimport Skeleton from \"../../Skeleton/Skeleton\";\nimport styles from \"./TableCellSkeleton.module.scss\";\nimport { VibeComponentProps } from \"../../../types\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport { TableLoadingStateType } from \"../Table/Table\";\nimport { getSkeletonType } from \"../Table/tableHelpers\";\nimport { camelCase } from \"lodash-es\";\n\nexport interface TableCellSkeletonProps extends VibeComponentProps {\n  type?: TableLoadingStateType;\n  short?: boolean;\n}\n\nconst TableCellSkeleton: React.FC<TableCellSkeletonProps> = ({ type = \"long-text\" }) => {\n  const isText = [\"long-text\", \"medium-text\"].includes(type);\n  return (\n    <TableCell>\n      <Skeleton\n        type={getSkeletonType(type)}\n        wrapperClassName={cx(styles.tableCellSkeletonWrapper, getStyle(styles, camelCase(type)))}\n        className={cx(styles.tableCellSkeleton, { [getStyle(styles, camelCase(type))]: !isText })}\n        fullWidth\n      />\n    </TableCell>\n  );\n};\n\nexport default TableCellSkeleton;\n"],"names":["TableCellSkeleton","_ref","_ref$type","type","isText","includes","React","TableCell","createElement","Skeleton","getSkeletonType","wrapperClassName","cx","styles","tableCellSkeletonWrapper","getStyle","camelCase","className","tableCellSkeleton","_defineProperty","fullWidth"],"mappings":"ibAgBA,IAAMA,EAAsD,SAArCC,GAAgE,IAAAC,EAAAD,EAAxBE,KAAAA,OAAO,IAAHD,EAAG,YAAWA,EACzEE,EAAS,CAAC,YAAa,eAAeC,SAASF,GACrD,OACEG,gBAACC,EAAS,KACRD,EAACE,cAAAC,EACC,CAAAN,KAAMO,EAAgBP,GACtBQ,iBAAkBC,EAAGC,EAAOC,yBAA0BC,EAASF,EAAQG,EAAUb,KACjFc,UAAWL,EAAGC,EAAOK,kBAAiBC,EAAA,CAAA,EAAKJ,EAASF,EAAQG,EAAUb,KAAUC,IAChFgB,WAAS,IAIjB"}
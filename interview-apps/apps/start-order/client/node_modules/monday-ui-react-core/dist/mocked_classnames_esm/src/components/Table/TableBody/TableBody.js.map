{"version":3,"file":"TableBody.js","sources":["../../../../../../src/components/Table/TableBody/TableBody.tsx"],"sourcesContent":["import React, { ReactElement, ComponentProps, forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { VibeComponent, VibeComponentProps } from \"../../../types\";\nimport TableRow, { ITableRowProps } from \"../TableRow/TableRow\";\nimport VirtualizedList from \"../../VirtualizedList/VirtualizedList\";\nimport styles from \"./TableBody.module.scss\";\nimport { useTable } from \"../context/TableContext/TableContext\";\nimport TableCellSkeleton from \"../TableCellSkeleton/TableCellSkeleton\";\nimport { SKELETON_ROWS_AMOUNT } from \"../Table/TableConsts\";\nimport { getLoadingTypeForCell } from \"../Table/tableHelpers\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\n\nexport interface ITableBodyProps extends VibeComponentProps {\n  children?:\n    | ReactElement<ITableRowProps>\n    | ReactElement<ITableRowProps>[]\n    | ReactElement<ComponentProps<typeof VirtualizedList>>;\n}\n\nconst TableBody: VibeComponent<ITableBodyProps, HTMLDivElement> = forwardRef(\n  ({ id, className, \"data-testid\": dataTestId, children }, ref) => {\n    const { dataState, emptyState, errorState, columns } = useTable();\n    const { isLoading, isError } = dataState || {};\n\n    const skeletonRender = [...new Array(SKELETON_ROWS_AMOUNT)].map((_, rowIndex) => (\n      <TableRow key={rowIndex}>\n        {columns.map(({ loadingStateType }, columnIndex) => (\n          <TableCellSkeleton\n            key={`${rowIndex}-${columnIndex}`}\n            type={getLoadingTypeForCell(loadingStateType, rowIndex)}\n          />\n        ))}\n      </TableRow>\n    ));\n\n    return (\n      <div\n        ref={ref}\n        id={id}\n        className={cx(styles.tableBody, className)}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_BODY, id)}\n        role=\"rowgroup\"\n      >\n        {isLoading\n          ? skeletonRender\n          : isError\n          ? errorState\n          : !children || (Array.isArray(children) && children.length === 0)\n          ? emptyState\n          : children}\n      </div>\n    );\n  }\n);\n\nexport default TableBody;\n"],"names":["TableBody","forwardRef","_ref","ref","id","className","dataTestId","children","_useTable","useTable","emptyState","errorState","columns","_ref2","dataState","isLoading","isError","skeletonRender","_toConsumableArray","Array","SKELETON_ROWS_AMOUNT","map","_","rowIndex","React","TableRow","key","_ref3","columnIndex","loadingStateType","createElement","TableCellSkeleton","concat","type","getLoadingTypeForCell","cx","styles","tableBody","getTestId","ComponentDefaultTestId","TABLE_BODY","role","isArray","length"],"mappings":"8lBAoBMA,IAAAA,EAA4DC,GAChE,SAAAC,EAAyDC,GAAO,IAA7DC,EAAEF,EAAFE,GAAIC,EAASH,EAATG,UAA0BC,EAAUJ,EAAzB,eAA2BK,EAAQL,EAARK,SAC3CC,EAAuDC,IAApCC,EAAUF,EAAVE,WAAYC,EAAUH,EAAVG,WAAYC,EAAOJ,EAAPI,QAC3CC,EADiBL,EAATM,WACoC,CAAE,EAAtCC,EAASF,EAATE,UAAWC,EAAOH,EAAPG,QAEbC,EAAiBC,EAAQC,MAAMC,IAAuBC,KAAI,SAACC,EAAGC,GAAQ,OAC1EC,gBAACC,EAAQ,CAACC,IAAKH,GACZX,EAAQS,KAAI,SAAAM,EAAuBC,GAAW,IAA/BC,EAAgBF,EAAhBE,iBAAgB,OAC9BL,EAACM,cAAAC,EACC,CAAAL,IAAG,GAAAM,OAAKT,OAAQS,OAAIJ,GACpBK,KAAMC,EAAsBL,EAAkBN,IAEjD,IACQ,IAGb,OACEC,EACEM,cAAA,MAAA,CAAA3B,IAAKA,EACLC,GAAIA,EACJC,UAAW8B,EAAGC,EAAOC,UAAWhC,iBACnBC,GAAcgC,EAAUC,EAAuBC,WAAYpC,GACxEqC,KAAK,YAEJ1B,EACGE,EACAD,EACAL,GACCJ,GAAaY,MAAMuB,QAAQnC,IAAiC,IAApBA,EAASoC,OAClDjC,EACAH,EAGV"}
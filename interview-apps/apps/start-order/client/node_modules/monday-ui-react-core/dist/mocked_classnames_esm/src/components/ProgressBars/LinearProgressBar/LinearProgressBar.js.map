{"version":3,"file":"LinearProgressBar.js","sources":["../../../../../../src/components/ProgressBars/LinearProgressBar/LinearProgressBar.tsx"],"sourcesContent":["import React, { forwardRef, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../../constants\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport PercentageLabel from \"../PercentageLabel/PercentageLabel\";\nimport { ProgressBarStyle, ProgressBarType } from \"./LinearProgressBarConstants\";\nimport { calculatePercentage, getProgressBarClassNames, Size } from \"./LinearProgressBarHelpers\";\nimport Bar from \"./Bar/Bar\";\nimport { VibeComponent, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport styles from \"./LinearProgressBar.module.scss\";\n\nexport interface LinearProgressBarProps extends VibeComponentProps {\n  /**\n   * Determine the progress bar style (Supported options exposed through `LinearProgressBar.styles`).\n   */\n  barStyle?: ProgressBarStyle;\n  /**\n   * The progress bar starting value.\n   */\n  min?: number;\n  /**\n   * The progress bar ending value.\n   */\n  max?: number;\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * The progress bar secondary value.\n   */\n  valueSecondary?: number;\n  /**\n   * If set to *true*, animations are used.\n   */\n  animated?: boolean;\n  /**\n   * Set external styling to the progress bar.\n   */\n  className?: string;\n  /**\n   * Determine the progress bar height (Supported options exposed through `LinearProgressBar.sizes`)\n   */\n  size?: Size;\n  /**\n   * Show progress bar progression in percentages\n   */\n  indicateProgress?: boolean;\n  /**\n   * Use multiple bars.\n   * ***Note:*** `value`, `valueSecondary` & `barStyle` won't be used\n   */\n  multi?: boolean;\n  /**\n   * Array of bar value objects {\n   * `value` - The progress value,\n   * `color` - hex [`#000000` ~ `#ffffff`] of the current bar\n   * }\n   */\n  multiValues?: {\n    /**\n     * The progress bar current value.\n     */\n    value?: number;\n    /**\n     * The bar color in hex - #000000 ~ #ffffff\n     */\n    color?: string;\n  }[];\n  /** ARIA description for the progress bar */\n  ariaLabel?: string;\n  /** Is the progress bar spread across the entire container width (width: 100%) */\n  fullWidth?: boolean;\n}\n\nconst LinearProgressBar: VibeComponent<LinearProgressBarProps, HTMLDivElement> & {\n  styles?: typeof ProgressBarStyle;\n  barStyles?: typeof ProgressBarStyle;\n  types?: typeof ProgressBarType;\n  barTypes?: typeof ProgressBarType;\n  sizes?: typeof SIZES;\n} = forwardRef(\n  (\n    {\n      min = 0,\n      max = 100,\n      value = 0,\n      valueSecondary = 0,\n      animated = true,\n      barStyle = ProgressBarStyle.PRIMARY,\n      className,\n      size = SIZES.SMALL,\n      indicateProgress = false,\n      multi = false,\n      multiValues = [],\n      ariaLabel = \"\",\n      id,\n      fullWidth = false,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const wrapperClassName = useMemo(() => {\n      return cx(\n        styles.wrapper,\n        {\n          [getStyle(styles, size.toString())]: size,\n          [styles.fullWidth]: fullWidth\n        },\n        className\n      );\n    }, [size, fullWidth, className]);\n\n    const valuePercentage = useMemo(() => {\n      if (multi) {\n        const firstValue = multiValues && multiValues.length && multiValues[0].value;\n        if (firstValue === null || firstValue === undefined) return 0;\n        return calculatePercentage(firstValue, min, max);\n      }\n      if (value === null || value === undefined) return 0;\n      return calculatePercentage(value, min, max);\n    }, [value, min, max, multi, multiValues]);\n\n    const renderMultiBars = useMemo(() => {\n      if (!multi) return null;\n      return (\n        <>\n          {[...multiValues].reverse().map(({ value: baseValue, color }, i) => (\n            <Bar\n              className={getProgressBarClassNames(baseValue)}\n              barStyle={ProgressBarStyle.NONE}\n              value={baseValue}\n              animated={animated}\n              type={ProgressBarType.PRIMARY}\n              color={color}\n              min={min}\n              max={max}\n              /* eslint-disable-next-line react/no-array-index-key */\n              id={`bar_${color}_${i}`}\n              key={`bar_${color}_${i}`}\n            />\n          ))}\n        </>\n      );\n    }, [min, max, animated, multiValues, multi]);\n\n    const renderPercentage = indicateProgress ? (\n      <PercentageLabel forElement=\"linear-progress-bar\" value={valuePercentage} />\n    ) : null;\n\n    const renderBaseBars = !multi ? (\n      <>\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barLabelName={ariaLabel}\n          barStyle={barStyle}\n          value={valueSecondary}\n          animated={animated}\n          type={ProgressBarType.SECONDARY}\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_SECONDARY}\n        />\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barStyle={barStyle}\n          value={value}\n          animated={animated}\n          type={ProgressBarType.PRIMARY}\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_PRIMARY}\n        />\n      </>\n    ) : null;\n\n    return (\n      <div\n        className={wrapperClassName}\n        ref={ref}\n        id={id}\n        data-testsid={dataTestId || getTestId(ComponentDefaultTestId.LINEAR_PROGRESS_BAR, id)}\n      >\n        <div className={styles.container}>\n          {renderBaseBars}\n          {renderMultiBars}\n        </div>\n        {renderPercentage}\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(LinearProgressBar, {\n  styles: ProgressBarStyle,\n  barStyles: ProgressBarStyle,\n  types: ProgressBarType,\n  barTypes: ProgressBarType,\n  sizes: SIZES\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","_ref$min","min","_ref$max","max","_ref$value","value","_ref$valueSecondary","valueSecondary","_ref$animated","animated","_ref$barStyle","barStyle","ProgressBarStyle","PRIMARY","className","_ref$size","size","SIZES","SMALL","_ref$indicateProgress","indicateProgress","_ref$multi","multi","_ref$multiValues","multiValues","_ref$ariaLabel","ariaLabel","id","_ref$fullWidth","fullWidth","dataTestId","wrapperClassName","useMemo","cx","styles","wrapper","_defineProperty","getStyle","valuePercentage","firstValue","length","calculatePercentage","renderMultiBars","React","createElement","Fragment","_toConsumableArray","reverse","map","_ref2","i","baseValue","color","Bar","getProgressBarClassNames","NONE","type","ProgressBarType","concat","key","renderPercentage","PercentageLabel","forElement","renderBaseBars","barLabelName","SECONDARY","ComponentDefaultTestId","BAR_SECONDARY","BAR_PRIMARY","getTestId","LINEAR_PROGRESS_BAR","container","barStyles","types","barTypes","sizes"],"mappings":"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"}
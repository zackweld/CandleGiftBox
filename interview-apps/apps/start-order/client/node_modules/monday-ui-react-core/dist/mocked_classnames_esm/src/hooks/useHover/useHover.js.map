{"version":3,"file":"useHover.js","sources":["../../../../../src/hooks/useHover/useHover.ts"],"sourcesContent":["import { MutableRefObject, useEffect, useRef, useState } from \"react\";\n\n// Standard hook implementation https://usehooks.com/useHover/\nexport default function useHover<T extends HTMLElement = HTMLElement>(): [MutableRefObject<T>, boolean] {\n  const [value, setValue] = useState<boolean>(false);\n  const ref = useRef<T>(null);\n  const handleMouseOver = (): void => setValue(true);\n  const handleMouseOut = (): void => setValue(false);\n  useEffect(\n    () => {\n      const node = ref.current;\n      if (node) {\n        node.addEventListener(\"mouseover\", handleMouseOver);\n        node.addEventListener(\"mouseout\", handleMouseOut);\n        return () => {\n          node.removeEventListener(\"mouseover\", handleMouseOver);\n          node.removeEventListener(\"mouseout\", handleMouseOut);\n        };\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [ref.current] // Recall only if ref changes\n  );\n  return [ref, value];\n}\n"],"names":["useHover","_useState","useState","_useState2","_slicedToArray","value","setValue","ref","useRef","handleMouseOver","handleMouseOut","useEffect","node","current","addEventListener","removeEventListener"],"mappings":"2IAGc,SAAUA,IACtB,IAAAC,EAA0BC,GAAkB,GAAMC,EAAAC,EAAAH,EAAA,GAA3CI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAChBI,EAAMC,EAAU,MAChBC,EAAkB,WAAH,OAAeH,GAAS,EAAK,EAC5CI,EAAiB,WAAH,OAAeJ,GAAS,EAAM,EAgBlD,OAfAK,GACE,WACE,IAAMC,EAAOL,EAAIM,QACjB,GAAID,EAGF,OAFAA,EAAKE,iBAAiB,YAAaL,GACnCG,EAAKE,iBAAiB,WAAYJ,GAC3B,WACLE,EAAKG,oBAAoB,YAAaN,GACtCG,EAAKG,oBAAoB,WAAYL,GAG1C,GAED,CAACH,EAAIM,UAEA,CAACN,EAAKF,EACf"}
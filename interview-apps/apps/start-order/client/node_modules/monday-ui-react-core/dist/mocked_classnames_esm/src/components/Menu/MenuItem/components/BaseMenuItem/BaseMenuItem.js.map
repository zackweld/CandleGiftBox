{"version":3,"file":"BaseMenuItem.js","sources":["../../../../../../../../src/components/Menu/MenuItem/components/BaseMenuItem/BaseMenuItem.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useEffect, useRef } from \"react\";\nimport Text from \"../../../../Text/Text\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport { TAB_INDEX_FOCUS_WITH_JS_ONLY } from \"../../MenuItemConstants\";\nimport MenuItemSubMenuIcon from \"../MenuItemSubMenuIcon/MenuItemSubMenuIcon\";\nimport MenuItemSubMenu from \"../MenuItemSubMenu/MenuItemSubMenu\";\nimport { CloseMenuOption } from \"../../../Menu/MenuConstants\";\nimport useMenuItemMouseEvents from \"../../hooks/useMenuItemMouseEvents\";\nimport useMenuItemKeyboardEvents from \"../../hooks/useMenuItemKeyboardEvents\";\nimport useMergeRef from \"../../../../../hooks/useMergeRef\";\nimport useIsMouseEnter from \"../../../../../hooks/useIsMouseEnter\";\nimport styles from \"./BaseMenuItem.module.scss\";\nimport { BaseMenuItemProps } from \"./BaseMenuItem.types\";\n\nconst BaseMenuItem = forwardRef(\n  (\n    {\n      subMenu,\n      className,\n      menuRef,\n      disabled = false,\n      selected = false,\n      onClick,\n      activeItemIndex = -1,\n      setActiveItemIndex,\n      index,\n      id,\n      isParentMenuVisible = false,\n      resetOpenSubMenuIndex,\n      hasOpenSubMenu = false,\n      setSubMenuIsOpenByIndex,\n      closeMenu,\n      useDocumentEventListeners = false,\n      isInitialSelectedState,\n      onMouseEnter,\n      onMouseLeave,\n      shouldScrollMenu,\n      \"data-testid\": dataTestId,\n      splitMenuItem = false,\n      children,\n      submenuPosition = \"right\"\n    }: BaseMenuItemProps,\n    ref: React.ForwardedRef<HTMLElement>\n  ) => {\n    const isActive = activeItemIndex === index;\n    const isSubMenuOpen = isActive && hasOpenSubMenu;\n    const shouldShowSubMenu = !disabled && Boolean(subMenu) && isParentMenuVisible && isSubMenuOpen;\n\n    const anchorRef = useRef(null);\n    const splitMenuItemIconButtonRef = useRef(null);\n\n    const mergedRef = useMergeRef(ref, anchorRef);\n\n    const isMouseEnterMenuItem = useIsMouseEnter({ ref: anchorRef });\n    const isMouseEnterIconButton = useIsMouseEnter({ ref: splitMenuItemIconButtonRef });\n\n    useEffect(() => {\n      const anchorElement = anchorRef.current;\n      if (!isActive || !shouldScrollMenu || !anchorElement) {\n        return;\n      }\n      if (anchorElement.scrollIntoViewIfNeeded) {\n        anchorElement.scrollIntoViewIfNeeded({ behaviour: \"smooth\" });\n        return;\n      }\n      anchorElement.scrollIntoView?.({ behavior: \"smooth\", block: \"center\" });\n    }, [isActive, shouldScrollMenu]);\n\n    useEffect(() => {\n      const anchorElement = anchorRef.current;\n      if (useDocumentEventListeners) return;\n      if (isActive) {\n        anchorElement?.focus();\n      }\n    }, [isActive, useDocumentEventListeners]);\n\n    const isMouseEnter = useMenuItemMouseEvents({\n      ref: anchorRef,\n      splitMenuItemIconButtonRef,\n      resetOpenSubMenuIndex,\n      setSubMenuIsOpenByIndex,\n      isActive,\n      setActiveItemIndex,\n      index,\n      hasChildren: Boolean(subMenu),\n      splitMenuItem\n    });\n\n    const { onClickCallback } = useMenuItemKeyboardEvents({\n      onClick,\n      disabled,\n      isActive,\n      index,\n      setActiveItemIndex,\n      hasChildren: Boolean(subMenu),\n      shouldShowSubMenu,\n      setSubMenuIsOpenByIndex,\n      menuRef,\n      isMouseEnter,\n      closeMenu,\n      useDocumentEventListeners,\n      splitMenuItem,\n      isMouseEnterMenuItem,\n      isMouseEnterIconButton\n    });\n\n    const closeSubMenu = useCallback(\n      (option: CloseMenuOption = {}) => {\n        setSubMenuIsOpenByIndex(index, false);\n        if (option.propagate) {\n          closeMenu(option);\n        }\n      },\n      [setSubMenuIsOpenByIndex, index, closeMenu]\n    );\n\n    return (\n      <Text\n        id={id}\n        element=\"li\"\n        type={Text.types.TEXT2}\n        aria-haspopup={subMenu ? true : undefined}\n        aria-expanded={subMenu ? shouldShowSubMenu : undefined}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU_ITEM, index)}\n        className={cx(styles.item, className, {\n          [styles.disabled]: disabled,\n          [styles.focused]: isActive,\n          [styles.selected]: selected,\n          [styles.initialSelected]: isInitialSelectedState,\n          [styles.splitMenuItem]: splitMenuItem\n        })}\n        ref={mergedRef}\n        onClick={onClickCallback}\n        role=\"menuitem\"\n        aria-current={isActive}\n        onMouseLeave={onMouseLeave}\n        onMouseEnter={onMouseEnter}\n        tabIndex={TAB_INDEX_FOCUS_WITH_JS_ONLY}\n      >\n        {children}\n        {Boolean(subMenu) && (\n          <>\n            <MenuItemSubMenuIcon\n              ref={splitMenuItemIconButtonRef}\n              isSplit={splitMenuItem}\n              active={shouldShowSubMenu}\n              disabled={disabled}\n            />\n            <MenuItemSubMenu\n              anchorRef={anchorRef}\n              open={shouldShowSubMenu}\n              onClose={closeSubMenu}\n              autoFocusOnMount={!useDocumentEventListeners}\n              submenuPosition={submenuPosition}\n            >\n              {subMenu}\n            </MenuItemSubMenu>\n          </>\n        )}\n      </Text>\n    );\n  }\n);\n\nexport default BaseMenuItem;\n"],"names":["BaseMenuItem","forwardRef","_ref","ref","subMenu","className","menuRef","_ref$disabled","disabled","_ref$selected","selected","onClick","_ref$activeItemIndex","activeItemIndex","setActiveItemIndex","index","id","_ref$isParentMenuVisi","isParentMenuVisible","resetOpenSubMenuIndex","_ref$hasOpenSubMenu","hasOpenSubMenu","setSubMenuIsOpenByIndex","closeMenu","_ref$useDocumentEvent","useDocumentEventListeners","isInitialSelectedState","onMouseEnter","onMouseLeave","shouldScrollMenu","dataTestId","_ref$splitMenuItem","splitMenuItem","children","_ref$submenuPosition","submenuPosition","isActive","shouldShowSubMenu","anchorRef","useRef","splitMenuItemIconButtonRef","mergedRef","useMergeRef","isMouseEnterMenuItem","useIsMouseEnter","isMouseEnterIconButton","useEffect","anchorElement","current","scrollIntoViewIfNeeded","behaviour","_a","scrollIntoView","call","behavior","block","focus","isMouseEnter","useMenuItemMouseEvents","hasChildren","onClickCallback","useMenuItemKeyboardEvents","closeSubMenu","useCallback","option","arguments","length","undefined","propagate","React","createElement","Text","element","type","types","TEXT2","getTestId","ComponentDefaultTestId","MENU_ITEM","cx","styles","item","_defineProperty","focused","initialSelected","role","tabIndex","TAB_INDEX_FOCUS_WITH_JS_ONLY","Fragment","MenuItemSubMenuIcon","isSplit","active","MenuItemSubMenu","open","onClose","autoFocusOnMount"],"mappings":"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"}
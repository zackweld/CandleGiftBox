{"version":3,"file":"Tooltip.js","sources":["../../../../../src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { camelCase, isFunction } from \"lodash-es\";\nimport cx from \"classnames\";\nimport React, { CSSProperties, isValidElement, PureComponent, ReactElement } from \"react\";\nimport { Modifier } from \"react-popper\";\nimport Dialog from \"../Dialog/Dialog\";\nimport { AnimationType, BASE_SIZES_WITH_NONE, HideShowEvent, JustifyType } from \"../../constants\";\nimport { DialogPosition } from \"../../constants/positions\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { TooltipArrowPosition, TooltipTheme } from \"./TooltipConstants\";\nimport { ElementContent } from \"../../types/ElementContent\";\nimport { MoveBy } from \"../../types/MoveBy\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport styles from \"./Tooltip.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { SubIcon } from \"../../types\";\nimport Icon from \"../Icon/Icon\";\nimport Flex from \"../Flex/Flex\";\nimport { warnDeprecated } from \"../../utils/warn-deprecated\";\n\nexport type TooltipProps = TooltipBaseProps & (TooltipWithChildrenProps | TooltipWithoutChildrenProps);\n\ninterface TooltipWithoutChildrenProps {\n  /**\n   * When true, the tooltip would be rendered on a Dialog without children\n   * Use case is currently for rendering Tipseen with floating prop\n   */\n  forceRenderWithoutChildren: boolean;\n  children?: ReactElement | Array<ReactElement>;\n}\n\ninterface TooltipWithChildrenProps {\n  forceRenderWithoutChildren?: boolean;\n  children: ReactElement | Array<ReactElement>;\n}\n\n// TODO TS-migration extend DialogProps, once Dialog is migrated to TS\ninterface TooltipBaseProps extends VibeComponentProps {\n  content: ElementContent;\n  style?: CSSProperties;\n  arrowPosition?: TooltipArrowPosition;\n  /** Class name for a tooltip's arrow */\n  arrowClassName?: string;\n  paddingSize?: keyof typeof BASE_SIZES_WITH_NONE;\n  /**\n   * How much to move the dialog in relative to children\n   * main is the axis in which the position is aligned to\n   * secondary is the vertical axes to the position\n   */\n  moveBy?: MoveBy;\n  theme?: TooltipTheme;\n  justify?: JustifyType;\n  getContainer?: () => HTMLElement;\n  /**\n   * how much delay should the Dialog wait until it should trigger the hide in MS\n   */\n  hideDelay?: number;\n  /**\n   * how much delay should the Dialog wait until it should trigger the show in MS\n   */\n  showDelay?: number;\n  disableDialogSlide?: boolean;\n  animationType?: AnimationType;\n  withoutDialog?: boolean;\n  /**\n   * the container selector in which to append the dialog\n   * for examples: \"body\" , \".my-class\", \"#my-id\"\n   */\n  containerSelector?: string;\n  /**\n   * With which delay tooltip is going to be shown\n   */\n  immediateShowDelay?: number;\n  /**\n   * when false, the arrow of the tooltip is hidden\n   */\n  tip?: boolean;\n  /**\n   * Show the Dialog when the children is mounting\n   */\n  shouldShowOnMount?: boolean;\n  hideWhenReferenceHidden?: boolean;\n  onTooltipHide?: () => void;\n  onTooltipShow?: () => void;\n  /**\n   * PopperJS Modifiers type\n   * https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Modifier<unknown>>;\n  /**\n   * Where the tooltip should be in reference to the children: Top, Left, Right, Bottom ...\n   */\n  position?: DialogPosition;\n  /**\n   * an array of hide/show trigger - Tooltip.hideShowTriggers\n   */\n  showTrigger?: HideShowEvent | Array<HideShowEvent>;\n  /**\n   * an array of hide/show trigger - Tooltip.hideShowTriggers\n   */\n  hideTrigger?: HideShowEvent | Array<HideShowEvent>;\n  /**\n   * If true, prevents open Tooltip from closing on mouseEnter and closes Tooltip, when mouse leaves it\n   */\n  showOnDialogEnter?: boolean;\n  /**\n   * A Classname to be added to <span> element which wraps the children\n   */\n  referenceWrapperClassName?: string;\n  /**\n   * Treats keyboard focus/blur events as mouse-enter/mouse-leave events\n   */\n  addKeyboardHideShowTriggersByDefault?: boolean;\n  /**\n   * set the state of the tooltip - open/close - controlled component\n   */\n  open?: boolean;\n  /**\n   * Overwrites z-index of the tooltip\n   */\n  zIndex?: number;\n  // TODO: make default next major\n  /**\n   * Limit tooltip to 240px\n   */\n  withMaxWidth?: boolean;\n  /**\n   * The title of the tooltip\n   */\n  title?: string;\n  /**\n   * The image of the tooltip\n   */\n  image?: string;\n  /**\n   * The icon of the tooltip next to the title\n   */\n  icon?: SubIcon;\n}\n// When last tooltip was shown in the last 1.5 second - the next tooltip will be shown immediately\nconst IMMEDIATE_SHOW_THRESHOLD_MS = 1500;\n\n// Shared state across multiple tooltip instances (i.e last tooltip shown time)\nconst globalState: { lastTooltipHideTS: number; openTooltipsCount: number } = {\n  lastTooltipHideTS: null,\n  openTooltipsCount: 0\n};\n\nexport default class Tooltip extends PureComponent<TooltipProps> {\n  wasShown: boolean;\n  static positions = DialogPosition;\n  static hideShowTriggers = HideShowEvent;\n  static themes = TooltipTheme;\n  static animationTypes = AnimationType;\n  static justifyTypes = JustifyType;\n  static arrowPositions = TooltipArrowPosition;\n  static defaultProps = {\n    arrowPosition: TooltipArrowPosition.CENTER,\n    moveBy: { main: 4, secondary: 0 },\n    theme: TooltipTheme.Dark,\n    position: Tooltip.positions.TOP,\n    justify: Tooltip.justifyTypes.CENTER,\n    hideDelay: 0,\n    showDelay: 300,\n    disableDialogSlide: true,\n    animationType: AnimationType.EXPAND,\n    withoutDialog: false,\n    containerSelector: \"#tooltips-container\",\n    tip: true,\n    hideWhenReferenceHidden: false,\n    modifiers: new Array<Modifier<unknown>>(),\n    showTrigger: Tooltip.hideShowTriggers.MOUSE_ENTER,\n    hideTrigger: Tooltip.hideShowTriggers.MOUSE_LEAVE,\n    showOnDialogEnter: false,\n    referenceWrapperClassName: \"\",\n    addKeyboardHideShowTriggersByDefault: false,\n    open: false\n  };\n  constructor(props: TooltipProps) {\n    super(props);\n    this.renderTooltipContent = this.renderTooltipContent.bind(this);\n    this.getShowDelay = this.getShowDelay.bind(this);\n    this.onTooltipShow = this.onTooltipShow.bind(this);\n    this.onTooltipHide = this.onTooltipHide.bind(this);\n\n    this.wasShown = false;\n    warnDeprecated({\n      component: \"Tooltip\",\n      condition: this.props.theme && ![\"primary\", \"dark\"].includes(this.props.theme),\n      message:\n        \"'theme' prop will be able to get only 'dark' and 'primary' in the upcoming major version. Please consider using these themes.\"\n    });\n    warnDeprecated({\n      component: \"Tooltip\",\n      condition: this.props.position && ![\"top\", \"left\", \"right\", \"bottom\"].includes(this.props.position),\n      message:\n        \"'position' prop will be able to get only 'top', 'bottom', 'left', and 'right' values in the upcoming major version. Please consider using these positions.\"\n    });\n  }\n\n  getContainer() {\n    return document.getElementById(\"tooltips-container\") || document.querySelector(\"body\");\n  }\n\n  renderTooltipContent() {\n    const { theme, content, paddingSize, className, style, withMaxWidth, title, image, icon } = this.props;\n    if (!content) {\n      // don't render empty tooltip\n      return null;\n    }\n    let contentValue;\n    if (isFunction(content)) {\n      contentValue = content();\n    } else if (isValidElement(content)) {\n      contentValue = content;\n    } else if (typeof content === \"string\" && content) {\n      contentValue = content;\n    }\n\n    if (!contentValue) {\n      return null;\n    }\n\n    if (title || image) {\n      return (\n        <div\n          style={style}\n          className={cx(\n            styles.tooltip,\n            styles.tooltipWithContent,\n            getStyle(styles, camelCase(theme)),\n            { [styles.withMaxWidth]: withMaxWidth },\n            className\n          )}\n        >\n          {image && <img className={styles.image} src={image} alt=\"\" />}\n          <div className={cx(styles.content, getStyle(styles, camelCase(\"padding-size-\" + paddingSize)))}>\n            {title && (\n              <Flex gap={Flex.gaps.XS}>\n                {icon && <Icon iconSize=\"20\" icon={icon} clickable={false} />}\n                <div className={styles.title}>{title}</div>\n              </Flex>\n            )}\n            {contentValue}\n          </div>\n        </div>\n      );\n    }\n\n    // TODO: remove in next major, use (title || image) variant instead\n    return (\n      <div\n        style={style}\n        className={cx(\n          styles.tooltip,\n          getStyle(styles, camelCase(theme)),\n          getStyle(styles, camelCase(\"padding-size-\" + paddingSize)),\n          { [styles.withMaxWidth]: withMaxWidth },\n          className\n        )}\n      >\n        {contentValue}\n      </div>\n    );\n  }\n\n  onTooltipShow() {\n    if (!this.wasShown) {\n      const { onTooltipShow } = this.props;\n      globalState.openTooltipsCount++;\n      this.wasShown = true;\n      onTooltipShow && onTooltipShow();\n    }\n  }\n\n  onTooltipHide() {\n    if (this.wasShown) {\n      const { onTooltipHide } = this.props;\n      globalState.lastTooltipHideTS = Date.now();\n      globalState.openTooltipsCount--;\n      this.wasShown = false;\n      onTooltipHide && onTooltipHide();\n    }\n  }\n\n  getTimeSinceLastTooltip() {\n    if (globalState.openTooltipsCount > 0) {\n      return 0;\n    }\n    return globalState.lastTooltipHideTS ? Date.now() - globalState.lastTooltipHideTS : Infinity;\n  }\n\n  getShowDelay() {\n    const { showDelay, immediateShowDelay } = this.props;\n    const timeSinceLastTooltip = this.getTimeSinceLastTooltip();\n    if ((immediateShowDelay === 0 || immediateShowDelay) && timeSinceLastTooltip < IMMEDIATE_SHOW_THRESHOLD_MS) {\n      // showing the tooltip immediately (without animation)\n      return {\n        showDelay: immediateShowDelay,\n        preventAnimation: true\n      };\n    }\n    return {\n      showDelay,\n      preventAnimation: false\n    };\n  }\n\n  render() {\n    const {\n      withoutDialog,\n      justify,\n      children,\n      forceRenderWithoutChildren,\n      getContainer,\n      theme,\n      paddingSize,\n      tip,\n      arrowClassName,\n      id,\n      \"data-testid\": dataTestId\n    } = this.props;\n\n    if (!children && !forceRenderWithoutChildren) {\n      return null;\n    }\n\n    if (withoutDialog) {\n      return this.renderTooltipContent();\n    }\n\n    const content = this.renderTooltipContent;\n    const dialogProps = {\n      ...this.props,\n      \"data-testid\": dataTestId || getTestId(ComponentDefaultTestId.TOOLTIP, id),\n      startingEdge: justify,\n      tooltip: tip,\n      content,\n      getContainer: getContainer || this.getContainer,\n      tooltipClassName: cx(\n        styles.arrow,\n        getStyle(styles, theme),\n        getStyle(styles, camelCase(\"padding-size-\" + paddingSize)),\n        arrowClassName\n      ),\n      animationType: AnimationType.EXPAND,\n      onDialogDidHide: this.onTooltipHide,\n      onDialogDidShow: this.onTooltipShow,\n      getDynamicShowDelay: this.getShowDelay\n    };\n    return <Dialog {...dialogProps}>{children}</Dialog>;\n  }\n}\n"],"names":["globalState","lastTooltipHideTS","openTooltipsCount","Tooltip","_PureComponent","props","_this","_classCallCheck","_callSuper","renderTooltipContent","bind","getShowDelay","onTooltipShow","onTooltipHide","wasShown","warnDeprecated","component","condition","theme","includes","message","position","_inherits","PureComponent","_createClass","key","value","document","getElementById","querySelector","contentValue","_this$props","this","content","paddingSize","className","style","withMaxWidth","title","image","icon","isFunction","isValidElement","React","createElement","cx","styles","tooltip","tooltipWithContent","getStyle","camelCase","_defineProperty","src","alt","Flex","gap","gaps","XS","Icon","iconSize","clickable","Date","now","Infinity","_this$props2","showDelay","immediateShowDelay","timeSinceLastTooltip","getTimeSinceLastTooltip","preventAnimation","_this$props3","justify","children","getContainer","tip","arrowClassName","id","dataTestId","forceRenderWithoutChildren","withoutDialog","dialogProps","Object","assign","getTestId","ComponentDefaultTestId","TOOLTIP","startingEdge","tooltipClassName","arrow","animationType","AnimationType","EXPAND","onDialogDidHide","onDialogDidShow","getDynamicShowDelay","Dialog","positions","DialogPosition","hideShowTriggers","HideShowEvent","themes","TooltipTheme","animationTypes","justifyTypes","JustifyType","arrowPositions","TooltipArrowPosition","defaultProps","arrowPosition","CENTER","moveBy","main","secondary","Dark","TOP","hideDelay","disableDialogSlide","containerSelector","hideWhenReferenceHidden","modifiers","showTrigger","MOUSE_ENTER","hideTrigger","MOUSE_LEAVE","showOnDialogEnter","referenceWrapperClassName","addKeyboardHideShowTriggersByDefault","open"],"mappings":"y4BA4IA,IAGMA,EAAwE,CAC5EC,kBAAmB,KACnBC,kBAAmB,GAGAC,WAAQC,GA8B3B,SAAAD,EAAYE,GAAmB,IAAAC,EAmB1B,OAnB0BC,OAAAJ,IAC7BG,EAAAE,EAAAL,KAAAA,GAAME,KACDI,qBAAuBH,EAAKG,qBAAqBC,KAAIJ,GAC1DA,EAAKK,aAAeL,EAAKK,aAAaD,KAAIJ,GAC1CA,EAAKM,cAAgBN,EAAKM,cAAcF,KAAIJ,GAC5CA,EAAKO,cAAgBP,EAAKO,cAAcH,KAAIJ,GAE5CA,EAAKQ,UAAW,EAChBC,EAAe,CACbC,UAAW,UACXC,UAAWX,EAAKD,MAAMa,QAAU,CAAC,UAAW,QAAQC,SAASb,EAAKD,MAAMa,OACxEE,QACE,kIAEJL,EAAe,CACbC,UAAW,UACXC,UAAWX,EAAKD,MAAMgB,WAAa,CAAC,MAAO,OAAQ,QAAS,UAAUF,SAASb,EAAKD,MAAMgB,UAC1FD,QACE,+JACDd,CACL,CAAC,OAAAgB,EAAAnB,EAlDkCoB,GAkDlCC,EAAArB,EAAA,CAAA,CAAAsB,IAAA,eAAAC,MAED,WACE,OAAOC,SAASC,eAAe,uBAAyBD,SAASE,cAAc,OACjF,GAAC,CAAAJ,IAAA,uBAAAC,MAED,WACE,IAKII,EALJC,EAA4FC,KAAK3B,MAAzFa,EAAKa,EAALb,MAAOe,EAAOF,EAAPE,QAASC,EAAWH,EAAXG,YAAaC,EAASJ,EAATI,UAAWC,EAAKL,EAALK,MAAOC,EAAYN,EAAZM,aAAcC,EAAKP,EAALO,MAAOC,EAAKR,EAALQ,MAAOC,EAAIT,EAAJS,KACnF,OAAKP,GAKDQ,EAAWR,GACbH,EAAeG,KACNS,EAAeT,IAEI,iBAAZA,GAAwBA,KADxCH,EAAeG,GAKZH,EAIDQ,GAASC,EAETI,EACEC,cAAA,MAAA,CAAAR,MAAOA,EACPD,UAAWU,EACTC,EAAOC,QACPD,EAAOE,mBACPC,EAASH,EAAQI,EAAUhC,IAAOiC,EAC/BL,CAAAA,EAAAA,EAAOT,aAAeA,GACzBF,IAGDI,GAASI,EAAAC,cAAA,MAAA,CAAKT,UAAWW,EAAOP,MAAOa,IAAKb,EAAOc,IAAI,KACxDV,EAAAC,cAAA,MAAA,CAAKT,UAAWU,EAAGC,EAAOb,QAASgB,EAASH,EAAQI,EAAU,gBAAkBhB,MAC7EI,GACCK,EAAAC,cAACU,EAAI,CAACC,IAAKD,EAAKE,KAAKC,IAClBjB,GAAQG,EAAAC,cAACc,EAAI,CAACC,SAAS,KAAKnB,KAAMA,EAAMoB,WAAW,IACpDjB,EAAKC,cAAA,MAAA,CAAAT,UAAWW,EAAOR,OAAQA,IAGlCR,IAQPa,EACEC,cAAA,MAAA,CAAAR,MAAOA,EACPD,UAAWU,EACTC,EAAOC,QACPE,EAASH,EAAQI,EAAUhC,IAC3B+B,EAASH,EAAQI,EAAU,gBAAkBhB,IAAaiB,KACvDL,EAAOT,aAAeA,GACzBF,IAGDL,GAzCI,MAZA,IAwDX,GAAC,CAAAL,IAAA,gBAAAC,MAED,WACE,IAAKM,KAAKlB,SAAU,CAClB,IAAQF,EAAkBoB,KAAK3B,MAAvBO,cACRZ,EAAYE,oBACZ8B,KAAKlB,UAAW,EAChBF,GAAiBA,GAClB,CACH,GAAC,CAAAa,IAAA,gBAAAC,MAED,WACE,GAAIM,KAAKlB,SAAU,CACjB,IAAQD,EAAkBmB,KAAK3B,MAAvBQ,cACRb,EAAYC,kBAAoB4D,KAAKC,MACrC9D,EAAYE,oBACZ8B,KAAKlB,UAAW,EAChBD,GAAiBA,GAClB,CACH,GAAC,CAAAY,IAAA,0BAAAC,MAED,WACE,OAAI1B,EAAYE,kBAAoB,EAC3B,EAEFF,EAAYC,kBAAoB4D,KAAKC,MAAQ9D,EAAYC,kBAAoB8D,GACtF,GAAC,CAAAtC,IAAA,eAAAC,MAED,WACE,IAAAsC,EAA0ChC,KAAK3B,MAAvC4D,EAASD,EAATC,UAAWC,EAAkBF,EAAlBE,mBACbC,EAAuBnC,KAAKoC,0BAClC,OAA4B,IAAvBF,GAA4BA,IA3JD,KA2JwBC,EAE/C,CACLF,UAAWC,EACXG,kBAAkB,GAGf,CACLJ,UAAAA,EACAI,kBAAkB,EAEtB,GAAC,CAAA5C,IAAA,SAAAC,MAED,WACE,IAAA4C,EAYItC,KAAK3B,MAVPkE,EAAOD,EAAPC,QACAC,EAAQF,EAARE,SAEAC,EAAYH,EAAZG,aACAvD,EAAKoD,EAALpD,MACAgB,EAAWoC,EAAXpC,YACAwC,EAAGJ,EAAHI,IACAC,EAAcL,EAAdK,eACAC,EAAEN,EAAFM,GACeC,EAAUP,EAAzB,eAGF,IAAKE,IAVuBF,EAA1BQ,2BAWA,OAAO,KAGT,GAjBeR,EAAbS,cAkBA,OAAO/C,KAAKvB,uBAGd,IAAMwB,EAAUD,KAAKvB,qBACfuE,EACDC,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAAlD,KAAK3B,OAAK,CACb,cAAewE,GAAcM,EAAUC,EAAuBC,QAAST,GACvEU,aAAcf,EACdxB,QAAS2B,EACTzC,QAAAA,EACAwC,aAAcA,GAAgBzC,KAAKyC,aACnCc,iBAAkB1C,EAChBC,EAAO0C,MACPvC,EAASH,EAAQ5B,GACjB+B,EAASH,EAAQI,EAAU,gBAAkBhB,IAC7CyC,GAEFc,cAAeC,EAAcC,OAC7BC,gBAAiB5D,KAAKnB,cACtBgF,gBAAiB7D,KAAKpB,cACtBkF,oBAAqB9D,KAAKrB,eAE5B,OAAOgC,gBAACoD,EAAMd,OAAAC,OAAA,GAAKF,GAAcR,EACnC,IAAC,IAzMMrE,EAAS6F,UAAGC,EACZ9F,EAAgB+F,iBAAGC,EACnBhG,EAAMiG,OAAGC,EACTlG,EAAcmG,eAAGZ,EACjBvF,EAAYoG,aAAGC,EACfrG,EAAcsG,eAAGC,EACjBvG,EAAAwG,aAAe,CACpBC,cAAeF,EAAqBG,OACpCC,OAAQ,CAAEC,KAAM,EAAGC,UAAW,GAC9B9F,MAAOmF,EAAaY,KACpB5F,SAAUlB,EAAQ6F,UAAUkB,IAC5B3C,QAASpE,EAAQoG,aAAaM,OAC9BM,UAAW,EACXlD,UAAW,IACXmD,oBAAoB,EACpB3B,cAAeC,EAAcC,OAC7BZ,eAAe,EACfsC,kBAAmB,sBACnB3C,KAAK,EACL4C,yBAAyB,EACzBC,UAAW,GACXC,YAAarH,EAAQ+F,iBAAiBuB,YACtCC,YAAavH,EAAQ+F,iBAAiByB,YACtCC,mBAAmB,EACnBC,0BAA2B,GAC3BC,sCAAsC,EACtCC,MAAM"}
{"version":3,"file":"TextArea.js","sources":["../../../../../src/components/TextArea/TextArea.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../tests/constants\";\nimport styles from \"./TextArea.module.scss\";\nimport { TextAreaProps, TextAreaSize } from \"./TextArea.types\";\nimport Text from \"../Text/Text\";\n\nconst DEFAULT_ROWS: Record<TextAreaSize, number> = {\n  small: 3,\n  large: 4\n};\n\nconst TextArea = forwardRef(\n  (\n    {\n      size = \"small\",\n      rows,\n      label,\n      helpText,\n      success,\n      error,\n      className,\n      \"data-testid\": dataTestId,\n      id,\n      disabled,\n      readOnly,\n      value,\n      onChange,\n      \"aria-label\": ariaLabel,\n      required,\n      resize = true,\n      placeholder\n    }: TextAreaProps,\n    ref: React.ForwardedRef<HTMLTextAreaElement>\n  ) => {\n    const numRows = rows || DEFAULT_ROWS[size];\n    const helpTextId = helpText && `${id}-help-text`;\n\n    return (\n      <div\n        className={cx(\n          styles.textAreaWrapper,\n          {\n            [styles.error]: error,\n            [styles.success]: success,\n            [styles.disabled]: disabled,\n            [styles.readOnly]: readOnly\n          },\n          className\n        )}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TEXT_AREA, id)}\n      >\n        {label && (\n          <label className={cx(styles.label, { [styles.required]: required })} htmlFor={id}>\n            {label}\n          </label>\n        )}\n        <textarea\n          id={id}\n          ref={ref}\n          disabled={disabled}\n          readOnly={readOnly}\n          required={required}\n          rows={numRows}\n          className={cx(styles.textArea, [styles[size]], { [styles.resize]: resize })}\n          value={value}\n          onChange={onChange}\n          aria-invalid={error}\n          aria-label={ariaLabel}\n          aria-describedby={helpTextId ?? undefined}\n          placeholder={placeholder}\n        />\n        {helpText && (\n          <Text className={cx(styles.helpText)} color={Text.colors.INHERIT} id={helpTextId}>\n            {helpText}\n          </Text>\n        )}\n      </div>\n    );\n  }\n);\n\nexport default TextArea;\n"],"names":["DEFAULT_ROWS","small","large","TextArea","forwardRef","_ref","ref","_ref$size","size","label","helpText","success","error","className","dataTestId","id","disabled","readOnly","value","onChange","ariaLabel","required","_ref$resize","resize","placeholder","numRows","rows","helpTextId","concat","React","cx","styles","textAreaWrapper","_defineProperty","getTestId","ComponentDefaultTestId","TEXT_AREA","createElement","htmlFor","textArea","undefined","Text","color","colors","INHERIT"],"mappings":"6UAQA,IAAMA,EAA6C,CACjDC,MAAO,EACPC,MAAO,GAGHC,EAAWC,GACf,SAAAC,EAoBEC,GACE,IAAAC,EAAAF,EAnBAG,KAAAA,OAAO,IAAHD,EAAG,QAAOA,EAEdE,EAAKJ,EAALI,MACAC,EAAQL,EAARK,SACAC,EAAON,EAAPM,QACAC,EAAKP,EAALO,MACAC,EAASR,EAATQ,UACeC,EAAUT,EAAzB,eACAU,EAAEV,EAAFU,GACAC,EAAQX,EAARW,SACAC,EAAQZ,EAARY,SACAC,EAAKb,EAALa,MACAC,EAAQd,EAARc,SACcC,EAASf,EAAvB,cACAgB,EAAQhB,EAARgB,SAAQC,EAAAjB,EACRkB,OAAAA,OAAS,IAAHD,GAAOA,EACbE,EAAWnB,EAAXmB,YAIIC,EAnBApB,EAAJqB,MAmBsB1B,EAAaQ,GAC/BmB,EAAajB,MAAQkB,OAAOb,EAAc,cAEhD,OACEc,uBACEhB,UAAWiB,EACTC,EAAOC,gBAAeC,EAAAA,EAAAA,EAAAA,KAEnBF,EAAOnB,MAAQA,GACfmB,EAAOpB,QAAUA,GACjBoB,EAAOf,SAAWA,GAClBe,EAAOd,SAAWA,GAErBJ,GAEW,cAAAC,GAAcoB,EAAUC,EAAuBC,UAAWrB,IAEtEN,GACCoB,EAAOQ,cAAA,QAAA,CAAAxB,UAAWiB,EAAGC,EAAOtB,MAAKwB,EAAA,CAAA,EAAKF,EAAOV,SAAWA,IAAaiB,QAASvB,GAC3EN,GAGLoB,EAAAQ,cAAA,WAAA,CACEtB,GAAIA,EACJT,IAAKA,EACLU,SAAUA,EACVC,SAAUA,EACVI,SAAUA,EACVK,KAAMD,EACNZ,UAAWiB,EAAGC,EAAOQ,SAAU,CAACR,EAAOvB,IAAMyB,EAAKF,CAAAA,EAAAA,EAAOR,OAASA,IAClEL,MAAOA,EACPC,SAAUA,iBACIP,EAAK,aACPQ,EAAS,mBACHO,QAAAA,OAAca,EAChChB,YAAaA,IAEdd,GACCmB,EAACQ,cAAAI,EAAK,CAAA5B,UAAWiB,EAAGC,EAAOrB,UAAWgC,MAAOD,EAAKE,OAAOC,QAAS7B,GAAIY,GACnEjB,GAKX"}
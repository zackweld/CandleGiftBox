{"version":3,"file":"MenuItemSubMenu.js","sources":["../../../../../../../../src/components/Menu/MenuItem/components/MenuItemSubMenu/MenuItemSubMenu.tsx"],"sourcesContent":["import React, { useLayoutEffect, useMemo, useRef } from \"react\";\nimport DialogContentContainer from \"../../../../DialogContentContainer/DialogContentContainer\";\nimport usePopover from \"../../../../../hooks/usePopover\";\nimport { MenuChild } from \"../../../Menu/MenuConstants\";\nimport { MenuItemSubMenuProps } from \"./MenuItemSubMenu.types\";\nimport { Placement } from \"../../../../../hooks/popoverConstants\";\n\nconst MenuItemSubMenu = ({\n  anchorRef,\n  open,\n  autoFocusOnMount,\n  onClose,\n  children,\n  submenuPosition\n}: MenuItemSubMenuProps) => {\n  const childRef = useRef<HTMLDivElement>(null);\n  const popperElementRef = useRef<HTMLDivElement>(null);\n\n  useLayoutEffect(() => {\n    if (!autoFocusOnMount || !open || !childRef?.current) {\n      return;\n    }\n    requestAnimationFrame(() => {\n      childRef.current.focus();\n    });\n  }, [autoFocusOnMount, open]);\n\n  const submenuPlacement = useMemo(\n    () => (submenuPosition === \"left\" ? Placement.LEFT_START : undefined),\n    [submenuPosition]\n  );\n\n  const { styles: popoverStyles, attributes: popoverAttributes } = usePopover(\n    anchorRef?.current,\n    popperElementRef?.current,\n    {\n      isOpen: open,\n      placement: submenuPlacement\n    }\n  );\n\n  const subMenu: MenuChild = children && React.Children.only(children);\n  if (!subMenu?.type?.isMenu) {\n    console.error(\"MenuItem can accept only Menu element as first level child, this element is not valid: \", subMenu);\n    return null;\n  }\n\n  return (\n    <div\n      style={{ ...popoverStyles.popper, visibility: open ? \"visible\" : \"hidden\" }}\n      {...popoverAttributes.popper}\n      ref={popperElementRef}\n    >\n      {subMenu && open && (\n        <DialogContentContainer>\n          {React.cloneElement(subMenu, {\n            ...subMenu?.props,\n            isVisible: open,\n            isSubMenu: true,\n            onClose,\n            ref: childRef,\n            useDocumentEventListeners: !autoFocusOnMount\n          })}\n        </DialogContentContainer>\n      )}\n    </div>\n  );\n};\n\nexport default MenuItemSubMenu;\n"],"names":["MenuItemSubMenu","_ref","anchorRef","open","autoFocusOnMount","onClose","children","submenuPosition","childRef","useRef","popperElementRef","useLayoutEffect","current","requestAnimationFrame","focus","submenuPlacement","useMemo","Placement","LEFT_START","undefined","_usePopover","usePopover","isOpen","placement","popoverStyles","styles","popoverAttributes","attributes","subMenu","React","Children","only","_a","type","isMenu","createElement","Object","assign","style","popper","visibility","ref","DialogContentContainer","cloneElement","props","isVisible","isSubMenu","useDocumentEventListeners","console","error"],"mappings":"uQAOA,IAAMA,EAAkB,SAAHC,GAOM,MANzBC,EAASD,EAATC,UACAC,EAAIF,EAAJE,KACAC,EAAgBH,EAAhBG,iBACAC,EAAOJ,EAAPI,QACAC,EAAQL,EAARK,SACAC,EAAeN,EAAfM,gBAEMC,EAAWC,EAAuB,MAClCC,EAAmBD,EAAuB,MAEhDE,GAAgB,WACTP,GAAqBD,IAASK,aAAA,EAAAA,EAAUI,UAG7CC,uBAAsB,WACpBL,EAASI,QAAQE,OACnB,GACF,GAAG,CAACV,EAAkBD,IAEtB,IAAMY,EAAmBC,GACvB,WAAA,MAA2B,SAApBT,EAA6BU,EAAUC,gBAAaC,CAAS,GACpE,CAACZ,IAGHa,EAAiEC,EAC/DnB,aAAA,EAAAA,EAAWU,QACXF,aAAA,EAAAA,EAAkBE,QAClB,CACEU,OAAQnB,EACRoB,UAAWR,IALCS,EAAaJ,EAArBK,OAAmCC,EAAiBN,EAA7BO,WASzBC,EAAqBtB,GAAYuB,EAAMC,SAASC,KAAKzB,GAC3D,OAAoB,QAAf0B,EAAAJ,aAAA,EAAAA,EAASK,YAAM,IAAAD,OAAA,EAAAA,EAAAE,QAMlBL,EAAAM,cAAA,MAAAC,OAAAC,OAAA,CACEC,MAAKF,OAAAC,OAAAD,OAAAC,OAAA,GAAOb,EAAce,QAAQ,CAAAC,WAAYrC,EAAO,UAAY,YAC7DuB,EAAkBa,QACtBE,IAAK/B,IAEJkB,GAAWzB,GACV0B,gBAACa,EAAsB,KACpBb,EAAMc,aAAaf,EAAOQ,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EACtBT,aAAA,EAAAA,EAASgB,OAAK,CACjBC,UAAW1C,EACX2C,WAAW,EACXzC,QAAAA,EACAoC,IAAKjC,EACLuC,2BAA4B3C,QAlBpC4C,QAAQC,MAAM,0FAA2FrB,GAClG,KAuBX"}
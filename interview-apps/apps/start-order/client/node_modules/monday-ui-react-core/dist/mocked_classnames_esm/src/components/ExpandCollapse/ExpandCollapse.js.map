{"version":3,"file":"ExpandCollapse.js","sources":["../../../../../src/components/ExpandCollapse/ExpandCollapse.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { FC, forwardRef, ReactElement, useCallback, useRef, useState } from \"react\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport Icon from \"../Icon/Icon\";\nimport Heading from \"../LegacyHeading/LegacyHeading\";\nimport DropdownChevronDown from \"../Icon/Icons/components/DropdownChevronDown\";\nimport { VibeComponentProps, ElementContent } from \"../../types\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport styles from \"./ExpandCollapse.module.scss\";\n\nexport interface ExpandCollapseProps extends VibeComponentProps {\n  /**\n   * Component as parameter to be rendered as header\n   */\n  headerComponentRenderer?: () => ReactElement;\n  /**\n   * Class name to add to the header of the expandable\n   */\n  headerClassName?: string;\n  /**\n   * Class name to add to the content of the expandable\n   */\n  contentClassName?: string;\n  /**\n   * Class name to add to the component\n   */\n  componentClassName?: string;\n  /**\n   * Header title\n   */\n  title?: ElementContent;\n  /**\n   * The value of the expandable section\n   */\n  children?: ElementContent;\n  /**\n   * The expand icon font size\n   */\n  iconSize?: number | string;\n  /**\n   * Should be open or closed by default (when rendered)\n   */\n  defaultOpenState?: boolean;\n  open?: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n  hideBorder?: boolean;\n  captureOnClick?: boolean;\n}\n\nconst ExpandCollapse: FC<ExpandCollapseProps> = forwardRef(\n  (\n    {\n      children,\n      headerComponentRenderer = null,\n      title = \"\",\n      className,\n      defaultOpenState = false,\n      iconSize = 24,\n      id = \"\",\n      open,\n      onClick = null,\n      hideBorder = false,\n      headerClassName,\n      contentClassName,\n      componentClassName,\n      \"data-testid\": dataTestId,\n      captureOnClick = true\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isOpen, setIsOpen] = useState(defaultOpenState);\n    const isExpanded = open === undefined ? isOpen : open;\n\n    const toggleExpand = () => {\n      setIsOpen(!isOpen);\n    };\n    const renderHeader = useCallback(() => {\n      return typeof title === \"string\" ? (\n        <Heading type={Heading.types.h5} value={title} className={cx(styles.headerContent)} />\n      ) : (\n        title\n      );\n    }, [title]);\n\n    return (\n      <div\n        ref={mergedRef}\n        className={className}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.EXPAND_COLLAPSE, id)}\n      >\n        <div\n          className={cx(\n            styles.expandCollapse,\n            {\n              [styles.hideBorder]: hideBorder,\n              [styles.showBorder]: !hideBorder\n            },\n            componentClassName\n          )}\n        >\n          <button\n            type=\"button\"\n            className={cx(styles.header, styles.section, headerClassName, {\n              [styles.headerOpen]: isExpanded,\n              [styles.hideBorderBottom]: hideBorder\n            })}\n            onClickCapture={captureOnClick ? onClick || toggleExpand : undefined}\n            onClick={!captureOnClick ? onClick || toggleExpand : undefined}\n            aria-expanded={isExpanded}\n            aria-controls={`${id}-controls`}\n          >\n            {typeof title !== \"string\" || title.length !== 0\n              ? renderHeader()\n              : headerComponentRenderer && headerComponentRenderer()}\n            <Icon\n              className={cx(styles.iconComponent, {\n                [styles.animateIconOpen]: isExpanded,\n                [styles.animateIconClose]: !isExpanded\n              })}\n              iconType={Icon.type.SVG}\n              icon={DropdownChevronDown}\n              iconSize={iconSize}\n              clickable={false}\n            />\n          </button>\n          {isExpanded && (\n            <div\n              className={cx(styles.content, styles.section, contentClassName, {\n                [styles.animateExpandCollapseContent]: isExpanded\n              })}\n              id={`${id}-controls`}\n              role=\"region\"\n            >\n              {children}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default ExpandCollapse;\n"],"names":["ExpandCollapse","forwardRef","_ref","ref","children","_ref$headerComponentR","headerComponentRenderer","_ref$title","title","className","_ref$defaultOpenState","defaultOpenState","_ref$iconSize","iconSize","_ref$id","id","open","_ref$onClick","onClick","_ref$hideBorder","hideBorder","headerClassName","contentClassName","componentClassName","dataTestId","_ref$captureOnClick","captureOnClick","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isExpanded","undefined","toggleExpand","renderHeader","useCallback","React","createElement","Heading","type","types","h5","value","cx","styles","headerContent","getTestId","ComponentDefaultTestId","EXPAND_COLLAPSE","expandCollapse","_defineProperty","showBorder","header","section","headerOpen","hideBorderBottom","onClickCapture","concat","length","Icon","iconComponent","animateIconOpen","animateIconClose","iconType","SVG","icon","DropdownChevronDown","clickable","content","animateExpandCollapseContent","role"],"mappings":"qgBAiDMA,IAAAA,EAA0CC,GAC9C,SAAAC,EAkBEC,GACE,IAjBAC,EAAQF,EAARE,SAAQC,EAAAH,EACRI,wBAAAA,OAA0B,IAAHD,EAAG,KAAIA,EAAAE,EAAAL,EAC9BM,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EACVE,EAASP,EAATO,UAASC,EAAAR,EACTS,iBAAAA,OAAmB,IAAHD,GAAQA,EAAAE,EAAAV,EACxBW,SAAAA,OAAW,IAAHD,EAAG,GAAEA,EAAAE,EAAAZ,EACba,GAAAA,OAAK,IAAHD,EAAG,GAAEA,EACPE,EAAId,EAAJc,KAAIC,EAAAf,EACJgB,QAAAA,OAAU,IAAHD,EAAG,KAAIA,EAAAE,EAAAjB,EACdkB,WAAAA,OAAa,IAAHD,GAAQA,EAClBE,EAAenB,EAAfmB,gBACAC,EAAgBpB,EAAhBoB,iBACAC,EAAkBrB,EAAlBqB,mBACeC,EAAUtB,EAAzB,eAAauB,EAAAvB,EACbwB,eAAAA,OAAiB,IAAHD,GAAOA,EAIjBE,EAAeC,EAAO,MACtBC,EAAYC,EAAY3B,EAAKwB,GAEnCI,EAA4BC,EAASrB,GAAiBsB,EAAAC,EAAAH,EAAA,GAA/CI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GAClBI,OAAsBC,IAATtB,EAAqBmB,EAASnB,EAE3CuB,EAAe,WACnBH,GAAWD,IAEPK,EAAeC,GAAY,WAC/B,MAAwB,iBAAVjC,EACZkC,EAACC,cAAAC,GAAQC,KAAMD,EAAQE,MAAMC,GAAIC,MAAOxC,EAAOC,UAAWwC,EAAGC,EAAOC,iBAEpE3C,CAEJ,GAAG,CAACA,IAEJ,OACEkC,uBACEvC,IAAK0B,EACLpB,UAAWA,EACXM,GAAIA,EAAE,cACOS,GAAc4B,EAAUC,EAAuBC,gBAAiBvC,IAE7E2B,EAAAC,cAAA,MAAA,CACElC,UAAWwC,EACTC,EAAOK,eAAcC,EAAAA,EAElBN,GAAAA,EAAO9B,WAAaA,GACpB8B,EAAOO,YAAcrC,GAExBG,IAGFmB,EAAAC,cAAA,SAAA,CACEE,KAAK,SACLpC,UAAWwC,EAAGC,EAAOQ,OAAQR,EAAOS,QAAStC,EAAemC,EAAAA,EACzDN,CAAAA,EAAAA,EAAOU,WAAavB,GACpBa,EAAOW,iBAAmBzC,IAE7B0C,eAAgBpC,EAAiBR,GAAWqB,OAAeD,EAC3DpB,QAAUQ,OAA2CY,EAA1BpB,GAAWqB,EACvB,gBAAAF,EACA,gBAAA,GAAA0B,OAAGhD,EAAE,cAEF,iBAAVP,GAAuC,IAAjBA,EAAMwD,OAChCxB,IACAlC,GAA2BA,IAC/BoC,EAACC,cAAAsB,GACCxD,UAAWwC,EAAGC,EAAOgB,cAAaV,EAAAA,EAC/BN,CAAAA,EAAAA,EAAOiB,gBAAkB9B,GACzBa,EAAOkB,kBAAoB/B,IAE9BgC,SAAUJ,EAAKpB,KAAKyB,IACpBC,KAAMC,EACN3D,SAAUA,EACV4D,WAAW,KAGdpC,GACCK,EAAAC,cAAA,MAAA,CACElC,UAAWwC,EAAGC,EAAOwB,QAASxB,EAAOS,QAASrC,EAAgBkC,EAC3DN,CAAAA,EAAAA,EAAOyB,6BAA+BtC,IAEzCtB,GAAEgD,GAAAA,OAAKhD,EAAa,aACpB6D,KAAK,UAEJxE,IAMb"}
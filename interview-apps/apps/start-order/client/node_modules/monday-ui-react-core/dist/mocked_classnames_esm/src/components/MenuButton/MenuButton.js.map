{"version":3,"file":"MenuButton.js","sources":["../../../../../src/components/MenuButton/MenuButton.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useLayoutEffect, useMemo, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport { camelCase } from \"lodash-es\";\nimport { isForwardRef } from \"react-is\";\nimport Dialog, { DialogEvent } from \"../Dialog/Dialog\";\nimport DialogContentContainer from \"../DialogContentContainer/DialogContentContainer\";\nimport Tooltip, { TooltipProps } from \"../Tooltip/Tooltip\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { BUTTON_ICON_SIZE } from \"../Button/ButtonConstants\";\nimport { ElementContent, VibeComponent, VibeComponentProps, withStaticProps } from \"../../types\";\nimport { MenuButtonComponentPosition, MenuButtonSize } from \"./MenuButtonConstants\";\nimport { AnimationType, DialogOffset, DialogPosition } from \"../../constants\";\nimport { HideShowEvent } from \"../Dialog/consts/dialog-show-hide-event\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { DialogSize } from \"../DialogContentContainer/DialogContentContainerConstants\";\nimport { Menu } from \"../Icon/Icons\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { MenuChild } from \"../Menu/Menu/MenuConstants\";\nimport styles from \"./MenuButton.module.scss\";\n\nconst TOOLTIP_SHOW_TRIGGER = [Tooltip.hideShowTriggers.MOUSE_ENTER];\nconst DIALOG_SHOW_TRIGGER = [HideShowEvent.CLICK, HideShowEvent.ENTER];\nconst EMPTY_ARRAY: HideShowEvent[] = [];\nconst MOVE_BY = { main: 8, secondary: 0 };\n\nexport interface MenuButtonProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  componentClassName?: string;\n  /**\n   * Control the button's selected state\n   */\n  active?: boolean;\n  /**\n   *Class name to add to the button when the dialog is open\n   */\n  openDialogComponentClassName?: string;\n  /**\n   * Receives React Component\n   */\n  component?: (() => JSX.Element) | React.ElementType;\n  size?: MenuButtonSize;\n  open?: boolean;\n  onClick?: (event: React.MouseEvent) => void;\n  zIndex?: number;\n  ariaLabel?: string;\n  // TODO: remove in next major version\n  /**\n   * @deprecated use closeMenuOnItemClick instead\n   */\n  closeDialogOnContentClick?: boolean;\n  /*\n    Class name to provide the element which wraps the popover/modal/dialog\n   */\n  dialogClassName?: string;\n  /**\n   * main - `dialogOffset.main` - main axis offset; `dialogOffset.secondary` secondary axis offset\n   */\n  dialogOffset?: DialogOffset;\n  dialogPaddingSize?: DialogSize;\n  dialogPosition?: DialogPosition;\n  dialogShowTriggerIgnoreClass?: string;\n  dialogHideTriggerIgnoreClass?: string;\n  /**\n   * the container selector in which to append the dialog\n   * for examples: \"body\" , \".my-class\", \"#my-id\"\n   */\n  dialogContainerSelector?: string;\n  /**\n   * Dialog Alignment\n   */\n  startingEdge?: string;\n  /*\n    Callback function to be called when the menu is shown\n   */\n  onMenuShow?: () => void;\n  /*\n  Callback function to be called when the menu is hidden\n */\n  onMenuHide?: () => void;\n  /**\n   * Text to be displayed after the icon\n   */\n  text?: string;\n  disabled?: boolean;\n  tooltipContent?: string;\n  /**\n   Remove \"Tab\" key from the hide trigger\n   */\n  removeTabCloseTrigger?: boolean;\n  /**\n   is an array with the content of types:\n   CLICK, CLICK_OUTSIDE, ESCAPE_KEY, TAB_KEY, MOUSE_ENTER, MOUSE_LEAVE,\n   ENTER, MOUSE_DOWN, FOCUS, BLUR, CONTENT_CLICK\n   */\n  tooltipTriggers?: HideShowEvent | HideShowEvent[];\n  /**\n   * the disabled/tooltip position of the menu button - one of the MenuButton.dialogPositions\n   */\n  tooltipPosition?: DialogPosition;\n  /**\n   * Tooltip Element Wrapper ClassName\n   */\n  tooltipReferenceClassName?: string;\n  tooltipProps?: Partial<TooltipProps>;\n  /**\n   * When the MenuButton is hidden hide the dialog and tooltip as well\n   */\n  hideWhenReferenceHidden?: boolean;\n  /**\n   * @deprecated - use tooltipContent instead\n   */\n  disabledReason?: string;\n  children?: ElementContent;\n  /**\n   * Specifies whether to render the component before or after the text\n   */\n  componentPosition?: (typeof MenuButtonComponentPosition)[keyof typeof MenuButtonComponentPosition];\n  /**\n   * Element to be used as the trigger element for the Menu - default is button\n   */\n  triggerElement?: React.ElementType;\n  /**\n   * Close the menu when an item is clicked\n   */\n  closeMenuOnItemClick?: boolean;\n  /**\n   * Whether tooltip should appear only when the trigger element is hovered and not the menu dialog\n   */\n  showTooltipOnlyOnTriggerElement?: boolean;\n}\n\nconst MenuButton: VibeComponent<MenuButtonProps> & {\n  sizes?: typeof MenuButtonSize;\n  paddingSizes?: typeof DialogContentContainer.sizes;\n  dialogPositions?: typeof DialogPosition;\n  hideTriggers?: typeof Dialog.hideShowTriggers;\n  componentPositions?: typeof MenuButtonComponentPosition;\n} = forwardRef(\n  (\n    {\n      id,\n      className,\n      // Backward compatibility for props naming\n      componentClassName,\n      openDialogComponentClassName,\n      children,\n      component = Menu,\n      componentPosition = MenuButton.componentPositions.START,\n      size = MenuButtonSize.SMALL,\n      open = false,\n      onClick = NOOP,\n      zIndex = null,\n      ariaLabel = \"Menu\",\n      closeDialogOnContentClick = false,\n      closeMenuOnItemClick,\n      dialogOffset = MOVE_BY,\n      dialogPosition = Dialog.positions.BOTTOM_START,\n      dialogClassName,\n      dialogPaddingSize = DialogContentContainer.sizes.MEDIUM,\n      dialogShowTriggerIgnoreClass,\n      dialogHideTriggerIgnoreClass,\n      onMenuHide = NOOP,\n      onMenuShow = NOOP,\n      disabled = false,\n      text,\n      tooltipContent,\n      tooltipProps,\n      // Backward compatibility for props naming\n      disabledReason,\n      tooltipTriggers = [MenuButton.hideTriggers.MOUSE_LEAVE],\n      tooltipPosition = MenuButton.dialogPositions.RIGHT,\n      startingEdge = \"bottom\",\n      removeTabCloseTrigger = false,\n      tooltipReferenceClassName,\n      hideWhenReferenceHidden = false,\n      dialogContainerSelector,\n      active,\n      triggerElement: TriggerElement = \"button\",\n      showTooltipOnlyOnTriggerElement,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isOpen, setIsOpen] = useState(open);\n    const isActive = active ?? isOpen;\n\n    const handleMenuClose = useCallback(\n      (focusOnMenuButtonAfterClose: boolean) => {\n        onMenuHide();\n        setIsOpen(false);\n        const button = componentRef.current;\n        if (!button || !focusOnMenuButtonAfterClose) {\n          return;\n        }\n        window.requestAnimationFrame(() => {\n          button.focus();\n        });\n      },\n      [onMenuHide]\n    );\n\n    const onMenuDidClose = useCallback(\n      (event: React.KeyboardEvent) => {\n        // TODO: check the functionality of the isEscapeKey since the event is not an actual KeyboardEVent but an object with propagate property only\n        const isEscapeKey = event?.key === \"Escape\";\n        if (isEscapeKey || closeMenuOnItemClick) {\n          // @ts-ignore\n          if (event.propagate) {\n            handleMenuClose(isEscapeKey);\n          }\n        }\n      },\n      [closeMenuOnItemClick, handleMenuClose]\n    );\n\n    const onDialogDidHide = useCallback(\n      (event: DialogEvent, hideEvent: string) => {\n        handleMenuClose(hideEvent === Dialog.hideShowTriggers.ESCAPE_KEY);\n      },\n      [handleMenuClose]\n    );\n\n    const onDialogDidShow = useCallback(() => {\n      setIsOpen(true);\n      onMenuShow();\n    }, [setIsOpen, onMenuShow]);\n\n    const [clonedChildren, hideTrigger] = useMemo(() => {\n      const triggers = new Set([\n        Dialog.hideShowTriggers.CLICK_OUTSIDE,\n        Dialog.hideShowTriggers.TAB_KEY,\n        Dialog.hideShowTriggers.ESCAPE_KEY\n      ]);\n\n      if (closeDialogOnContentClick) {\n        triggers.add(Dialog.hideShowTriggers.CONTENT_CLICK);\n        triggers.add(Dialog.hideShowTriggers.ENTER);\n      }\n\n      if (removeTabCloseTrigger) {\n        triggers.delete(Dialog.hideShowTriggers.TAB_KEY);\n      }\n      const childrenArr = React.Children.toArray(children) as MenuChild[];\n      const cloned = childrenArr.map(child => {\n        if (!React.isValidElement(child)) return null;\n\n        const newProps: { focusOnMount?: boolean; onClose?: (event: React.KeyboardEvent) => void } = {};\n        if (child.type && child.type.supportFocusOnMount) {\n          newProps.focusOnMount = true;\n          triggers.delete(Dialog.hideShowTriggers.ESCAPE_KEY);\n        }\n\n        if (child.type && child.type.isMenu) {\n          newProps.onClose = onMenuDidClose;\n        }\n\n        return React.cloneElement(child, newProps);\n      });\n      return [cloned, Array.from(triggers)];\n    }, [children, onMenuDidClose, closeDialogOnContentClick, removeTabCloseTrigger]);\n\n    const content = useMemo(() => {\n      if (clonedChildren.length === 0) return null;\n      return (\n        <DialogContentContainer size={dialogPaddingSize} type={DialogContentContainer.types.POPOVER}>\n          {clonedChildren}\n        </DialogContentContainer>\n      );\n    }, [clonedChildren, dialogPaddingSize]);\n\n    const computedDialogOffset = useMemo(\n      () => ({\n        ...MOVE_BY,\n        ...dialogOffset\n      }),\n      [dialogOffset]\n    );\n\n    const onMouseUp = (event: React.MouseEvent<HTMLElement>) => {\n      if (disabled) {\n        event.currentTarget.blur();\n        return;\n      }\n      onClick(event);\n    };\n\n    const Icon = component;\n    const iconSize = useMemo(() => {\n      switch (size) {\n        case MenuButtonSize.XXS:\n        case MenuButtonSize.XS:\n          return 16;\n        case MenuButtonSize.SMALL:\n        case MenuButtonSize.MEDIUM:\n        case MenuButtonSize.LARGE:\n          return BUTTON_ICON_SIZE;\n        default:\n          return 24;\n      }\n    }, [size]);\n    const icon = Icon ? <Icon size={iconSize.toString()} role=\"img\" aria-hidden=\"true\" /> : null;\n\n    useLayoutEffect(() => {\n      setIsOpen(open);\n    }, [open, setIsOpen]);\n\n    const overrideTooltipContent = backwardCompatibilityForProperties([tooltipContent, disabledReason]);\n    const overrideClassName = backwardCompatibilityForProperties([className, componentClassName]);\n\n    // Trigger element props, which are only relevant for \"button\" element, but might be needed for other elements e.g. Button\n    const triggerElementProps =\n      TriggerElement === \"button\"\n        ? {\n            ref: mergedRef\n          }\n        : {\n            active: isActive,\n            disabled: disabled,\n            ref: isForwardRef(TriggerElement) ? mergedRef : undefined\n          };\n\n    const triggerElementNode = (\n      <TriggerElement\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.MENU_BUTTON, id)}\n        type=\"button\"\n        className={cx(styles.wrapper, overrideClassName, getStyle(styles, camelCase(`size-${size}`)), {\n          [styles.active]: isActive,\n          [getStyle(styles, openDialogComponentClassName)]: isOpen && openDialogComponentClassName,\n          [styles.disabled]: disabled,\n          [styles.text]: text\n        })}\n        aria-haspopup=\"true\"\n        aria-expanded={isOpen}\n        aria-label={!text && ariaLabel}\n        onMouseUp={onMouseUp}\n        aria-disabled={disabled}\n        {...triggerElementProps}\n      >\n        {componentPosition === MenuButton.componentPositions.START && icon}\n        {text && <span className={styles.innerText}>{text}</span>}\n        {componentPosition === MenuButton.componentPositions.END && icon}\n      </TriggerElement>\n    );\n\n    const dialogNode = (dialogChildren: React.ReactElement) => (\n      <Dialog\n        wrapperClassName={dialogClassName}\n        position={dialogPosition}\n        containerSelector={dialogContainerSelector}\n        startingEdge={startingEdge}\n        animationType={AnimationType.EXPAND}\n        content={content}\n        moveBy={computedDialogOffset}\n        showTrigger={disabled ? EMPTY_ARRAY : DIALOG_SHOW_TRIGGER}\n        hideTrigger={hideTrigger}\n        showTriggerIgnoreClass={dialogShowTriggerIgnoreClass}\n        hideTriggerIgnoreClass={dialogHideTriggerIgnoreClass}\n        useDerivedStateFromProps={true}\n        onDialogDidShow={onDialogDidShow}\n        onDialogDidHide={onDialogDidHide}\n        zIndex={zIndex}\n        isOpen={isOpen}\n        hideWhenReferenceHidden={hideWhenReferenceHidden}\n      >\n        {dialogChildren}\n      </Dialog>\n    );\n\n    const tooltipNode = (tooltipChildren: React.ReactElement) => (\n      <Tooltip\n        content={overrideTooltipContent}\n        position={tooltipPosition}\n        showTrigger={TOOLTIP_SHOW_TRIGGER}\n        hideTrigger={tooltipTriggers}\n        referenceWrapperClassName={tooltipReferenceClassName}\n        hideWhenReferenceHidden={hideWhenReferenceHidden}\n        {...tooltipProps}\n      >\n        {tooltipChildren}\n      </Tooltip>\n    );\n\n    if (showTooltipOnlyOnTriggerElement) {\n      return dialogNode(tooltipNode(triggerElementNode));\n    }\n    return tooltipNode(dialogNode(triggerElementNode));\n  }\n);\n\nexport default withStaticProps(MenuButton, {\n  sizes: MenuButtonSize,\n  paddingSizes: DialogContentContainer.sizes,\n  dialogPositions: Dialog.positions,\n  hideTriggers: Dialog.hideShowTriggers,\n  componentPositions: MenuButtonComponentPosition\n});\n"],"names":["TOOLTIP_SHOW_TRIGGER","Tooltip","hideShowTriggers","MOUSE_ENTER","DIALOG_SHOW_TRIGGER","HideShowEvent","CLICK","ENTER","EMPTY_ARRAY","MOVE_BY","main","secondary","MenuButton","forwardRef","_ref","ref","id","className","componentClassName","openDialogComponentClassName","children","_ref$component","component","Menu","_ref$componentPositio","componentPosition","componentPositions","START","_ref$size","size","MenuButtonSize","SMALL","_ref$open","open","_ref$onClick","onClick","NOOP","_ref$zIndex","zIndex","_ref$ariaLabel","ariaLabel","_ref$closeDialogOnCon","closeDialogOnContentClick","closeMenuOnItemClick","_ref$dialogOffset","dialogOffset","_ref$dialogPosition","dialogPosition","Dialog","positions","BOTTOM_START","dialogClassName","_ref$dialogPaddingSiz","dialogPaddingSize","DialogContentContainer","sizes","MEDIUM","dialogShowTriggerIgnoreClass","dialogHideTriggerIgnoreClass","_ref$onMenuHide","onMenuHide","_ref$onMenuShow","onMenuShow","_ref$disabled","disabled","text","tooltipContent","tooltipProps","disabledReason","_ref$tooltipTriggers","tooltipTriggers","hideTriggers","MOUSE_LEAVE","_ref$tooltipPosition","tooltipPosition","dialogPositions","RIGHT","_ref$startingEdge","startingEdge","_ref$removeTabCloseTr","removeTabCloseTrigger","tooltipReferenceClassName","_ref$hideWhenReferenc","hideWhenReferenceHidden","dialogContainerSelector","active","_ref$triggerElement","triggerElement","TriggerElement","showTooltipOnlyOnTriggerElement","dataTestId","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","isActive","handleMenuClose","useCallback","focusOnMenuButtonAfterClose","button","current","window","requestAnimationFrame","focus","onMenuDidClose","event","isEscapeKey","key","propagate","onDialogDidHide","hideEvent","ESCAPE_KEY","onDialogDidShow","_useMemo","useMemo","triggers","Set","CLICK_OUTSIDE","TAB_KEY","add","CONTENT_CLICK","delete","React","Children","toArray","map","child","isValidElement","newProps","type","supportFocusOnMount","focusOnMount","isMenu","onClose","cloneElement","Array","from","_useMemo2","clonedChildren","hideTrigger","content","length","createElement","types","POPOVER","computedDialogOffset","Object","assign","Icon","iconSize","XXS","XS","LARGE","BUTTON_ICON_SIZE","icon","role","useLayoutEffect","overrideTooltipContent","backwardCompatibilityForProperties","overrideClassName","triggerElementProps","isForwardRef","undefined","triggerElementNode","getTestId","ComponentDefaultTestId","MENU_BUTTON","cx","styles","wrapper","getStyle","camelCase","concat","_defineProperty","onMouseUp","currentTarget","blur","innerText","END","dialogNode","dialogChildren","wrapperClassName","position","containerSelector","animationType","AnimationType","EXPAND","moveBy","showTrigger","showTriggerIgnoreClass","hideTriggerIgnoreClass","useDerivedStateFromProps","tooltipNode","tooltipChildren","referenceWrapperClassName","withStaticProps","paddingSizes","MenuButtonComponentPosition"],"mappings":"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"}
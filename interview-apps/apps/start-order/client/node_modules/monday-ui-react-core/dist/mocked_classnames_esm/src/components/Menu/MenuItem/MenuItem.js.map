{"version":3,"file":"MenuItem.js","sources":["../../../../../../src/components/Menu/MenuItem/MenuItem.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport React, { AriaAttributes, ForwardedRef, ReactElement, forwardRef, useMemo, useRef } from \"react\";\nimport { DialogPosition } from \"../../../constants\";\nimport Tooltip, { TooltipProps } from \"../../../components/Tooltip/Tooltip\";\nimport Icon from \"../../../components/Icon/Icon\";\nimport useIsOverflowing from \"../../../hooks/useIsOverflowing/useIsOverflowing\";\nimport { SubIcon, VibeComponent, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { IconType } from \"../../Icon/IconConstants\";\nimport { TooltipPosition } from \"./MenuItemConstants\";\nimport { CloseMenuOption, MenuChild } from \"../Menu/MenuConstants\";\nimport Label from \"../../Label/Label\";\nimport styles from \"./MenuItem.module.scss\";\nimport BaseMenuItem from \"./components/BaseMenuItem/BaseMenuItem\";\nimport MenuItemIcon from \"./components/MenuItemIcon/MenuItemIcon\";\nimport { backwardCompatibilityForProperties } from \"../../../helpers/backwardCompatibilityForProperties\";\nimport { SubmenuPosition } from \"./MenuItem.Types\";\n\nexport interface MenuItemProps extends VibeComponentProps {\n  title?: string;\n  label?: string | React.ReactElement<typeof Label>;\n  icon?: SubIcon;\n  iconType?: IconType;\n  iconBackgroundColor?: string;\n  disabled?: boolean;\n  disableReason?: string;\n  selected?: boolean;\n  onClick?: (event: React.MouseEvent | React.KeyboardEvent) => void;\n  activeItemIndex?: number;\n  setActiveItemIndex?: (index: number) => void;\n  index?: number;\n  key?: string;\n  isParentMenuVisible?: boolean;\n  resetOpenSubMenuIndex?: () => void;\n  hasOpenSubMenu?: boolean;\n  setSubMenuIsOpenByIndex?: (index: number, isOpen: boolean) => void;\n  useDocumentEventListeners?: boolean;\n  tooltipContent?: string;\n  tooltipPosition?: TooltipPosition;\n  tooltipShowDelay?: number;\n  tooltipProps?: Partial<TooltipProps>;\n  onMouseLeave?: (event: React.MouseEvent) => void;\n  onMouseEnter?: (event: React.MouseEvent) => void;\n  /**\n   * @deprecated - use className instead\n   */\n  classname?: string;\n  /**\n   * Class name which is added to div which wraps an Icon\n   */\n  iconWrapperClassName?: string;\n  isInitialSelectedState?: boolean;\n  shouldScrollMenu?: boolean;\n  closeMenu?: (option: CloseMenuOption) => void;\n  menuRef?: React.RefObject<HTMLElement>;\n  // TODO MenuItem can accept only Menu element as first level child, it accepts MenuChild[] as children even though it is not valid.\n  //  Should be fixed in next major version\n  children?: MenuChild | MenuChild[];\n  /**\n   * Type of menu item with sub menu, which has two click/hover options-\n   *    1. click on the main menu item will trigger onClick\n   *    2. click/hover on icon button will open the sub menu\n   */\n  splitMenuItem?: boolean;\n  \"aria-label\"?: AriaAttributes[\"aria-label\"];\n  submenuPosition?: SubmenuPosition;\n}\n\nexport interface MenuItemTitleComponentProps extends Omit<MenuItemProps, \"title\"> {\n  title: ReactElement;\n  \"aria-label\": NonNullable<AriaAttributes[\"aria-label\"]>;\n}\n\nconst MenuItem: VibeComponent<MenuItemProps | MenuItemTitleComponentProps> & {\n  iconType?: typeof Icon.type;\n  tooltipPositions?: typeof DialogPosition;\n  isSelectable?: boolean;\n  isMenuChild?: boolean;\n} = forwardRef(\n  (\n    {\n      className,\n      // Backward compatibility for props naming\n      classname,\n      iconWrapperClassName,\n      title = \"\",\n      label = \"\",\n      icon = \"\",\n      iconType,\n      iconBackgroundColor,\n      disabled = false,\n      disableReason,\n      selected = false,\n      key,\n      children,\n      tooltipContent,\n      tooltipPosition = MenuItem.tooltipPositions.RIGHT,\n      tooltipShowDelay = 300,\n      tooltipProps,\n      \"aria-label\": ariaLabel,\n      ...baseMenuProps\n    },\n    ref: ForwardedRef<HTMLElement>\n  ) => {\n    const overrideClassName = backwardCompatibilityForProperties([className, classname]);\n    const titleRef = useRef();\n\n    // if \"title\" is a component ariaLabel is mandatory\n    const iconLabel = ariaLabel ?? (title as string);\n\n    const isTitleHoveredAndOverflowing = useIsOverflowing({ ref: titleRef });\n    const shouldShowTooltip = isTitleHoveredAndOverflowing || disabled || tooltipContent;\n\n    const finalTooltipContent = useMemo(() => {\n      if (disabled) return disableReason;\n      if (tooltipContent) return tooltipContent;\n      return title;\n    }, [disableReason, disabled, title, tooltipContent]);\n\n    const renderLabel = useMemo(() => {\n      if (!label) return;\n      if (typeof label === \"string\") {\n        return <Label kind={Label.kinds.LINE} text={label} />;\n      }\n      if (React.isValidElement(label) && label.type === Label) {\n        return label;\n      }\n    }, [label]);\n\n    return (\n      <BaseMenuItem\n        key={key}\n        ref={ref}\n        subMenu={children}\n        className={overrideClassName}\n        disabled={disabled}\n        selected={selected}\n        {...baseMenuProps}\n      >\n        <>\n          {Boolean(icon) && (\n            <MenuItemIcon\n              icon={icon}\n              type={iconType}\n              label={iconLabel}\n              disabled={disabled}\n              selected={selected}\n              backgroundColor={iconBackgroundColor}\n              wrapperClassName={iconWrapperClassName}\n            />\n          )}\n          <Tooltip\n            content={shouldShowTooltip ? finalTooltipContent : null}\n            position={tooltipPosition}\n            showDelay={tooltipShowDelay}\n            {...tooltipProps}\n          >\n            <div ref={titleRef} className={styles.title}>\n              {title}\n            </div>\n            {/* Tooltip should be on a whole MenuItem, but it's a breaking change (tooltip adds span) - should be fixed in the next major and then this div be removed */}\n            <div className={styles.hiddenTitle} aria-hidden tabIndex={-1}>\n              {title}\n            </div>\n          </Tooltip>\n          {renderLabel}\n        </>\n      </BaseMenuItem>\n    );\n  }\n);\n\nObject.assign(MenuItem, {\n  isSelectable: true,\n  isMenuChild: true\n});\n\nexport default withStaticProps(MenuItem, {\n  iconType: Icon.type,\n  tooltipPositions: DialogPosition\n});\n"],"names":["MenuItem","forwardRef","_a","ref","className","classname","iconWrapperClassName","_a$title","title","_a$label","label","_a$icon","icon","iconType","iconBackgroundColor","_a$disabled","disabled","disableReason","_a$selected","selected","key","children","tooltipContent","_a$tooltipPosition","tooltipPosition","tooltipPositions","RIGHT","_a$tooltipShowDelay","tooltipShowDelay","tooltipProps","ariaLabel","baseMenuProps","__rest","overrideClassName","backwardCompatibilityForProperties","titleRef","useRef","iconLabel","shouldShowTooltip","useIsOverflowing","finalTooltipContent","useMemo","renderLabel","React","createElement","Label","kind","kinds","LINE","text","isValidElement","type","BaseMenuItem","Object","assign","subMenu","Fragment","MenuItemIcon","backgroundColor","wrapperClassName","Tooltip","content","position","showDelay","styles","hiddenTitle","tabIndex","isSelectable","isMenuChild","withStaticProps","Icon","DialogPosition"],"mappings":"6vBAwEA,IAAMA,EAKFC,GACF,SACEC,EAsBAC,GAtBA,IACEC,EAkBuBF,EAlBvBE,UAEAC,EAgBuBH,EAhBvBG,UACAC,EAeuBJ,EAfvBI,qBAAoBC,EAeGL,EAdvBM,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EAAAE,EAcaP,EAbvBQ,MAAAA,OAAQ,IAAHD,EAAG,GAAEA,EAAAE,EAaaT,EAZvBU,KAAAA,OAAO,IAAHD,EAAG,GAAEA,EACTE,EAWuBX,EAXvBW,SACAC,EAUuBZ,EAVvBY,oBAAmBC,EAUIb,EATvBc,SAAAA,OAAW,IAAHD,GAAQA,EAChBE,EAQuBf,EARvBe,cAAaC,EAQUhB,EAPvBiB,SAAAA,OAAW,IAAHD,GAAQA,EAChBE,EAMuBlB,EANvBkB,IACAC,EAKuBnB,EALvBmB,SACAC,EAIuBpB,EAJvBoB,eAAcC,EAISrB,EAHvBsB,gBAAAA,OAAkBxB,IAAHuB,EAAGvB,EAASyB,iBAAiBC,MAAKH,EAAAI,EAG1BzB,EAFvB0B,iBAAAA,OAAmB,IAAHD,EAAG,IAAGA,EACtBE,EACuB3B,EADvB2B,aACcC,EAAS5B,EAAvB,cACG6B,EApBLC,EAAA9B,EAAA,CAAA,YAAA,YAAA,uBAAA,QAAA,QAAA,OAAA,WAAA,sBAAA,WAAA,gBAAA,WAAA,MAAA,WAAA,iBAAA,kBAAA,mBAAA,eAAA,eAwBM+B,EAAoBC,EAAmC,CAAC9B,EAAWC,IACnE8B,EAAWC,IAGXC,EAAYP,QAAAA,EAActB,EAG1B8B,EAD+BC,EAAiB,CAAEpC,IAAKgC,KACHnB,GAAYM,EAEhEkB,EAAsBC,GAAQ,WAClC,OAAIzB,EAAiBC,EACjBK,GACGd,CACR,GAAE,CAACS,EAAeD,EAAUR,EAAOc,IAE9BoB,EAAcD,GAAQ,WAC1B,GAAK/B,EACL,MAAqB,iBAAVA,EACFiC,EAACC,cAAAC,EAAM,CAAAC,KAAMD,EAAME,MAAMC,KAAMC,KAAMvC,IAE1CiC,EAAMO,eAAexC,IAAUA,EAAMyC,OAASN,EACzCnC,OADT,CAGF,GAAG,CAACA,IAEJ,OACEiC,EAAAC,cAACQ,EAAYC,OAAAC,OAAA,CACXlC,IAAKA,EACLjB,IAAKA,EACLoD,QAASlC,EACTjB,UAAW6B,EACXjB,SAAUA,EACVG,SAAUA,GACNY,GAEJY,EAAAC,cAAAD,EAAAa,SAAA,OACW5C,GACP+B,gBAACc,EAAY,CACX7C,KAAMA,EACNuC,KAAMtC,EACNH,MAAO2B,EACPrB,SAAUA,EACVG,SAAUA,EACVuC,gBAAiB5C,EACjB6C,iBAAkBrD,IAGtBqC,EAACC,cAAAgB,iBACCC,QAASvB,EAAoBE,EAAsB,KACnDsB,SAAUtC,EACVuC,UAAWnC,GACPC,GAEJc,EAAKC,cAAA,MAAA,CAAAzC,IAAKgC,EAAU/B,UAAW4D,EAAOxD,OACnCA,GAGHmC,EAAAC,cAAA,MAAA,CAAKxC,UAAW4D,EAAOC,YAAW,eAAA,EAAcC,UAAW,GACxD1D,IAGJkC,GAIT,IAGFW,OAAOC,OAAOtD,EAAU,CACtBmE,cAAc,EACdC,aAAa,IAGf,IAAeC,EAAAA,EAAgBrE,EAAU,CACvCa,SAAUyD,EAAKnB,KACf1B,iBAAkB8C"}
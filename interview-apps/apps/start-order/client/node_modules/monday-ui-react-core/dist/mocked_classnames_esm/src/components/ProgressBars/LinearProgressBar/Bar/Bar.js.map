{"version":3,"file":"Bar.js","sources":["../../../../../../../src/components/ProgressBars/LinearProgressBar/Bar/Bar.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC, useMemo } from \"react\";\nimport { calculatePercentage } from \"../LinearProgressBarHelpers\";\nimport VibeComponentProps from \"src/types/VibeComponentProps\";\nimport { ProgressBarStyle, ProgressBarType } from \"../LinearProgressBarConstants\";\nimport styles from \"./Bar.module.scss\";\n\nexport interface BarProps extends VibeComponentProps {\n  /**\n   * Determine the progress bar style (Supported options exposed through `LinearProgressBar.styles`).\n   */\n  barStyle?: ProgressBarStyle;\n  /**\n   * The progress bar starting value.\n   */\n  min?: number;\n  /**\n   * The progress bar ending value.\n   */\n  max?: number;\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * If set to *true*, animations are used.\n   */\n  animated?: boolean;\n  baseClass?: string;\n  barLabelName?: string;\n  color?: string;\n  type?: ProgressBarType;\n  className?: string;\n}\n\nconst Bar: FC<BarProps> = ({\n  value,\n  type,\n  barStyle,\n  animated,\n  min,\n  max,\n  color,\n  barLabelName,\n  id,\n  \"data-testid\": dataTestId,\n  className\n}) => {\n  const classNames = useMemo(() => {\n    return cx(styles.bar, getStyle(styles, camelCase(\"type__\" + type + \"--\" + barStyle)), className, {\n      [styles.animate]: animated\n    });\n  }, [type, barStyle, animated, className]);\n\n  const valuePercentage = useMemo(() => {\n    if (value === null || value === undefined) return 0;\n    return calculatePercentage(value, min, max);\n  }, [value, min, max]);\n\n  if (!value) return null;\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-label={barLabelName}\n      aria-valuenow={valuePercentage}\n      aria-valuemin={0}\n      aria-valuemax={100}\n      className={classNames}\n      style={{\n        width: `${valuePercentage}%`,\n        ...(color && { backgroundColor: color })\n      }}\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.BAR, id)}\n    />\n  );\n};\n\nexport default Bar;\n"],"names":["Bar","_ref","value","type","barStyle","animated","min","max","color","barLabelName","id","dataTestId","className","classNames","useMemo","cx","styles","bar","getStyle","camelCase","_defineProperty","animate","valuePercentage","calculatePercentage","React","createElement","role","style","width","concat","backgroundColor","getTestId","ComponentDefaultTestId","BAR"],"mappings":"mcAsCA,IAAMA,EAAoB,SAAjBC,GAYJ,IAXHC,EAAKD,EAALC,MACAC,EAAIF,EAAJE,KACAC,EAAQH,EAARG,SACAC,EAAQJ,EAARI,SACAC,EAAGL,EAAHK,IACAC,EAAGN,EAAHM,IACAC,EAAKP,EAALO,MACAC,EAAYR,EAAZQ,aACAC,EAAET,EAAFS,GACeC,EAAUV,EAAzB,eACAW,EAASX,EAATW,UAEMC,EAAaC,GAAQ,WACzB,OAAOC,EAAGC,EAAOC,IAAKC,EAASF,EAAQG,EAAU,SAAWhB,EAAO,KAAOC,IAAYQ,EAASQ,EAC5FJ,CAAAA,EAAAA,EAAOK,QAAUhB,GAErB,GAAE,CAACF,EAAMC,EAAUC,EAAUO,IAExBU,EAAkBR,GAAQ,WAC9B,OAAIZ,QAA8C,EAC3CqB,EAAoBrB,EAAOI,EAAKC,EACxC,GAAE,CAACL,EAAOI,EAAKC,IAEhB,OAAKL,EAGHsB,EACEC,cAAA,MAAA,CAAAC,KAAK,2BACOjB,EAAY,gBACTa,EAAe,gBACf,EAAC,gBACD,IACfV,UAAWC,EACXc,qBACEC,MAAK,GAAAC,OAAKP,EAAe,MACrBd,GAAS,CAAEsB,gBAAiBtB,IAElCE,GAAIA,EAAE,cACOC,GAAcoB,EAAUC,EAAuBC,IAAKvB,KAflD,IAkBrB"}
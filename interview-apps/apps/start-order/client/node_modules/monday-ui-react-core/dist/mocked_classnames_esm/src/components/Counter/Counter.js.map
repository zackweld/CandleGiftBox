{"version":3,"file":"Counter.js","sources":["../../../../../src/components/Counter/Counter.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport useEventListener from \"../../hooks/useEventListener\";\nimport useAfterFirstRender from \"../../hooks/useAfterFirstRender\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { CounterColor, CounterSize, CounterType, getActualSize } from \"./CounterConstants\";\nimport { withStaticProps } from \"../../types\";\nimport styles from \"./Counter.module.scss\";\n\nexport interface CounterProps extends VibeComponentProps {\n  /** id to pass to the element */\n  id?: string;\n  /** element id to describe the counter accordingly */\n  ariaLabeledBy?: string;\n  /** Use className instead\n   * @deprecated\n   */\n  wrapperClassName?: string;\n  /** Custom class names to pass to the component wrapper */\n  className?: string;\n  /** Custom class names to pass to the component */\n  counterClassName?: string;\n  /** The numeric value of the counter */\n  count?: number;\n  /** Counter description */\n  ariaLabel?: string;\n  /** The size of the counter */\n  size?: CounterSize;\n  kind?: CounterType;\n  /** The color of the counter */\n  color?: CounterColor;\n  /** maximum number of digits to display (see relevant story) */\n  maxDigits?: number;\n  /** Text prepended to counter value */\n  prefix?: string;\n  /** Callback to be called when the counter is clicked. */\n  onMouseDown?: (event: React.MouseEvent<HTMLSpanElement>) => void;\n  /** Disables the component's animation */\n  noAnimation?: boolean;\n}\n\nconst Counter: React.FC<CounterProps> & {\n  sizes?: typeof CounterSize;\n  colors?: typeof CounterColor;\n  kinds?: typeof CounterType;\n} = ({\n  className,\n  // Backward compatibility for props naming\n  wrapperClassName,\n  counterClassName,\n  count = 0,\n  size = Counter.sizes.LARGE,\n  kind = Counter.kinds.FILL,\n  color = Counter.colors.PRIMARY,\n  maxDigits = 3,\n  ariaLabeledBy = \"\",\n  ariaLabel = \"\",\n  id = \"\",\n  prefix = \"\",\n  onMouseDown = NOOP,\n  noAnimation = false,\n  \"data-testid\": dataTestId\n}) => {\n  // Variables\n  const overrideClassName = backwardCompatibilityForProperties([className, wrapperClassName], undefined) as string;\n\n  // State\n  const [countChangeAnimationState, setCountChangeAnimationState] = useState(false);\n\n  // Refs\n  const ref = useRef<HTMLDivElement>(null);\n\n  // Callbacks\n  const setCountChangedAnimationActive = useCallback(() => {\n    setCountChangeAnimationState(true);\n  }, [setCountChangeAnimationState]);\n\n  const setCountChangedAnimationNotActive = useCallback(() => {\n    setCountChangeAnimationState(false);\n  }, [setCountChangeAnimationState]);\n\n  // Listeners\n  useEventListener({\n    eventName: \"animationend\",\n    callback: setCountChangedAnimationNotActive,\n    ref\n  });\n\n  // Custom hooks\n  const isAfterFirstRender = useAfterFirstRender();\n\n  // Effects\n  useEffect(() => {\n    if (isAfterFirstRender.current) {\n      setCountChangedAnimationActive();\n    }\n  }, [count, isAfterFirstRender, setCountChangedAnimationActive]);\n\n  useEffect(() => {\n    if (maxDigits <= 0) {\n      console.error(\"Max digits must be a positive number\");\n    }\n  }, [maxDigits]);\n\n  // Memos\n  const classNames = useMemo(() => {\n    return cx(\n      styles.counter,\n      getStyle(styles, camelCase(\"size-\" + getActualSize(size))),\n      getStyle(styles, camelCase(\"kind-\" + kind)),\n      getStyle(styles, camelCase(\"color-\" + color)),\n      {\n        [styles.withAnimation]: countChangeAnimationState\n      },\n      counterClassName\n    );\n  }, [size, kind, color, countChangeAnimationState, counterClassName]);\n\n  const counterId = \"counter\" + (id ? `-${id}` : \"\");\n  const countText = count?.toString().length > maxDigits ? `${10 ** maxDigits - 1}+` : String(count);\n  const counter = (\n    <span id={counterId} data-testid={dataTestId || getTestId(ComponentDefaultTestId.COUNTER, id)}>\n      {prefix + countText}\n    </span>\n  );\n\n  return (\n    <span\n      className={overrideClassName}\n      aria-label={`${ariaLabel} ${countText}`}\n      aria-labelledby={ariaLabeledBy}\n      onMouseDown={onMouseDown}\n    >\n      <div className={classNames} aria-label={countText} ref={ref}>\n        {noAnimation ? (\n          counter\n        ) : (\n          <SwitchTransition mode=\"out-in\">\n            <CSSTransition\n              key={countText}\n              classNames={{\n                enter: styles.fadeEnter,\n                enterActive: styles.fadeEnterActive,\n                exit: styles.fadeExit,\n                exitActive: styles.fadeExitActive\n              }}\n              // @ts-expect-error @definitelyTyped typings expecting a single parameter for some reason when the function passed here is called with two parameters\n              // See https://github.com/reactjs/react-transition-group/blob/c89f807067b32eea6f68fd6c622190d88ced82e2/src/Transition.js#L522-L534\n              addEndListener={(node: HTMLElement, done: () => void) => {\n                node.addEventListener(\"transitionend\", done, false);\n              }}\n            >\n              <span id={counterId} data-testid={dataTestId || getTestId(ComponentDefaultTestId.COUNTER, id)}>\n                {prefix + countText}\n              </span>\n            </CSSTransition>\n          </SwitchTransition>\n        )}\n      </div>\n    </span>\n  );\n};\n\nexport default withStaticProps(Counter, {\n  sizes: CounterSize,\n  colors: CounterColor,\n  kinds: CounterType\n});\n"],"names":["withStaticProps","Counter","_ref","counterClassName","_ref$count","count","_ref$size","size","sizes","LARGE","_ref$kind","kind","kinds","FILL","_ref$color","color","colors","PRIMARY","_ref$maxDigits","maxDigits","_ref$ariaLabeledBy","ariaLabeledBy","_ref$ariaLabel","ariaLabel","_ref$id","id","_ref$prefix","prefix","_ref$onMouseDown","onMouseDown","NOOP","_ref$noAnimation","noAnimation","dataTestId","overrideClassName","backwardCompatibilityForProperties","className","wrapperClassName","undefined","_useState","useState","_useState2","_slicedToArray","countChangeAnimationState","setCountChangeAnimationState","ref","useRef","setCountChangedAnimationActive","useCallback","setCountChangedAnimationNotActive","useEventListener","eventName","callback","isAfterFirstRender","useAfterFirstRender","useEffect","current","console","error","classNames","useMemo","cx","styles","counter","getStyle","camelCase","getActualSize","_defineProperty","withAnimation","counterId","concat","countText","length","Math","pow","String","React","createElement","getTestId","ComponentDefaultTestId","COUNTER","SwitchTransition","mode","CSSTransition","key","enter","fadeEnter","enterActive","fadeEnterActive","exit","fadeExit","exitActive","fadeExitActive","addEndListener","node","done","addEventListener","CounterSize","CounterColor","CounterType"],"mappings":"g8BA+CA,IA0HeA,EAAAA,GAtHX,SAJEC,EAAOC,GAqBR,IAbHC,EAAgBD,EAAhBC,iBAAgBC,EAAAF,EAChBG,MAAAA,OAAQ,IAAHD,EAAG,EAACA,EAAAE,EAAAJ,EACTK,KAAAA,OAAON,IAAHK,EAAGL,EAAQO,MAAMC,MAAKH,EAAAI,EAAAR,EAC1BS,KAAAA,OAAOV,IAAHS,EAAGT,EAAQW,MAAMC,KAAIH,EAAAI,EAAAZ,EACzBa,MAAAA,OAAQd,IAAHa,EAAGb,EAAQe,OAAOC,QAAOH,EAAAI,EAAAhB,EAC9BiB,UAAAA,OAAY,IAAHD,EAAG,EAACA,EAAAE,EAAAlB,EACbmB,cAAAA,OAAgB,IAAHD,EAAG,GAAEA,EAAAE,EAAApB,EAClBqB,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EAAAE,EAAAtB,EACduB,GAAAA,OAAK,IAAHD,EAAG,GAAEA,EAAAE,EAAAxB,EACPyB,OAAAA,OAAS,IAAHD,EAAG,GAAEA,EAAAE,EAAA1B,EACX2B,YAAAA,OAAcC,IAAHF,EAAGE,EAAIF,EAAAG,EAAA7B,EAClB8B,YAAAA,OAAc,IAAHD,GAAQA,EACJE,EAAU/B,EAAzB,eAGMgC,EAAoBC,EAAmC,CAlBpDjC,EAATkC,UAEgBlC,EAAhBmC,uBAgB4FC,GAG5FC,EAAkEC,GAAS,GAAMC,EAAAC,EAAAH,EAAA,GAA1EI,EAAyBF,EAAA,GAAEG,EAA4BH,EAAA,GAGxDI,EAAMC,EAAuB,MAG7BC,EAAiCC,GAAY,WACjDJ,GAA6B,EAC/B,GAAG,CAACA,IAEEK,GAAoCD,GAAY,WACpDJ,GAA6B,EAC/B,GAAG,CAACA,IAGJM,EAAiB,CACfC,UAAW,eACXC,SAAUH,GACVJ,IAAAA,IAIF,IAAMQ,GAAqBC,IAG3BC,GAAU,WACJF,GAAmBG,SACrBT,GAEH,GAAE,CAAC1C,EAAOgD,GAAoBN,IAE/BQ,GAAU,WACJpC,EAAa,GACfsC,QAAQC,MAAM,uCAElB,GAAG,CAACvC,IAGJ,IAAMwC,GAAaC,GAAQ,WACzB,OAAOC,EACLC,EAAOC,QACPC,EAASF,EAAQG,EAAU,QAAUC,EAAc3D,KACnDyD,EAASF,EAAQG,EAAU,QAAUtD,IACrCqD,EAASF,EAAQG,EAAU,SAAWlD,IAAOoD,EAE1CL,CAAAA,EAAAA,EAAOM,cAAgBzB,GAE1BxC,EAEJ,GAAG,CAACI,EAAMI,EAAMI,EAAO4B,EAA2BxC,IAE5CkE,GAAY,WAAa5C,EAAE6C,IAAAA,OAAO7C,GAAO,IACzC8C,IAAYlE,aAAK,GAALA,MAAkBmE,QAASrD,EAAS,GAAAmD,OAAMG,KAAAC,IAAA,GAAMvD,GAAY,OAAcd,EAAPsE,GAC/EZ,GACJa,EAAMC,cAAA,OAAA,CAAApD,GAAI4C,GAAS,cAAepC,GAAc6C,EAAUC,EAAuBC,QAASvD,IACvFE,EAAS4C,IAId,OACEK,EACEC,cAAA,OAAA,CAAAzC,UAAWF,yBACIX,OAAS+C,OAAIC,IACX,kBAAAlD,EACjBQ,YAAaA,GAEb+C,EAAKC,cAAA,MAAA,CAAAzC,UAAWuB,GAAwB,aAAAY,GAAW1B,IAAKA,GACrDb,EACC+B,GAEAa,EAAAC,cAACI,EAAgB,CAACC,KAAK,UACrBN,EAAAC,cAACM,EACC,CAAAC,IAAKb,GACLZ,WAAY,CACV0B,MAAOvB,EAAOwB,UACdC,YAAazB,EAAO0B,gBACpBC,KAAM3B,EAAO4B,SACbC,WAAY7B,EAAO8B,gBAIrBC,eAAgB,SAACC,EAAmBC,GAClCD,EAAKE,iBAAiB,gBAAiBD,GAAM,EAC/C,GAEAnB,EAAMC,cAAA,OAAA,CAAApD,GAAI4C,GAAwB,cAAApC,GAAc6C,EAAUC,EAAuBC,QAASvD,IACvFE,EAAS4C,OAQ1B,GAEwC,CACtC/D,MAAOyF,EACPjF,OAAQkF,EACRtF,MAAOuF"}
{"version":3,"file":"Slider.js","sources":["../../../../../src/components/Slider/Slider.tsx"],"sourcesContent":["import React, { forwardRef, ReactElement, useMemo, useRef } from \"react\";\nimport { BASE_SIZES } from \"../../constants\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { ensureDefaultValue } from \"./SliderHelpers\";\nimport { SliderProvider } from \"./SliderContext\";\nimport SliderBase from \"./SliderBase/SliderBase\";\nimport SliderInfix from \"./SliderInfix\";\nimport { IconType } from \"../Icon/IconConstants\";\nimport { SliderColor, SliderSize } from \"./SliderConstants\";\nimport cx from \"classnames\";\nimport { withStaticProps } from \"../../types\";\nimport styles from \"./Slider.module.scss\";\n\nexport type SliderProps = {\n  // ------ SliderBase props\n  /**\n   * Define a string that labels the current element (Slider)\n   */\n  ariaLabel?: string;\n  /**\n   * ElementId of Node that have the text needed for labeling the current element (Slider)\n   */\n  ariaLabelledby?: string;\n  /**\n   * Custom `class name` to be added to the component-root-node\n   */\n  className?: string;\n  /**\n   * Color Mode (primary/positive/negative) of the component (Slider)\n   */\n  color?: SliderColor;\n  /**\n   * Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc)\n   */\n  \"data-testid\"?: string;\n  defaultValue?: number | number[];\n  /**\n   * Formatter function `value => formattedValue`\n   * default formatter return `${value}%`\n   */\n  /**\n   * If set to true, Component (Slider) will be disabled\n   *  - impossible to change value of component (Slider)\n   *  - visual changes (opacity)\n   */\n  disabled?: boolean;\n  /**\n   * Attribute `id` to be added to the component-root-node\n   */\n  id?: string;\n  /**\n   * Max range value of the component (Slider)\n   */\n  max?: number;\n  /**\n   * Min range value of the component (Slider)\n   */\n  min?: number;\n  /**\n   * Optional onChange callback (for outer trigger or Controlled mode)\n   * - required in Controlled Mode\n   */\n  onChange?: (value: number | number[]) => void;\n  /**\n   * If true switch slider to RRange mode (two Thumbs)\n   */\n  ranged?: boolean;\n  /**\n   * The granularity with which the slider can step through values.\n   * (A \"discrete\" slider.) The min prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   */\n  step?: number;\n  /**\n   * Always show `value` instead of Tooltip\n   */\n  showValue?: boolean;\n  /**\n   * Size small/medium/large of the component (Slider)\n   */\n  size?: SliderSize;\n  /**\n   * Current/selected value of the range of the Component (Slider)\n   *   - should be used in Controlled Mode only\n   *   - in ranged mode should be an array of two numbers\n   */\n  value?: number | number[];\n  /**\n   * Function to format the value, e.g. add %. By default, returns `${value}%`\n   */\n  valueFormatter?: (value: number) => string;\n  /**\n   * Text/presentation of current/selected value\n   *  - should be used in Controlled Mode only\n   */\n  valueText?: string;\n  // ------ Additional subcomponents' props\n  /**\n   * Show selected from Slider range value\n   */\n  indicateSelection?: boolean;\n  /**\n   * Options for initial/start/prefix element, it can be one of:\n   *  - Any Component (react component, node, text, number etc.)\n   *  - Or it can be an object of options for Icons component (see Icon components props)\n   *  - Or it can be an object for Label (Icon, Heading - and other components)\n   *  - Or it can be Render Props Function witch are getting value and valueText\n   */\n  prefix?: { icon: IconType } | string | ((value: number, valueText: string) => void) | ReactElement;\n  /**\n   * Options for postfix/end/finishing element. Same as prefix element.\n   */\n  postfix?: { icon: IconType } | string | ((value: number, valueText: string) => void) | ReactElement;\n  /**\n   * Width of SelectionIndicator (i.e. TextField)\n   */\n  selectionIndicatorWidth?: string;\n};\n\nconst Slider: React.FC<SliderProps> & {\n  sizes?: typeof BASE_SIZES;\n  colors?: typeof SliderColor;\n} = forwardRef(\n  (\n    {\n      ariaLabel,\n      ariaLabelledby,\n      className,\n      color,\n      \"data-testid\": dataTestId = \"monday-slider\",\n      disabled = false,\n      id,\n      max = 100,\n      min = 0,\n      onChange = NOOP,\n      ranged = false,\n      step = 1,\n      showValue = false,\n      size = Slider.sizes.SMALL,\n      value,\n      defaultValue = 0,\n      valueFormatter = (value: number) => `${value}%`,\n      valueText,\n      // ------ Additional subcomponents' props\n      indicateSelection = false,\n      prefix,\n      postfix,\n      selectionIndicatorWidth = \"60px\"\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n    const infixOptions = useMemo(\n      () => ({ prefix, postfix, indicateSelection, selectionIndicatorWidth }),\n      [prefix, postfix, indicateSelection, selectionIndicatorWidth]\n    );\n    return (\n      <SliderProvider\n        ariaLabel={ariaLabel}\n        ariaLabelledby={ariaLabelledby}\n        color={color}\n        data-testid={dataTestId}\n        disabled={disabled}\n        infixOptions={infixOptions}\n        max={max}\n        min={min}\n        onChange={onChange}\n        ranged={ranged}\n        showValue={showValue}\n        size={size}\n        step={step}\n        value={value}\n        defaultValue={ensureDefaultValue(defaultValue, min, max, ranged)}\n        valueFormatter={valueFormatter}\n        valueText={valueText}\n      >\n        <div\n          className={cx(styles.slider, { [styles.valueShown]: showValue }, className)}\n          data-testid={dataTestId}\n          id={id}\n          ref={mergedRef}\n        >\n          <SliderInfix kind={SliderInfix.kinds.PREFIX} />\n          <SliderBase />\n          <SliderInfix kind={SliderInfix.kinds.POSTFIX} />\n        </div>\n      </SliderProvider>\n    );\n  }\n);\n\nexport default withStaticProps(Slider, {\n  sizes: BASE_SIZES,\n  colors: SliderColor\n});\n"],"names":["Slider","forwardRef","_ref","ref","ariaLabel","ariaLabelledby","className","color","_ref$dataTestid","dataTestId","_ref$disabled","disabled","id","_ref$max","max","_ref$min","min","_ref$onChange","onChange","NOOP","_ref$ranged","ranged","_ref$step","step","_ref$showValue","showValue","_ref$size","size","sizes","SMALL","value","_ref$defaultValue","defaultValue","_ref$valueFormatter","valueFormatter","concat","valueText","_ref$indicateSelectio","indicateSelection","prefix","postfix","_ref$selectionIndicat","selectionIndicatorWidth","componentRef","useRef","mergedRef","useMergeRef","infixOptions","useMemo","React","createElement","SliderProvider","ensureDefaultValue","cx","styles","slider","_defineProperty","valueShown","SliderInfix","kind","kinds","PREFIX","SliderBase","POSTFIX","withStaticProps","BASE_SIZES","colors","SliderColor"],"mappings":"stBAwHA,IAAMA,EAGFC,GACF,SAAAC,EA0BEC,GACE,IAzBAC,EAASF,EAATE,UACAC,EAAcH,EAAdG,eACAC,EAASJ,EAATI,UACAC,EAAKL,EAALK,MAAKC,EAAAN,EACL,eAAeO,OAAa,IAAHD,EAAG,gBAAeA,EAAAE,EAAAR,EAC3CS,SAAAA,OAAW,IAAHD,GAAQA,EAChBE,EAAEV,EAAFU,GAAEC,EAAAX,EACFY,IAAAA,OAAM,IAAHD,EAAG,IAAGA,EAAAE,EAAAb,EACTc,IAAAA,OAAM,IAAHD,EAAG,EAACA,EAAAE,EAAAf,EACPgB,SAAAA,OAAWC,IAAHF,EAAGE,EAAIF,EAAAG,EAAAlB,EACfmB,OAAAA,OAAS,IAAHD,GAAQA,EAAAE,EAAApB,EACdqB,KAAAA,OAAO,IAAHD,EAAG,EAACA,EAAAE,EAAAtB,EACRuB,UAAAA,OAAY,IAAHD,GAAQA,EAAAE,EAAAxB,EACjByB,KAAAA,OAAO3B,IAAH0B,EAAG1B,EAAO4B,MAAMC,MAAKH,EACzBI,EAAK5B,EAAL4B,MAAKC,EAAA7B,EACL8B,aAAAA,OAAe,IAAHD,EAAG,EAACA,EAAAE,EAAA/B,EAChBgC,eAAAA,OAAiB,IAAHD,EAAG,SAACH,GAAa,MAAAK,GAAAA,OAAQL,EAAK,IAAA,EAAGG,EAC/CG,EAASlC,EAATkC,UAASC,EAAAnC,EAEToC,kBAAAA,OAAoB,IAAHD,GAAQA,EACzBE,EAAMrC,EAANqC,OACAC,EAAOtC,EAAPsC,QAAOC,EAAAvC,EACPwC,wBAAAA,OAA0B,IAAHD,EAAG,OAAMA,EAI5BE,EAAeC,EAAO,MACtBC,EAAYC,EAAY3C,EAAKwC,GAC7BI,EAAeC,GACnB,WAAA,MAAO,CAAET,OAAAA,EAAQC,QAAAA,EAASF,kBAAAA,EAAmBI,wBAAAA,EAA0B,GACvE,CAACH,EAAQC,EAASF,EAAmBI,IAEvC,OACEO,EAACC,cAAAC,EACC,CAAA/C,UAAWA,EACXC,eAAgBA,EAChBE,MAAOA,gBACME,EACbE,SAAUA,EACVoC,aAAcA,EACdjC,IAAKA,EACLE,IAAKA,EACLE,SAAUA,EACVG,OAAQA,EACRI,UAAWA,EACXE,KAAMA,EACNJ,KAAMA,EACNO,MAAOA,EACPE,aAAcoB,EAAmBpB,EAAchB,EAAKF,EAAKO,GACzDa,eAAgBA,EAChBE,UAAWA,GAEXa,EAAAC,cAAA,MAAA,CACE5C,UAAW+C,EAAGC,EAAOC,OAAMC,EAAKF,GAAAA,EAAOG,WAAahC,GAAanB,GACpD,cAAAG,EACbG,GAAIA,EACJT,IAAK0C,GAELI,EAACC,cAAAQ,GAAYC,KAAMD,EAAYE,MAAMC,SACrCZ,EAAAC,cAACY,EAAa,MACdb,EAAAC,cAACQ,EAAW,CAACC,KAAMD,EAAYE,MAAMG,WAI7C,IAGaC,EAAAA,EAAgBhE,EAAQ,CACrC4B,MAAOqC,EACPC,OAAQC"}
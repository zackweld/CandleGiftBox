import React from "react";
import { createFilter } from "react-select";
import { DropdownComponentProps } from "./Dropdown.types";
import { VibeComponent } from "../../types";
declare const _default: ((VibeComponent<DropdownComponentProps & React.RefAttributes<HTMLElement>, HTMLElement> & Partial<{
    size: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    sizes: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    chipColors: {
        PRIMARY: string;
        NEGATIVE: string;
        POSITIVE: string;
    };
    menuPlacements: {
        TOP: string;
        BOTTOM: string;
        AUTO: string;
    };
    menuPositions: {
        ABSOLUTE: string;
        FIXED: string;
    };
    createFilter: typeof createFilter;
}>) | (React.FC<DropdownComponentProps & React.RefAttributes<HTMLElement>> & Partial<{
    size: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    sizes: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    chipColors: {
        PRIMARY: string;
        NEGATIVE: string;
        POSITIVE: string;
    };
    menuPlacements: {
        TOP: string;
        BOTTOM: string;
        AUTO: string;
    };
    menuPositions: {
        ABSOLUTE: string;
        FIXED: string;
    };
    createFilter: typeof createFilter;
}>)) & {
    size: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    sizes: {
        readonly SMALL: "small";
        readonly MEDIUM: "medium";
        readonly LARGE: "large";
        readonly XXS: "xxs";
        readonly XS: "xs";
    };
    chipColors: {
        PRIMARY: string;
        NEGATIVE: string;
        POSITIVE: string;
    };
    menuPlacements: {
        TOP: string;
        BOTTOM: string;
        AUTO: string;
    };
    menuPositions: {
        ABSOLUTE: string;
        FIXED: string;
    };
    createFilter: typeof createFilter;
};
export default _default;

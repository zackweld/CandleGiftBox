{"version":3,"file":"SplitButton.js","sources":["../../../../../src/components/SplitButton/SplitButton.tsx"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport { camelCase } from \"lodash-es\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\n// Libraries import\nimport React, { FC, ReactElement, useCallback, useMemo, useRef, useState } from \"react\";\n// Constants import\nimport {\n  DEFAULT_DIALOG_HIDE_TRIGGER,\n  DEFAULT_DIALOG_SHOW_TRIGGER,\n  DIALOG_MOVE_BY,\n  EMPTY_ARR,\n  ENTER_KEYS,\n  SECONDARY_BUTTON_ARIA_LABEL,\n  SECONDARY_BUTTON_WRAPPER_CLASSNAME,\n  SplitButtonSecondaryContentPosition\n} from \"./SplitButtonConstants\";\nimport { withStaticProps } from \"../../types\";\nimport { AnimationType, DialogPosition } from \"../../constants\";\nimport { HideShowEvent } from \"../Dialog/consts/dialog-show-hide-event\";\n// Utils import\nimport { NOOP } from \"../../utils/function-utils\";\nimport { isInsideClass } from \"../../utils/dom-utils\";\n// Hooks import\nimport useKeyEvent from \"../../hooks/useKeyEvent\";\nimport useEventListener from \"../../hooks/useEventListener\";\n// Components import\nimport Button, { ButtonProps } from \"../Button/Button\";\nimport Dialog, { DialogEvent } from \"../Dialog/Dialog\";\nimport DropdownChevronDown from \"../Icon/Icons/components/DropdownChevronDown\";\nimport DialogContentContainer from \"../DialogContentContainer/DialogContentContainer\";\nimport styles from \"./SplitButton.module.scss\";\n\nexport interface SplitButtonProps extends ButtonProps {\n  /*\n   * The element or renderer which display inside the dialog which open by clicking on the split button's secondary button.\n   */\n  secondaryDialogContent?: ReactElement | (() => string | ReactElement);\n  onSecondaryDialogDidShow?: () => void;\n  onSecondaryDialogDidHide?: () => void;\n  zIndex?: number;\n  /*\n   * Class name to provide the element which wraps the popover/modal/dialog\n   */\n  secondaryDialogClassName?: string;\n  // TODO in next major remove type DialogPosition\n  secondaryDialogPosition?: DialogPosition | SplitButtonSecondaryContentPosition;\n  /*\n    Popover Container padding size\n   */\n  dialogPaddingSize?: (typeof DialogContentContainer.sizes)[keyof typeof DialogContentContainer.sizes];\n  /**\n   * the container selector in which to append the dialog\n   * for examples: \"body\" , \".my-class\", \"#my-id\"\n   */\n  dialogContainerSelector?: string;\n  shouldCloseOnClickInsideDialog?: boolean;\n}\n\nconst SplitButton: FC<SplitButtonProps> & {\n  secondaryPositions?: typeof SplitButtonSecondaryContentPosition;\n  secondaryDialogPositions?: typeof SplitButtonSecondaryContentPosition;\n  sizes?: typeof Button.sizes;\n  colors?: typeof Button.colors;\n  kinds?: typeof Button.kinds;\n  inputTags?: typeof Button.inputTags;\n  dialogPaddingSizes?: typeof DialogContentContainer.sizes;\n} = ({\n  secondaryDialogContent,\n  onSecondaryDialogDidShow = NOOP,\n  onSecondaryDialogDidHide = NOOP,\n  shouldCloseOnClickInsideDialog,\n  zIndex = null,\n  secondaryDialogClassName,\n  secondaryDialogPosition = SplitButtonSecondaryContentPosition.BOTTOM_START,\n  dialogContainerSelector,\n  dialogPaddingSize = DialogContentContainer.sizes.MEDIUM,\n  disabled,\n  // success mode not working right now, need to fix it in different pr\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  success,\n  loading,\n  kind,\n  color,\n  className,\n  leftIcon,\n  rightIcon,\n  onClick,\n  children,\n  marginLeft,\n  marginRight,\n  active,\n  id,\n  \"data-testid\": dataTestId,\n  ...buttonProps\n}) => {\n  // State //\n  const [isDialogOpen, setDialogOpen] = useState(false);\n  const [isHovered, setIsHover] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  // Refs //\n  const ref = useRef(null);\n  const secondaryButtonRef = useRef(null);\n\n  // Callbacks //\n  const setHovered = useCallback(() => setIsHover(true), [setIsHover]);\n  const setNotHovered = useCallback(() => setIsHover(false), [setIsHover]);\n\n  const shouldSetActive = useCallback(\n    (e: React.KeyboardEvent<HTMLElement>) => {\n      if (disabled) return false;\n      return !isInsideClass(e.target as HTMLElement, SECONDARY_BUTTON_WRAPPER_CLASSNAME);\n    },\n    [disabled]\n  );\n\n  const setActive = useCallback(\n    (e: React.KeyboardEvent<HTMLElement>) => {\n      if (!shouldSetActive(e)) return;\n      setIsActive(true);\n    },\n    [setIsActive, shouldSetActive]\n  );\n  const setNotActive = useCallback(() => setIsActive(false), [setIsActive]);\n  const setActiveOnEnter = useCallback(\n    (e: React.KeyboardEvent<HTMLElement>) => {\n      if (!shouldSetActive(e)) return;\n      setIsActive(true);\n    },\n    [setIsActive, shouldSetActive]\n  );\n\n  const showDialog = useCallback(() => {\n    setDialogOpen(true);\n    onSecondaryDialogDidShow();\n  }, [setDialogOpen, onSecondaryDialogDidShow]);\n\n  const hideDialog = useCallback(\n    (_: DialogEvent, eventName: HideShowEvent) => {\n      setDialogOpen(false);\n      onSecondaryDialogDidHide();\n      if (eventName === HideShowEvent.ESCAPE_KEY) {\n        secondaryButtonRef.current.focus();\n      }\n    },\n    [setDialogOpen, onSecondaryDialogDidHide]\n  );\n\n  // Event listeners //\n\n  // Used to set both buttons as hovered no matter what button was hovered\n  useEventListener({ eventName: \"mouseenter\", callback: setHovered, ref });\n  useEventListener({ eventName: \"mouseleave\", callback: setNotHovered, ref });\n\n  useEventListener({ eventName: \"mousedown\", callback: setActive, ref });\n  useEventListener({ eventName: \"mouseup\", callback: setNotActive, ref });\n\n  // Used to finish active transition if clicked on enter\n  useEventListener({ eventName: \"transitionend\", callback: setNotActive, ref });\n\n  // Key events\n  useKeyEvent({ keys: ENTER_KEYS, ref, callback: setActiveOnEnter });\n\n  const classNames = useMemo(\n    () =>\n      cx(\n        styles.button,\n        getStyle(styles, camelCase(\"kind-\" + kind)),\n        getStyle(styles, camelCase(\"color-\" + color)),\n        {\n          [styles.mainActive]: active,\n          [styles.active]: isActive,\n          [styles.splitContentOpen]: isDialogOpen,\n          [styles.hovered]: isHovered,\n          [styles.disabled]: disabled\n        },\n        className\n      ),\n    [className, kind, color, active, isActive, isDialogOpen, isHovered, disabled]\n  );\n\n  const dialogShowTrigger = useMemo(\n    () => (disabled ? (EMPTY_ARR as HideShowEvent[]) : DEFAULT_DIALOG_SHOW_TRIGGER),\n    [disabled]\n  );\n\n  const dialogHideTrigger = useMemo(() => {\n    if (shouldCloseOnClickInsideDialog) return [...DEFAULT_DIALOG_HIDE_TRIGGER, HideShowEvent.CONTENT_CLICK];\n    return DEFAULT_DIALOG_HIDE_TRIGGER;\n  }, [shouldCloseOnClickInsideDialog]);\n\n  const actionsContent = useCallback(() => {\n    const content = typeof secondaryDialogContent === \"function\" ? secondaryDialogContent() : secondaryDialogContent;\n    return (\n      <DialogContentContainer type={DialogContentContainer.types.POPOVER} size={dialogPaddingSize}>\n        {content}\n      </DialogContentContainer>\n    );\n  }, [secondaryDialogContent, dialogPaddingSize]);\n\n  const animationEdgePosition = useMemo(() => {\n    if (secondaryDialogPosition === SplitButtonSecondaryContentPosition.BOTTOM_MIDDLE) {\n      return \"\";\n    }\n    if (secondaryDialogPosition === SplitButtonSecondaryContentPosition.BOTTOM_START) {\n      return \"bottom\";\n    }\n\n    return \"top\";\n  }, [secondaryDialogPosition]);\n\n  return (\n    <div\n      className={classNames}\n      ref={ref}\n      id={id}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SPLIT_BUTTON, id)}\n    >\n      <Button\n        {\n          ...buttonProps /* We are enriching button with other props so we must use spreading */\n        }\n        preventClickAnimation\n        leftIcon={leftIcon}\n        rightIcon={rightIcon}\n        rightFlat\n        color={color}\n        kind={kind}\n        active={active}\n        onClick={onClick}\n        className={styles.mainButton}\n        marginLeft={marginLeft}\n        onFocus={setHovered}\n        onBlur={setNotHovered}\n        disabled={disabled}\n        loading={loading}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.SPLIT_BUTTON_PRIMARY_BUTTON, id)}\n      >\n        {children}\n      </Button>\n      <div className={styles.secondaryButtonWrapper}>\n        <Dialog\n          wrapperClassName={secondaryDialogClassName}\n          zIndex={zIndex}\n          content={actionsContent}\n          position={secondaryDialogPosition as DialogPosition}\n          containerSelector={dialogContainerSelector}\n          startingEdge={animationEdgePosition}\n          animationType={AnimationType.EXPAND}\n          moveBy={DIALOG_MOVE_BY}\n          onDialogDidShow={showDialog}\n          onDialogDidHide={hideDialog}\n          showTrigger={dialogShowTrigger}\n          hideTrigger={dialogHideTrigger}\n        >\n          <Button\n            {...buttonProps}\n            ref={secondaryButtonRef}\n            preventClickAnimation\n            leftFlat\n            noSidePadding\n            color={color}\n            kind={kind}\n            className={styles.secondaryButton}\n            active={isDialogOpen}\n            marginRight={marginRight}\n            onFocus={setHovered}\n            onBlur={setNotHovered}\n            disabled={disabled}\n            ariaLabel={SECONDARY_BUTTON_ARIA_LABEL}\n            ariaHasPopup\n            ariaExpanded={isDialogOpen}\n            data-testid={dataTestId || getTestId(ComponentDefaultTestId.SPLIT_BUTTON_SECONDARY_BUTTON, id)}\n          >\n            <div className={styles.secondaryButtonIconWrapper}>\n              <DropdownChevronDown aria-hidden=\"true\" />\n            </div>\n          </Button>\n        </Dialog>\n      </div>\n    </div>\n  );\n};\n\nSplitButton.defaultProps = {\n  ...Button.defaultProps,\n  onSecondaryDialogDidShow: NOOP,\n  onSecondaryDialogDidHide: NOOP,\n  zIndex: null,\n  secondaryDialogClassName: \"\",\n  secondaryDialogPosition: DialogPosition.BOTTOM_START,\n  dialogPaddingSize: DialogContentContainer.sizes.MEDIUM\n};\n\nexport default withStaticProps(SplitButton, {\n  // Backward compatibility for enum naming\n  secondaryPositions: SplitButtonSecondaryContentPosition,\n  secondaryDialogPositions: SplitButtonSecondaryContentPosition,\n  sizes: Button.sizes,\n  colors: Button.colors,\n  kinds: Button.kinds,\n  inputTags: Button.inputTags,\n  dialogPaddingSizes: DialogContentContainer.sizes\n});\n"],"names":["SplitButton","_a","secondaryDialogContent","_a$onSecondaryDialogD","onSecondaryDialogDidShow","NOOP","_a$onSecondaryDialogD2","onSecondaryDialogDidHide","shouldCloseOnClickInsideDialog","_a$zIndex","zIndex","secondaryDialogClassName","_a$secondaryDialogPos","secondaryDialogPosition","SplitButtonSecondaryContentPosition","BOTTOM_START","dialogContainerSelector","_a$dialogPaddingSize","dialogPaddingSize","DialogContentContainer","sizes","MEDIUM","disabled","loading","kind","color","className","leftIcon","rightIcon","onClick","children","marginLeft","marginRight","active","id","dataTestId","buttonProps","__rest","_useState","useState","_useState2","_slicedToArray","isDialogOpen","setDialogOpen","_useState3","_useState4","isHovered","setIsHover","_useState5","_useState6","isActive","setIsActive","ref","useRef","secondaryButtonRef","setHovered","useCallback","setNotHovered","shouldSetActive","e","isInsideClass","target","SECONDARY_BUTTON_WRAPPER_CLASSNAME","setActive","setNotActive","setActiveOnEnter","showDialog","hideDialog","_","eventName","HideShowEvent","ESCAPE_KEY","current","focus","useEventListener","callback","useKeyEvent","keys","ENTER_KEYS","classNames","useMemo","cx","styles","button","getStyle","camelCase","_defineProperty","mainActive","splitContentOpen","hovered","dialogShowTrigger","EMPTY_ARR","DEFAULT_DIALOG_SHOW_TRIGGER","dialogHideTrigger","concat","_toConsumableArray","DEFAULT_DIALOG_HIDE_TRIGGER","CONTENT_CLICK","actionsContent","content","React","createElement","type","types","POPOVER","size","animationEdgePosition","BOTTOM_MIDDLE","getTestId","ComponentDefaultTestId","SPLIT_BUTTON","Button","Object","assign","preventClickAnimation","rightFlat","mainButton","onFocus","onBlur","SPLIT_BUTTON_PRIMARY_BUTTON","secondaryButtonWrapper","Dialog","wrapperClassName","position","containerSelector","startingEdge","animationType","AnimationType","EXPAND","moveBy","DIALOG_MOVE_BY","onDialogDidShow","onDialogDidHide","showTrigger","hideTrigger","leftFlat","noSidePadding","secondaryButton","ariaLabel","SECONDARY_BUTTON_ARIA_LABEL","ariaHasPopup","ariaExpanded","SPLIT_BUTTON_SECONDARY_BUTTON","secondaryButtonIconWrapper","DropdownChevronDown","defaultProps","DialogPosition","withStaticProps","secondaryPositions","secondaryDialogPositions","colors","kinds","inputTags","dialogPaddingSizes"],"mappings":"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"}
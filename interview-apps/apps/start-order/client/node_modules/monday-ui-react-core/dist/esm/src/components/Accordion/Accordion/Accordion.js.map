{"version":3,"file":"Accordion.js","sources":["../../../../../../src/components/Accordion/Accordion/Accordion.tsx"],"sourcesContent":["import cx from \"classnames\";\nimport React, { forwardRef, ReactElement, useCallback, useMemo, useRef, useState } from \"react\";\nimport useMergeRef from \"../../../hooks/useMergeRef\";\nimport { VibeComponent, VibeComponentProps } from \"../../../types\";\nimport styles from \"./Accordion.module.scss\";\n\nconst COMPONENT_ID = \"monday-accordion\";\n\nfunction defineChildId(index: number, props: { id: string }, accordionId: string) {\n  if (props.id) {\n    return props.id;\n  }\n  if (accordionId) {\n    return `${accordionId}--item-${index}`;\n  }\n  return `${COMPONENT_ID}--item-${index}`;\n}\n\nexport interface AccordionProps extends VibeComponentProps {\n  /**\n   * List of AccordionItems\n   */\n  children?: Array<ReactElement> | ReactElement;\n  /**\n   * is allowed multiple opened accordion items\n   */\n  allowMultiple?: boolean;\n  /**\n   * Unique TestId - can be used as Selector for integration tests and other needs (tracking, etc.)\n   */\n  \"data-testid\"?: string;\n  /**\n   * Array of initial expanded indexes\n   */\n  defaultIndex?: Array<number>;\n}\n\nconst Accordion: VibeComponent<AccordionProps, unknown> & object = forwardRef(\n  (\n    {\n      children: originalChildren = null,\n      allowMultiple = false,\n      \"data-testid\": dataTestId = COMPONENT_ID,\n      defaultIndex = [],\n      className = \"\",\n      id\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [expandedItems, setExpandedItems] = useState(defaultIndex);\n\n    const children = useMemo(() => React.Children.toArray(originalChildren), [originalChildren]);\n\n    const isChildExpanded = useCallback(\n      (itemIndex: number) => {\n        return expandedItems.includes(itemIndex);\n      },\n      [expandedItems]\n    );\n\n    const onChildClick = useCallback(\n      (itemIndex: number) => {\n        if (allowMultiple) {\n          const newExpandedItems = [...expandedItems];\n          if (isChildExpanded(itemIndex)) {\n            const index = newExpandedItems.indexOf(itemIndex);\n            if (index > -1) {\n              newExpandedItems.splice(index, 1);\n            }\n          } else {\n            newExpandedItems.push(itemIndex);\n          }\n          setExpandedItems(newExpandedItems);\n          return;\n        }\n\n        if (isChildExpanded(itemIndex)) {\n          setExpandedItems([]);\n        } else {\n          setExpandedItems([itemIndex]);\n        }\n      },\n      [isChildExpanded, expandedItems, allowMultiple]\n    );\n\n    const renderChildElements = useMemo(() => {\n      return React.Children.map(children, (child: ReactElement, itemIndex) => {\n        const originalProps = { ...child?.props };\n        const childId = defineChildId(itemIndex, originalProps, id);\n        return React.cloneElement(child, {\n          ...originalProps,\n          id: childId,\n          onClickAccordionCallback: () => {\n            onChildClick(itemIndex);\n          },\n          open: isChildExpanded(itemIndex),\n          expandCollapseComponentClassName: cx(styles.accordionItemExpandCollapse, {\n            [styles.accordionItemExpandCollapseLast]: itemIndex === children.length - 1\n          })\n        });\n      });\n    }, [children, id, isChildExpanded, onChildClick]);\n\n    return (\n      <div ref={mergedRef} className={cx(styles.accordion, className)} data-testid={dataTestId} id={id}>\n        {children && renderChildElements}\n      </div>\n    );\n  }\n);\n\nexport default Accordion;\n"],"names":["COMPONENT_ID","Accordion","forwardRef","_ref","ref","_ref$children","children","originalChildren","_ref$allowMultiple","allowMultiple","_ref$dataTestid","dataTestId","_ref$defaultIndex","defaultIndex","_ref$className","className","id","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","expandedItems","setExpandedItems","useMemo","React","Children","toArray","isChildExpanded","useCallback","itemIndex","includes","onChildClick","newExpandedItems","_toConsumableArray","index","indexOf","splice","push","renderChildElements","map","child","props","accordionId","originalProps","Object","assign","childId","concat","cloneElement","onClickAccordionCallback","open","expandCollapseComponentClassName","cx","styles","accordionItemExpandCollapse","_defineProperty","accordionItemExpandCollapseLast","length","createElement","accordion"],"mappings":"4UAMA,IAAMA,EAAe,mBA+BfC,IAAAA,EAA6DC,GACjE,SAAAC,EASEC,GACE,IAAAC,EAAAF,EARAG,SAAUC,OAAmB,IAAHF,EAAG,KAAIA,EAAAG,EAAAL,EACjCM,cAAAA,OAAgB,IAAHD,GAAQA,EAAAE,EAAAP,EACrB,eAAeQ,OAAaX,IAAHU,EAAGV,EAAYU,EAAAE,EAAAT,EACxCU,aAAAA,OAAe,IAAHD,EAAG,GAAEA,EAAAE,EAAAX,EACjBY,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EACdE,EAAEb,EAAFa,GAIIC,EAAeC,EAAO,MACtBC,EAAYC,EAAYhB,EAAKa,GAEnCI,EAA0CC,EAAST,GAAaU,EAAAC,EAAAH,EAAA,GAAzDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAEhCjB,EAAWqB,GAAQ,WAAA,OAAMC,EAAMC,SAASC,QAAQvB,KAAmB,CAACA,IAEpEwB,EAAkBC,GACtB,SAACC,GACC,OAAOR,EAAcS,SAASD,EAChC,GACA,CAACR,IAGGU,EAAeH,GACnB,SAACC,GACC,GAAIxB,EAAJ,CACE,IAAM2B,EAAgBC,EAAOZ,GAC7B,GAAIM,EAAgBE,GAAY,CAC9B,IAAMK,EAAQF,EAAiBG,QAAQN,GACnCK,GAAS,GACXF,EAAiBI,OAAOF,EAAO,EAElC,MACCF,EAAiBK,KAAKR,GAExBP,EAAiBU,EAElB,MAEGL,EAAgBE,GAClBP,EAAiB,IAEjBA,EAAiB,CAACO,GAErB,GACD,CAACF,EAAiBN,EAAehB,IAG7BiC,EAAsBf,GAAQ,WAClC,OAAOC,EAAMC,SAASc,IAAIrC,GAAU,SAACsC,EAAqBX,GACxD,IAlFeK,EAAeO,EAAuBC,EAkF/CC,EAAqBC,OAAAC,OAAA,CAAA,EAAAL,eAAAA,EAAOC,OAC5BK,GAnFSZ,EAmFeL,EAnFuBa,EAmFG9B,GAnF1B6B,EAmFWE,GAlFrC/B,GACD6B,EAAM7B,GAEX8B,EACF,GAAAK,OAAUL,EAAWK,WAAAA,OAAUb,GAEjC,GAAAa,OAAUnD,EAAYmD,WAAAA,OAAUb,IA6E1B,OAAOV,EAAMwB,aAAaR,EACrBI,OAAAC,OAAAD,OAAAC,OAAA,GAAAF,GACH,CAAA/B,GAAIkC,EACJG,yBAA0B,WACxBlB,EAAaF,EACd,EACDqB,KAAMvB,EAAgBE,GACtBsB,iCAAkCC,EAAGC,EAAOC,4BAA2BC,EACpEF,CAAAA,EAAAA,EAAOG,gCAAkC3B,IAAc3B,EAASuD,OAAS,MAGhF,GACD,GAAE,CAACvD,EAAUU,EAAIe,EAAiBI,IAEnC,OACEP,EAAAkC,cAAA,MAAA,CAAK1D,IAAKe,EAAWJ,UAAWyC,EAAGC,EAAOM,UAAWhD,GAAyB,cAAAJ,EAAYK,GAAIA,GAC3FV,GAAYoC,EAGnB"}
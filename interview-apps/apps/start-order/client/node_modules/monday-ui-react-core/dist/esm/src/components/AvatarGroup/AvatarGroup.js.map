{"version":3,"file":"AvatarGroup.js","sources":["../../../../../src/components/AvatarGroup/AvatarGroup.tsx"],"sourcesContent":["import React, { ReactElement, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { AvatarProps } from \"../Avatar/Avatar\";\nimport AvatarGroupCounter from \"./AvatarGroupCounter\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport { AvatarSize, AvatarType } from \"../Avatar/AvatarConstants\";\nimport { CounterColor } from \"../Counter/CounterConstants\";\nimport { avatarOnClick } from \"./AvatarGroupHelper\";\nimport { TooltipProps } from \"../Tooltip/Tooltip\";\nimport styles from \"./AvatarGroup.module.scss\";\n\nexport type AvatarGroupCounterVisualProps = {\n  color?: CounterColor.LIGHT | CounterColor.DARK;\n  count?: number;\n  prefix?: string;\n  maxDigits?: number;\n  ariaLabelItemsName?: string;\n  noAnimation?: boolean;\n};\n\nexport interface AvatarGroupProps extends VibeComponentProps {\n  avatarClassName?: string;\n  /**\n   * Array of `Avatar` components\n   */\n  children?: ReactElement<AvatarProps> | ReactElement<AvatarProps>[];\n  size?: AvatarSize;\n  type?: AvatarType;\n  max?: number;\n  /**\n   * 4 `Counter.props` for customization + ariaLabelItemsName for specifying the \"items\" name in aria label\n   */\n  counterProps?: AvatarGroupCounterVisualProps;\n  /**\n   * `Tooltip.props`: props for custom counter tooltip\n   */\n  counterTooltipCustomProps?: Partial<TooltipProps>;\n  /**\n   * Using counter default tooltip virtualized list for rendering only visible items (performance optimization)\n   */\n  counterTooltipIsVirtualizedList?: boolean;\n  /**\n   * If true, padding will be removed from the container\n   */\n  // TODO remove this prop in the next major release, should be no padding by default\n  removePadding?: boolean;\n  /**\n   * If true, the component will be disabled and non interactive\n   */\n  disabled?: boolean;\n}\n\nconst AvatarGroup: React.FC<AvatarGroupProps> = ({\n  className,\n  avatarClassName,\n  id,\n  children,\n  size,\n  type,\n  max = 5,\n  counterProps,\n  counterTooltipCustomProps,\n  counterTooltipIsVirtualizedList = false,\n  removePadding = false,\n  disabled\n}) => {\n  const { displayAvatars, counterTooltipAvatars } = useMemo(() => {\n    if (!children) {\n      return {};\n    }\n    const childrenArray = Array.isArray(children) ? children : [children];\n    return {\n      displayAvatars: childrenArray.slice(0, max).map((avatar, index) => {\n        return React.cloneElement(avatar, {\n          key: index,\n          ...avatar?.props,\n          size: size || avatar?.props?.size,\n          type: type || avatar?.props?.type,\n          className: cx(styles.avatarContainer, avatarClassName),\n          onClick: (event: React.MouseEvent | React.KeyboardEvent) => avatarOnClick(event, avatar.props),\n          disabled\n        });\n      }),\n      counterTooltipAvatars: childrenArray.slice(max)\n    };\n  }, [avatarClassName, children, disabled, max, size, type]);\n\n  if (!children) {\n    return null;\n  }\n\n  return (\n    <div className={cx(styles.avatarGroupContainer, className, { [styles.noPadding]: removePadding })} id={id}>\n      {displayAvatars}\n      <AvatarGroupCounter\n        counterTooltipAvatars={counterTooltipAvatars}\n        counterProps={counterProps}\n        counterTooltipCustomProps={counterTooltipCustomProps}\n        counterTooltipIsVirtualizedList={counterTooltipIsVirtualizedList}\n        size={size}\n        type={type}\n        disabled={disabled}\n      />\n    </div>\n  );\n};\n\nexport default AvatarGroup;\n"],"names":["AvatarGroup","_ref","className","avatarClassName","id","children","size","type","_ref$max","max","counterProps","counterTooltipCustomProps","_ref$counterTooltipIs","counterTooltipIsVirtualizedList","_ref$removePadding","removePadding","disabled","_useMemo","useMemo","childrenArray","Array","isArray","displayAvatars","slice","map","avatar","index","React","cloneElement","key","props","_a","_b","cx","styles","avatarContainer","onClick","event","avatarOnClick","counterTooltipAvatars","createElement","avatarGroupContainer","_defineProperty","noPadding","AvatarGroupCounter"],"mappings":"uRAoDA,IAAMA,EAA0C,SAA/BC,GAaZ,IAZHC,EAASD,EAATC,UACAC,EAAeF,EAAfE,gBACAC,EAAEH,EAAFG,GACAC,EAAQJ,EAARI,SACAC,EAAIL,EAAJK,KACAC,EAAIN,EAAJM,KAAIC,EAAAP,EACJQ,IAAAA,OAAM,IAAHD,EAAG,EAACA,EACPE,EAAYT,EAAZS,aACAC,EAAyBV,EAAzBU,0BAAyBC,EAAAX,EACzBY,gCAAAA,OAAkC,IAAHD,GAAQA,EAAAE,EAAAb,EACvCc,cAAAA,OAAgB,IAAHD,GAAQA,EACrBE,EAAQf,EAARe,SAEAC,EAAkDC,GAAQ,WACxD,IAAKb,EACH,MAAO,GAET,IAAMc,EAAgBC,MAAMC,QAAQhB,GAAYA,EAAW,CAACA,GAC5D,MAAO,CACLiB,eAAgBH,EAAcI,MAAM,EAAGd,GAAKe,KAAI,SAACC,EAAQC,WACvD,OAAOC,EAAMC,aAAaH,+BACxBI,IAAKH,GACFD,aAAA,EAAAA,EAAQK,OAAK,CAChBxB,KAAMA,YAAQyB,EAAAN,aAAA,EAAAA,EAAQK,4BAAOxB,MAC7BC,KAAMA,YAAQyB,EAAAP,aAAA,EAAAA,EAAQK,4BAAOvB,MAC7BL,UAAW+B,EAAGC,EAAOC,gBAAiBhC,GACtCiC,QAAS,SAACC,GAA6C,OAAKC,EAAcD,EAAOZ,EAAOK,MAAM,EAC9Fd,SAAAA,IAEJ,IACAuB,sBAAuBpB,EAAcI,MAAMd,GAE/C,GAAG,CAACN,EAAiBE,EAAUW,EAAUP,EAAKH,EAAMC,IAnB5Ce,EAAcL,EAAdK,eAAgBiB,EAAqBtB,EAArBsB,sBAqBxB,OAAKlC,EAKHsB,EAAKa,cAAA,MAAA,CAAAtC,UAAW+B,EAAGC,EAAOO,qBAAsBvC,EAASwC,KAAKR,EAAOS,UAAY5B,IAAkBX,GAAIA,GACpGkB,EACDK,EAAAa,cAACI,EAAkB,CACjBL,sBAAuBA,EACvB7B,aAAcA,EACdC,0BAA2BA,EAC3BE,gCAAiCA,EACjCP,KAAMA,EACNC,KAAMA,EACNS,SAAUA,KAbP,IAiBX"}
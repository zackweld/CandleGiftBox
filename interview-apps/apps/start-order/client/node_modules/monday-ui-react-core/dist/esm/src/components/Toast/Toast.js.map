{"version":3,"file":"Toast.js","sources":["../../../../../src/components/Toast/Toast.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC, ReactElement, useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { CSSTransition } from \"react-transition-group\";\nimport Button from \"../../components/Button/Button\";\nimport { IconSubComponentProps } from \"../Icon/Icon\";\nimport Text from \"../Text/Text\";\nimport Loader from \"../Loader/Loader\";\nimport Flex from \"../Flex/Flex\";\nimport CloseSmall from \"../Icon/Icons/components/CloseSmall\";\nimport ToastLink from \"./ToastLink/ToastLink\";\nimport ToastButton from \"./ToastButton/ToastButton\";\nimport { ToastAction, ToastActionType, ToastType } from \"./ToastConstants\";\nimport { getIcon } from \"./ToastHelpers\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { withStaticProps, VibeComponentProps } from \"../../types\";\nimport styles from \"./Toast.module.scss\";\nimport IconButton from \"../IconButton/IconButton\";\n\nexport interface ToastProps extends VibeComponentProps {\n  actions?: ToastAction[];\n  /** If true, Toast is open (visible) */\n  open?: boolean;\n  loading?: boolean;\n  type?: ToastType;\n  /** Possible to override the default icon */\n  icon?: string | React.FC<IconSubComponentProps> | null;\n  /** If true, won't show the icon */\n  hideIcon?: boolean;\n  /** The action to display */\n  action?: JSX.Element;\n  /** If false, won't show the close button */\n  closeable?: boolean;\n  onClose?: () => void;\n  /** The number of milliseconds to wait before\n   * automatically closing the Toast\n   * (0 or null cancels this behaviour) */\n  autoHideDuration?: number;\n  children?: ReactElement | ReactElement[] | string;\n  closeButtonAriaLabel?: string;\n}\n\nconst Toast: FC<ToastProps> & { types?: typeof ToastType; actionTypes?: typeof ToastActionType } = ({\n  open = false,\n  loading = false,\n  autoHideDuration = null,\n  type = ToastType.NORMAL,\n  icon,\n  hideIcon = false,\n  action: deprecatedAction,\n  actions,\n  children,\n  closeable = true,\n  onClose = NOOP,\n  className,\n  id,\n  closeButtonAriaLabel = \"Close\",\n  \"data-testid\": dataTestId\n}) => {\n  const toastLinks = useMemo(() => {\n    return actions\n      ? actions\n          .filter(action => action.type === ToastActionType.LINK)\n          .map(({ type: _type, ...otherProps }) => (\n            <ToastLink key={otherProps.href} className={styles.actionLink} {...otherProps} />\n          ))\n      : null;\n  }, [actions]);\n\n  const toastButtons: JSX.Element[] | null = useMemo(() => {\n    return actions\n      ? actions\n          .filter(action => action.type === ToastActionType.BUTTON)\n          .map(({ type: _type, content, ...otherProps }, index) => (\n            <ToastButton key={`alert-button-${index}`} className={styles.actionButton} {...otherProps}>\n              {content}\n            </ToastButton>\n          ))\n      : null;\n  }, [actions]);\n\n  const classNames = useMemo(\n    () => cx(styles.toast, getStyle(styles, camelCase(\"type-\" + type)), className),\n    [type, className]\n  );\n\n  const handleClose = useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n\n  /* Timer */\n  const timerAutoHide = useRef<NodeJS.Timeout>();\n  const setAutoHideTimer = useCallback(\n    (duration: number) => {\n      if (!onClose || duration == null) {\n        return;\n      }\n\n      clearTimeout(timerAutoHide.current);\n      timerAutoHide.current = setTimeout(() => {\n        handleClose();\n      }, duration);\n    },\n    [handleClose, onClose]\n  );\n\n  useEffect(() => {\n    if (open && autoHideDuration > 0) {\n      setAutoHideTimer(autoHideDuration);\n    }\n\n    return () => {\n      clearTimeout(timerAutoHide.current);\n    };\n  }, [open, autoHideDuration, setAutoHideTimer]);\n\n  const iconElement = !hideIcon && getIcon(type, icon);\n\n  return (\n    <CSSTransition\n      in={open}\n      classNames={{ enterActive: styles.enterActive, exitActive: styles.exitActive }}\n      timeout={400}\n      unmountOnExit\n    >\n      <Text\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TOAST, id)}\n        type={Text.types.TEXT2}\n        element=\"div\"\n        color={Text.colors.FIXED_LIGHT}\n        className={classNames}\n        role=\"alert\"\n        aria-live=\"polite\"\n      >\n        {iconElement && <div className={cx(styles.icon)}>{iconElement}</div>}\n        <Flex align={Flex.align.CENTER} gap={Flex.gaps.LARGE} className={styles.content}>\n          <Flex\n            gap={Flex.gaps.MEDIUM}\n            data-testid={getTestId(ComponentDefaultTestId.TOAST_CONTENT)}\n            className={styles.textContent}\n          >\n            <span>{children}</span>\n            {toastLinks}\n          </Flex>\n          {(toastButtons || deprecatedAction) && (toastButtons || deprecatedAction)}\n          {loading && <Loader size={Loader.sizes.XS} />}\n        </Flex>\n        {closeable && (\n          <IconButton\n            className={cx(styles.closeButton)}\n            onClick={handleClose}\n            size={Button.sizes.SMALL}\n            kind={Button.kinds.TERTIARY}\n            color={Button.colors.FIXED_LIGHT}\n            ariaLabel={closeButtonAriaLabel}\n            data-testid={getTestId(ComponentDefaultTestId.TOAST_CLOSE_BUTTON)}\n            icon={CloseSmall}\n            hideTooltip\n          />\n        )}\n      </Text>\n    </CSSTransition>\n  );\n};\n\nexport default withStaticProps(Toast, {\n  types: ToastType,\n  actionTypes: ToastActionType\n});\n"],"names":["withStaticProps","_ref","_ref$open","open","_ref$loading","loading","_ref$autoHideDuration","autoHideDuration","_ref$type","type","ToastType","NORMAL","icon","_ref$hideIcon","hideIcon","deprecatedAction","action","actions","children","_ref$closeable","closeable","_ref$onClose","onClose","NOOP","className","id","_ref$closeButtonAriaL","closeButtonAriaLabel","dataTestId","toastLinks","useMemo","filter","ToastActionType","LINK","map","_a","otherProps","__rest","React","createElement","ToastLink","key","href","styles","actionLink","toastButtons","BUTTON","index","content","ToastButton","Object","assign","concat","actionButton","classNames","cx","toast","getStyle","camelCase","handleClose","useCallback","timerAutoHide","useRef","setAutoHideTimer","duration","clearTimeout","current","setTimeout","useEffect","iconElement","getIcon","CSSTransition","in","enterActive","exitActive","timeout","unmountOnExit","Text","getTestId","ComponentDefaultTestId","TOAST","types","TEXT2","element","color","colors","FIXED_LIGHT","role","Flex","align","CENTER","gap","gaps","LARGE","MEDIUM","TOAST_CONTENT","textContent","Loader","size","sizes","XS","IconButton","closeButton","onClick","Button","SMALL","kind","kinds","TERTIARY","ariaLabel","TOAST_CLOSE_BUTTON","CloseSmall","hideTooltip","actionTypes"],"mappings":"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"}
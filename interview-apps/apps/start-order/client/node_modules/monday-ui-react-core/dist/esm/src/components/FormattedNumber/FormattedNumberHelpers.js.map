{"version":3,"file":"FormattedNumberHelpers.js","sources":["../../../../../src/components/FormattedNumber/FormattedNumberHelpers.ts"],"sourcesContent":["export const validateValue = (value: number | string): boolean => {\n  const isNullOrUndefined = value === null || value === undefined;\n  const isEmptyStringWithSpaces = typeof value === \"string\" && !value.replace(\" \", \"\").length;\n  return isNullOrUndefined || isNaN(Number(value)) || isEmptyStringWithSpaces;\n};\n\nconst range =\n  (min: number, max: number) => (props: Record<string, number>, propName: string, componentName: string) => {\n    if (props[propName] < min || props[propName] > max) {\n      return new Error(\n        `Invalid prop ${propName} supplied to ${componentName}. ${propName} should be between ${min} to ${max}.`\n      );\n    }\n  };\n\nexport const customPropTypes = Object.freeze({\n  range\n});\n"],"names":["validateValue","value","isNullOrUndefined","isEmptyStringWithSpaces","replace","length","isNaN","Number","Object","freeze","range","min","max","props","propName","componentName","Error","concat"],"mappings":"IAAaA,EAAgB,SAACC,GAC5B,IAAMC,EAAoBD,QACpBE,EAA2C,iBAAVF,IAAuBA,EAAMG,QAAQ,IAAK,IAAIC,OACrF,OAAOH,GAAqBI,MAAMC,OAAON,KAAWE,CACtD,EAW+BK,OAAOC,OAAO,CAC3CC,MATA,SAACC,EAAaC,GAAW,OAAK,SAACC,EAA+BC,EAAkBC,GAC9E,GAAsBJ,EAAlBE,EAAMC,IAAmBD,EAAMC,GAAYF,EAC7C,OAAWI,MAAKC,gBAAAA,OACEH,EAAQ,iBAAAG,OAAgBF,EAAa,MAAAE,OAAKH,EAAQG,uBAAAA,OAAsBN,UAAGM,OAAOL,EAAG,MAG1G"}
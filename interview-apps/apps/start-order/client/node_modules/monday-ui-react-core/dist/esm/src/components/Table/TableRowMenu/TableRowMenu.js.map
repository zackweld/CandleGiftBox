{"version":3,"file":"TableRowMenu.js","sources":["../../../../../../src/components/Table/TableRowMenu/TableRowMenu.tsx"],"sourcesContent":["import React, { forwardRef, useCallback } from \"react\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport styles from \"./TableRowMenu.module.scss\";\nimport MenuButton from \"../../MenuButton/MenuButton\";\nimport { Menu } from \"../../Menu\";\nimport { createPortal } from \"react-dom\";\nimport { useTable } from \"../context/TableContext/TableContext\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport { useTableRowMenu } from \"../context/TableRowMenuContext/TableRowMenuContext\";\nimport { useTableContainer } from \"../context/TableContainerContext/TableContainerContext\";\nimport { TableMenuProps } from \"./TableRowMenu.types\";\n\nconst TableRowMenu = forwardRef(\n  (\n    { rowId, className, id, \"data-testid\": dataTestId, children }: TableMenuProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const { menuContainerRef } = useTableContainer();\n    const { size } = useTable();\n    const {\n      hoveredRowId,\n      setTableMenuHidden,\n      setTableMenuShown,\n      menuButtonPosition,\n      onMouseOverRowMenu,\n      onMouseLeaveRowMenu\n    } = useTableRowMenu();\n\n    const onMenuHide = useCallback(() => {\n      setTableMenuHidden();\n    }, [setTableMenuHidden]);\n\n    const onMenuShow = useCallback(() => {\n      setTableMenuShown();\n    }, [setTableMenuShown]);\n\n    const shouldShowMenu = menuContainerRef.current && hoveredRowId && hoveredRowId === rowId;\n    if (!shouldShowMenu) return null;\n\n    return (\n      <>\n        {createPortal(\n          <div\n            className={cx(styles.rowMenuContainer, getStyle(styles, size))}\n            style={{ top: menuButtonPosition }}\n            onMouseOver={onMouseOverRowMenu}\n            onMouseLeave={onMouseLeaveRowMenu}\n          >\n            <MenuButton\n              id={id}\n              ref={ref}\n              className={cx(styles.tableMenu, className)}\n              size={MenuButton.sizes.XS}\n              onMenuHide={onMenuHide}\n              onMenuShow={onMenuShow}\n              data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_ROW_MENU, id)}\n            >\n              <Menu>{children}</Menu>\n            </MenuButton>\n          </div>,\n          menuContainerRef.current\n        )}\n      </>\n    );\n  }\n);\n\nexport default TableRowMenu;\n"],"names":["TableRowMenu","forwardRef","_ref","ref","rowId","className","id","dataTestId","children","menuContainerRef","useTableContainer","size","useTable","_useTableRowMenu","useTableRowMenu","hoveredRowId","setTableMenuHidden","setTableMenuShown","menuButtonPosition","onMouseOverRowMenu","onMouseLeaveRowMenu","onMenuHide","useCallback","onMenuShow","current","React","createElement","Fragment","createPortal","cx","styles","rowMenuContainer","getStyle","style","top","onMouseOver","onMouseLeave","MenuButton","tableMenu","sizes","XS","getTestId","ComponentDefaultTestId","TABLE_ROW_MENU","Menu"],"mappings":"65BAcMA,IAAAA,EAAeC,GACnB,SAAAC,EAEEC,GACE,IAFAC,EAAKF,EAALE,MAAOC,EAASH,EAATG,UAAWC,EAAEJ,EAAFI,GAAmBC,EAAUL,EAAzB,eAA2BM,EAAQN,EAARM,SAG3CC,EAAqBC,IAArBD,iBACAE,EAASC,IAATD,KACRE,EAOIC,IANFC,EAAYF,EAAZE,aACAC,EAAkBH,EAAlBG,mBACAC,EAAiBJ,EAAjBI,kBACAC,EAAkBL,EAAlBK,mBACAC,EAAkBN,EAAlBM,mBACAC,EAAmBP,EAAnBO,oBAGIC,EAAaC,GAAY,WAC7BN,GACF,GAAG,CAACA,IAEEO,EAAaD,GAAY,WAC7BL,GACF,GAAG,CAACA,IAGJ,OADuBR,EAAiBe,SAAWT,GAAgBA,IAAiBX,EAIlFqB,EAAAC,cAAAD,EAAAE,SAAA,KACGC,EACCH,uBACEpB,UAAWwB,EAAGC,EAAOC,iBAAkBC,EAASF,EAAQnB,IACxDsB,MAAO,CAAEC,IAAKhB,GACdiB,YAAahB,EACbiB,aAAchB,GAEdK,EAACC,cAAAW,GACC/B,GAAIA,EACJH,IAAKA,EACLE,UAAWwB,EAAGC,EAAOQ,UAAWjC,GAChCM,KAAM0B,EAAWE,MAAMC,GACvBnB,WAAYA,EACZE,WAAYA,EACC,cAAAhB,GAAckC,EAAUC,EAAuBC,eAAgBrC,IAE5EmB,EAAAC,cAACkB,EAAI,KAAEpC,KAGXC,EAAiBe,UAvBK,IA2B9B"}
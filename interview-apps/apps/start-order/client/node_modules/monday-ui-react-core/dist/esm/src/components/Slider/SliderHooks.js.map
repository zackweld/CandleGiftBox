{"version":3,"file":"SliderHooks.js","sources":["../../../../../src/components/Slider/SliderHooks.ts"],"sourcesContent":["import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport useResizeObserver from \"../../hooks/useResizeObserver\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport { UPDATE_SLIDER_SIZE_DEBOUNCE } from \"./SliderConstants\";\nimport { ensureValueText } from \"./SliderHelpers\";\n\nfunction _useIsStateControlledFromOutside(value: number | number[]): boolean {\n  const [isControlled] = useState(typeof value !== \"undefined\");\n  return isControlled;\n}\n\nfunction _useSliderValue(\n  defaultValue: number | number[],\n  isControlled: boolean,\n  value: number | number[]\n): [number | number[], (value: number | number[]) => void] {\n  const initialValue = isControlled ? value : defaultValue;\n  const [internalStateValue, setInternalStateValue] = useState(initialValue);\n  if (isControlled) {\n    return [value as number, NOOP];\n  }\n  return [internalStateValue, setInternalStateValue];\n}\n\nexport function useSliderActionsContextValue(\n  actualValue: number | number[],\n  focused: number,\n  getDragging: () => number,\n  getSelectedValue: () => number | number[],\n  max: number,\n  min: number,\n  onChange: (value: number | number[]) => void,\n  ranged: boolean,\n  setActive: (value: number) => void,\n  setFocused: (value: number) => void,\n  setDragging: (value: number) => void,\n  setSelectedValue: (value: number | number[]) => void,\n  step: number\n) {\n  const _changeValueOrValues = useCallback(\n    (newValueOrValues: number | number[]) => {\n      setSelectedValue(newValueOrValues);\n      if (typeof onChange === \"function\") {\n        onChange(newValueOrValues);\n      }\n    },\n    [setSelectedValue, onChange]\n  );\n\n  const _validateValue = useCallback(\n    (index: number, newValue: number | number[] | string): number => {\n      if (newValue === \"\" || Number.isNaN(Number(newValue))) {\n        return index === 1 ? max : min;\n      }\n      if (newValue > max) {\n        return max;\n      }\n      if (newValue < min) {\n        return min;\n      }\n      return newValue as number;\n    },\n    [min, max]\n  );\n\n  const _calculateNewValues = useCallback(\n    (thumb: { index: number; newValue: number | number[] | string }): number[] => {\n      const [startValue, endValue] = [...(getSelectedValue() as number[])];\n      if (thumb.index === 1) {\n        return [startValue, _validateValue(thumb.index, thumb.newValue)];\n      }\n      return [_validateValue(thumb.index, thumb.newValue), endValue];\n    },\n    [_validateValue, getSelectedValue]\n  );\n\n  const _manageRangedValues = useCallback(\n    (thumb: { index: number; newValue: number | number[] | string }, switchCb: (value: number) => void = NOOP) => {\n      const [startValue, endValue] = _calculateNewValues(thumb);\n      if (startValue < endValue) {\n        // no need to switch, same thumb stay active\n        return [startValue, endValue];\n      }\n      // switch active thumb + end and start values\n      switchCb(thumb.index === 0 ? 1 : 0);\n      return [endValue, startValue];\n    },\n    [_calculateNewValues]\n  );\n\n  const _switchDraggingThumb = useCallback(\n    (switchTo: number) => {\n      setActive(switchTo);\n      setFocused(switchTo);\n      setDragging(switchTo);\n    },\n    [setActive, setFocused, setDragging]\n  );\n\n  const changeThumbValue = useCallback(\n    (newValue: number | string, thumbIndex: number = undefined, cancelFocus = false) => {\n      if (!ranged) {\n        _changeValueOrValues(_validateValue(null, newValue));\n        return;\n      }\n      const currentThumb = { newValue, index: thumbIndex ?? focused };\n      const switchCb = cancelFocus ? NOOP : setFocused;\n      const newValues = _manageRangedValues(currentThumb, switchCb);\n      _changeValueOrValues(newValues);\n    },\n    [_changeValueOrValues, _manageRangedValues, _validateValue, focused, ranged, setFocused]\n  );\n\n  const drugThumb = useCallback(\n    (newValue: number | number[]) => {\n      if (!ranged) {\n        _changeValueOrValues(_validateValue(null, newValue));\n        return;\n      }\n      const currentThumb = { newValue, index: getDragging() ?? 0 };\n      const newValues = _manageRangedValues(currentThumb, _switchDraggingThumb);\n      _changeValueOrValues(newValues);\n    },\n    [_changeValueOrValues, _manageRangedValues, _switchDraggingThumb, _validateValue, getDragging, ranged]\n  );\n\n  const decreaseValue = useCallback(\n    (consumerStep: number) => {\n      const currentValue = ranged ? (actualValue as number[])[focused] : (actualValue as number);\n      if (currentValue === min) {\n        return;\n      }\n      const finalStep = consumerStep || step;\n      const newValue = currentValue - finalStep;\n      changeThumbValue(newValue);\n    },\n    [actualValue, changeThumbValue, focused, min, ranged, step]\n  );\n\n  const increaseValue = useCallback(\n    (consumerStep?: number) => {\n      const currentValue = ranged ? (actualValue as number[])[focused] : (actualValue as number);\n      if (currentValue === max) {\n        return;\n      }\n      const finalStep = consumerStep || step;\n      const newValue = currentValue + finalStep;\n      changeThumbValue(newValue);\n    },\n    [actualValue, changeThumbValue, focused, max, ranged, step]\n  );\n\n  return useMemo(\n    () => ({\n      changeThumbValue,\n      decreaseValue,\n      drugThumb,\n      increaseValue,\n      setActive,\n      setDragging,\n      setFocused\n    }),\n    [changeThumbValue, decreaseValue, drugThumb, increaseValue, setActive, setDragging, setFocused]\n  );\n}\n\nexport function useDragging(): [number, (value: number) => void, () => number] {\n  const [dragging, setStateDragging] = useState<number>(null);\n  const draggingRef = useRef(null);\n\n  const setDragging = useCallback(\n    (index: number) => {\n      setStateDragging(index);\n      draggingRef.current = index;\n    },\n    [setStateDragging, draggingRef]\n  );\n  const getDragging = useCallback(() => draggingRef.current, [draggingRef]);\n  return [dragging, setDragging, getDragging];\n}\n\nexport function useSliderRail() {\n  const railRef = useRef(null);\n  const [railCoords, setRailCoords] = useState({ left: 0, right: 100, width: 100 });\n\n  const defineRailCoords = useCallback(() => {\n    if (!railRef.current) {\n      return;\n    }\n    const railRect = railRef.current.getBoundingClientRect();\n    const { left, right, width } = railRect;\n    setRailCoords({ left, right, width });\n  }, [railRef, setRailCoords]);\n\n  useResizeObserver({\n    ref: railRef,\n    callback: defineRailCoords,\n    debounceTime: UPDATE_SLIDER_SIZE_DEBOUNCE\n  });\n\n  useEffect(() => {\n    defineRailCoords();\n  }, [defineRailCoords]);\n\n  return { railCoords, railRef };\n}\n\nexport function useSliderValues(\n  defaultValue: number | number[],\n  value: number | number[],\n  valueFormatter: (value: number) => string,\n  valueText: string\n): {\n  actualValue: number | number[];\n  actualValueText: string | string[];\n  getSelectedValue: () => number | number[];\n  isControlled: boolean;\n  setSelectedValue: (value: number) => void;\n} {\n  const isControlled = _useIsStateControlledFromOutside(value);\n  const [actualValue, setStateSelectedValue] = _useSliderValue(defaultValue, isControlled, value);\n  const valueRef = useRef(actualValue);\n\n  // Update ref when actualValue was changed from outside in controlled mode\n  useEffect(() => {\n    if (isControlled && valueRef.current !== actualValue) {\n      valueRef.current = actualValue;\n    }\n  }, [isControlled, actualValue]);\n\n  const setSelectedValue = useCallback(\n    (newValue: number) => {\n      setStateSelectedValue(newValue);\n      valueRef.current = newValue;\n    },\n    [valueRef, setStateSelectedValue]\n  );\n\n  const getSelectedValue = () => valueRef.current;\n\n  const actualValueText = ensureValueText(valueText, actualValue, valueFormatter);\n  return { actualValue, actualValueText, getSelectedValue, isControlled, setSelectedValue };\n}\n"],"names":["useSliderActionsContextValue","actualValue","focused","getDragging","getSelectedValue","max","min","onChange","ranged","setActive","setFocused","setDragging","setSelectedValue","step","_changeValueOrValues","useCallback","newValueOrValues","_validateValue","index","newValue","Number","isNaN","_calculateNewValues","thumb","_ref","_toConsumableArray","endValue","_manageRangedValues","switchCb","arguments","length","undefined","NOOP","_calculateNewValues2","_calculateNewValues3","_slicedToArray","startValue","_switchDraggingThumb","switchTo","changeThumbValue","thumbIndex","newValues","drugThumb","currentThumb","_a","decreaseValue","consumerStep","currentValue","increaseValue","useMemo","useDragging","_useState5","useState","_useState6","dragging","setStateDragging","draggingRef","useRef","current","useSliderRail","railRef","_useState7","left","right","width","_useState8","railCoords","setRailCoords","defineRailCoords","railRect","getBoundingClientRect","useResizeObserver","ref","callback","debounceTime","UPDATE_SLIDER_SIZE_DEBOUNCE","useEffect","useSliderValues","defaultValue","value","valueFormatter","valueText","isControlled","_useState","_useIsStateControlledFromOutside","_useSliderValue2","_useState3","_useState4","_useSliderValue","_useSliderValue3","setStateSelectedValue","valueRef","actualValueText","ensureValueText"],"mappings":"6ZAwBM,SAAUA,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAuBC,GAC3B,SAACC,GACCJ,EAAiBI,GACO,mBAAbT,GACTA,EAASS,EAEb,GACA,CAACJ,EAAkBL,IAGfU,EAAiBF,GACrB,SAACG,EAAeC,GACd,MAAiB,KAAbA,GAAmBC,OAAOC,MAAMD,OAAOD,IACxB,IAAVD,EAAcb,EAAMC,EAEzBa,EAAWd,EACNA,EAEMC,EAAXa,EACKb,EAEFa,CACT,GACA,CAACb,EAAKD,IAGFiB,EAAsBP,GAC1B,SAACQ,GACC,IAAAC,EAAAC,EAAoCrB,KAAjBsB,EAAQF,EAAA,GAC3B,OAAoB,IAAhBD,EAAML,MACD,CAFQM,EAAA,GAEKP,EAAeM,EAAML,MAAOK,EAAMJ,WAEjD,CAACF,EAAeM,EAAML,MAAOK,EAAMJ,UAAWO,EACvD,GACA,CAACT,EAAgBb,IAGbuB,EAAsBZ,GAC1B,SAACQ,GAA4G,IAA5CK,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAoCG,EACnGC,EAA+BX,EAAoBC,GAAMW,EAAAC,EAAAF,EAAA,GAAlDG,EAAUF,EAAA,GAAER,EAAQQ,EAAA,GAC3B,OAAiBR,EAAbU,EAEK,CAACA,EAAYV,IAGtBE,EAAyB,IAAhBL,EAAML,MAAc,EAAI,GAC1B,CAACQ,EAAUU,GACpB,GACA,CAACd,IAGGe,EAAuBtB,GAC3B,SAACuB,GACC7B,EAAU6B,GACV5B,EAAW4B,GACX3B,EAAY2B,EACb,GACD,CAAC7B,EAAWC,EAAYC,IAGpB4B,EAAmBxB,GACvB,SAACI,GAAkF,IAAvDqB,EAAqBX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QAAAE,EAC/C,GAAKvB,EAAL,CAIA,IAEMiC,EAAYd,EAFG,CAAER,SAAAA,EAAUD,MAAOsB,QAAAA,EAActC,GALe2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAMtCG,EAAOtB,GAEtCI,EAAqB2B,EAJpB,MAFC3B,EAAqBG,EAAe,KAAME,GAO9C,GACA,CAACL,EAAsBa,EAAqBV,EAAgBf,EAASM,EAAQE,IAGzEgC,EAAY3B,GAChB,SAACI,SACC,GAAKX,EAAL,CAIA,IAAMmC,EAAe,CAAExB,SAAAA,EAAUD,MAAwB,QAAjB0B,EAAAzC,WAAiB,IAAAyC,EAAAA,EAAA,GACnDH,EAAYd,EAAoBgB,EAAcN,GACpDvB,EAAqB2B,EAHpB,MAFC3B,EAAqBG,EAAe,KAAME,GAM9C,GACA,CAACL,EAAsBa,EAAqBU,EAAsBpB,EAAgBd,EAAaK,IAG3FqC,EAAgB9B,GACpB,SAAC+B,GACC,IAAMC,EAAevC,EAAUP,EAAyBC,GAAYD,EAChE8C,IAAiBzC,GAKrBiC,EADiBQ,GADCD,GAAgBjC,GAGpC,GACA,CAACZ,EAAasC,EAAkBrC,EAASI,EAAKE,EAAQK,IAGlDmC,EAAgBjC,GACpB,SAAC+B,GACC,IAAMC,EAAevC,EAAUP,EAAyBC,GAAYD,EAChE8C,IAAiB1C,GAKrBkC,EADiBQ,GADCD,GAAgBjC,GAGpC,GACA,CAACZ,EAAasC,EAAkBrC,EAASG,EAAKG,EAAQK,IAGxD,OAAOoC,GACL,WAAA,MAAO,CACLV,iBAAAA,EACAM,cAAAA,EACAH,UAAAA,EACAM,cAAAA,EACAvC,UAAAA,EACAE,YAAAA,EACAD,WAAAA,EACD,GACD,CAAC6B,EAAkBM,EAAeH,EAAWM,EAAevC,EAAWE,EAAaD,GAExF,UAEgBwC,IACd,IAAAC,EAAqCC,EAAiB,MAAKC,EAAAlB,EAAAgB,EAAA,GAApDG,EAAQD,EAAA,GAAEE,EAAgBF,EAAA,GAC3BG,EAAcC,EAAO,MAU3B,MAAO,CAACH,EARYvC,GAClB,SAACG,GACCqC,EAAiBrC,GACjBsC,EAAYE,QAAUxC,CACxB,GACA,CAACqC,EAAkBC,IAEDzC,GAAY,WAAA,OAAMyC,EAAYE,UAAS,CAACF,IAE9D,UAEgBG,IACd,IAAMC,EAAUH,EAAO,MACvBI,EAAoCT,EAAS,CAAEU,KAAM,EAAGC,MAAO,IAAKC,MAAO,MAAMC,EAAA9B,EAAA0B,EAAA,GAA1EK,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,EAAmBrD,GAAY,WACnC,GAAK6C,EAAQF,QAAb,CAGA,IAAMW,EAAWT,EAAQF,QAAQY,wBAEjCH,EAAc,CAAEL,KADeO,EAAvBP,KACcC,MADSM,EAAjBN,MACeC,MADEK,EAAVL,OAFpB,CAIH,GAAG,CAACJ,EAASO,IAYb,OAVAI,EAAkB,CAChBC,IAAKZ,EACLa,SAAUL,EACVM,aAAcC,IAGhBC,GAAU,WACRR,GACF,GAAG,CAACA,IAEG,CAAEF,WAAAA,EAAYN,QAAAA,EACvB,CAEM,SAAUiB,EACdC,EACAC,EACAC,EACAC,GAQA,IAAMC,EArNR,SAA0CH,GACxC,IAAAI,EAAuB/B,OAA0B,IAAV2B,GACvC,OAD6D5C,EAAAgD,EAAA,GAA1C,EAErB,CAkNuBC,CAAiCL,GACtDM,EAjNF,SACEP,EACAI,EACAH,GAEA,IACAO,EAAoDlC,EAD/B8B,EAAeH,EAAQD,GAC8BS,EAAApD,EAAAmD,EAAA,GAC1E,OAAIJ,EACK,CAACH,EAAiB/C,GAEpB,CAJkBuD,EAAA,GAAuBA,EAAA,GAKlD,CAsM+CC,CAAgBV,EAAcI,EAAcH,GAAMU,EAAAtD,EAAAkD,EAAA,GAAxFpF,EAAWwF,EAAA,GAAEC,EAAqBD,EAAA,GACnCE,EAAWlC,EAAOxD,GAGxB2E,GAAU,WACJM,GAAgBS,EAASjC,UAAYzD,IACvC0F,EAASjC,QAAUzD,EAEvB,GAAG,CAACiF,EAAcjF,IAElB,IAAMW,EAAmBG,GACvB,SAACI,GACCuE,EAAsBvE,GACtBwE,EAASjC,QAAUvC,CACrB,GACA,CAACwE,EAAUD,IAKPE,EAAkBC,EAAgBZ,EAAWhF,EAAa+E,GAChE,MAAO,CAAE/E,YAAAA,EAAa2F,gBAAAA,EAAiBxF,iBAHd,WAAH,OAASuF,EAASjC,OAAO,EAGUwB,aAAAA,EAActE,iBAAAA,EACzE"}
{"version":3,"file":"TableVirtualizedBody.js","sources":["../../../../../../src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx"],"sourcesContent":["import React, { ComponentType, forwardRef, UIEventHandler, useCallback, useEffect } from \"react\";\nimport { VibeComponentProps } from \"../../../types\";\nimport TableBody from \"../TableBody/TableBody\";\nimport styles from \"./TableVirtualizedBody.module.scss\";\nimport { FixedSizeList as List, ListChildComponentProps, ScrollDirection } from \"react-window\";\nimport { useTable } from \"../context/TableContext/TableContext\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { RowHeights } from \"../Table/TableConsts\";\nimport AutoSizer, { Size as AutoSizerSize } from \"react-virtualized-auto-sizer\";\nimport { useTableRowMenu } from \"../context/TableRowMenuContext/TableRowMenuContext\";\n\nexport type TableVirtualizedRow = Record<string, unknown> & { id: string };\n\nexport interface ITableVirtualizedBodyProps<T extends TableVirtualizedRow = TableVirtualizedRow>\n  extends VibeComponentProps {\n  items: T[];\n  rowRenderer: (item: T) => JSX.Element;\n  onScroll?: (horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void;\n}\n\nconst TableVirtualizedBody = forwardRef(\n  <T extends TableVirtualizedRow = TableVirtualizedRow>(\n    { items, rowRenderer, onScroll, id, className, \"data-testid\": dataTestId }: ITableVirtualizedBodyProps<T>,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const { size, virtualizedListRef, onVirtualizedListScroll, markTableAsVirtualized } = useTable();\n    const { resetHoveredRow } = useTableRowMenu();\n\n    const onAutoSizerScroll = useCallback<UIEventHandler<HTMLDivElement>>(\n      e => {\n        resetHoveredRow();\n        onVirtualizedListScroll(e);\n      },\n      [resetHoveredRow, onVirtualizedListScroll]\n    );\n\n    useEffect(() => {\n      markTableAsVirtualized();\n    }, [markTableAsVirtualized]);\n\n    const itemRenderer = useCallback<ComponentType<ListChildComponentProps<TableVirtualizedRow>>>(\n      ({ index, style: { width: _width, ...style } }) => {\n        const currentItem = items[index];\n        const element = rowRenderer(currentItem);\n        return React.cloneElement(element, {\n          style: { ...style, ...element.props?.style },\n          key: index\n        });\n      },\n      [items, rowRenderer]\n    );\n\n    const handleVirtualizedVerticalScroll = useCallback(\n      ({\n        scrollDirection,\n        scrollOffset,\n        scrollUpdateWasRequested\n      }: {\n        scrollDirection: ScrollDirection;\n        scrollOffset: number;\n        scrollUpdateWasRequested: boolean;\n      }) => {\n        onScroll?.(scrollDirection, scrollOffset, scrollUpdateWasRequested);\n      },\n      [onScroll]\n    );\n\n    return (\n      <TableBody\n        className={cx(styles.tableBody, className)}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_VIRTUALIZED_BODY, id)}\n        ref={ref}\n      >\n        {items?.length && (\n          <AutoSizer onScroll={onAutoSizerScroll}>\n            {({ height, width }: AutoSizerSize) => (\n              <List\n                itemSize={RowHeights[size]}\n                height={height}\n                itemCount={items.length}\n                width={width}\n                onScroll={handleVirtualizedVerticalScroll}\n                outerRef={element => {\n                  virtualizedListRef.current = element;\n                }}\n              >\n                {itemRenderer}\n              </List>\n            )}\n          </AutoSizer>\n        )}\n      </TableBody>\n    );\n  }\n);\n\nexport default TableVirtualizedBody;\n"],"names":["TableVirtualizedBody","forwardRef","_ref","ref","items","rowRenderer","onScroll","id","className","dataTestId","_useTable","useTable","size","virtualizedListRef","onVirtualizedListScroll","markTableAsVirtualized","resetHoveredRow","useTableRowMenu","onAutoSizerScroll","useCallback","e","useEffect","itemRenderer","_a","index","_c","style","__rest","element","React","cloneElement","Object","assign","_b","props","key","handleVirtualizedVerticalScroll","_ref2","scrollDirection","scrollOffset","scrollUpdateWasRequested","TableBody","cx","styles","tableBody","getTestId","ComponentDefaultTestId","TABLE_VIRTUALIZED_BODY","length","createElement","AutoSizer","_ref3","List","itemSize","RowHeights","height","itemCount","width","outerRef","current"],"mappings":"0pBAsBMA,IAAAA,EAAuBC,GAC3B,SAAAC,EAEEC,GACE,IAFAC,EAAKF,EAALE,MAAOC,EAAWH,EAAXG,YAAaC,EAAQJ,EAARI,SAAUC,EAAEL,EAAFK,GAAIC,EAASN,EAATM,UAA0BC,EAAUP,EAAzB,eAG/CQ,EAAsFC,IAA9EC,EAAIF,EAAJE,KAAMC,EAAkBH,EAAlBG,mBAAoBC,EAAuBJ,EAAvBI,wBAAyBC,EAAsBL,EAAtBK,uBACnDC,EAAoBC,IAApBD,gBAEFE,EAAoBC,GACxB,SAAAC,GACEJ,IACAF,EAAwBM,EAC1B,GACA,CAACJ,EAAiBF,IAGpBO,GAAU,WACRN,GACF,GAAG,CAACA,IAEJ,IAAMO,EAAeH,GACnB,SAACI,SAAEC,EAAKD,EAALC,MAAOC,EAAAF,EAAAG,MAA2BA,EAAKC,EAAAF,EAAzB,WAETG,EAAUvB,EADID,EAAMoB,IAE1B,OAAOK,EAAMC,aAAaF,EAAS,CACjCF,MAAKK,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAON,GAAyB,QAAfO,EAAAL,EAAQM,aAAO,IAAAD,OAAA,EAAAA,EAAAP,OACrCS,IAAKX,GAET,GACA,CAACpB,EAAOC,IAGJ+B,EAAkCjB,GACtC,SAAAkB,GASE/B,SAAAA,EARe+B,EAAfC,gBACYD,EAAZE,aACwBF,EAAxBG,yBAOF,GACA,CAAClC,IAGH,OACEuB,gBAACY,EAAS,CACRjC,UAAWkC,EAAGC,EAAOC,UAAWpC,GAChCD,GAAIA,EAAE,cACOE,GAAcoC,EAAUC,EAAuBC,uBAAwBxC,GACpFJ,IAAKA,IAEJC,aAAA,EAAAA,EAAO4C,SACNnB,EAACoB,cAAAC,GAAU5C,SAAUY,IAClB,SAAAiC,GAAgB,OACftB,gBAACuB,EAAI,CACHC,SAAUC,EAAW1C,GACrB2C,OAHMJ,EAANI,OAIAC,UAAWpD,EAAM4C,OACjBS,MALaN,EAALM,MAMRnD,SAAU8B,EACVsB,SAAU,SAAA9B,GACRf,EAAmB8C,QAAU/B,CAC/B,GAECN,EAEJ,IAKX"}
{"version":3,"file":"useGridKeyboardNavigation.js","sources":["../../../../../src/hooks/useGridKeyboardNavigation/useGridKeyboardNavigation.ts"],"sourcesContent":["import { MutableRefObject, ReactElement, useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport { GridKeyboardNavigationContext } from \"../../components/GridKeyboardNavigationContext/GridKeyboardNavigationContext\";\nimport useFullKeyboardListeners, { NavDirections } from \"../../hooks/useFullKeyboardListeners\";\nimport useEventListener from \"../../hooks/useEventListener\";\nimport {\n  calcActiveIndexAfterArrowNavigation,\n  getActiveIndexFromInboundNavigation\n} from \"./gridKeyboardNavigationHelper\";\nimport { useLastNavigationDirection } from \"../../components/Menu/Menu/hooks/useLastNavigationDirection\";\n\nconst NO_ACTIVE_INDEX = -1;\n\n/**\n * A hook which is used for accessible keyboard navigation. Useful for components rendering a list of items that can be navigated and selected with a keyboard.\n * @param {Object} options\n * @param {React.MutableRefObject} options.ref - the reference for the component that listens to keyboard\n * @param {number} options.itemsCount - the number of items\n * @param {number} options.numberOfItemsInLine - the number of items on each line of the grid\n * @param {function} options.onItemClicked - the callback for selecting an item. It will be called when an active item is selected, for example with \"Enter\".\n * @param {function} options.getItemByIndex - a function which gets an index as a param, and returns the item on that index\n * @param {boolean=} options.focusOnMount - if true, the referenced element will be focused when mounted\n * @param {number=} options.focusItemIndexOnMount - optional item index to focus when mounted. Only works with \"options.focusOnMount\".\n * @param {number[]=} options.disabledIndexes - optional array of disabled indices, which will be skipped while navigating.\n * @returns {useGridKeyboardNavigationResult}\n *\n * @typedef useGridKeyboardNavigationResult\n * @property {number} activeIndex - the currently active index\n * @property {boolean} isInitialActiveState - if true, the currently active element was due to an initial mounting index option. See \"options.focusItemIndexOnMount\".\n * @property {(index: number, isKeyboardAction?: boolean) => void} onSelectionAction - the callback which should be used to select an item.\n * It should be called with the selected item's index. Use this callback for onClick handlers, for example.\n * The \"isKeyboardAction\" can be used to indicate a keyboard selection, which will affect the currently active index.\n */\nexport default function useGridKeyboardNavigation({\n  ref,\n  itemsCount,\n  numberOfItemsInLine,\n  onItemClicked, // the callback to call when an item is selected\n  getItemByIndex = (_index: number) => {},\n  focusOnMount = false,\n  focusItemIndexOnMount = NO_ACTIVE_INDEX,\n  disabledIndexes = []\n}: {\n  ref: MutableRefObject<HTMLElement>;\n  itemsCount: number;\n  numberOfItemsInLine: number;\n  onItemClicked: (element: HTMLElement | ReactElement | void | string, index: number) => void;\n  getItemByIndex: (index: number | void) => HTMLElement | ReactElement | void | string;\n  focusOnMount?: boolean;\n  focusItemIndexOnMount?: number;\n  disabledIndexes?: number[];\n}) {\n  const [isInitialActiveState, setIsInitialActiveState] = useState(\n    focusOnMount && focusItemIndexOnMount !== NO_ACTIVE_INDEX\n  );\n  const skippedInitialActiveIndexChange = useRef(false);\n  const [activeIndex, setActiveIndex] = useState(isInitialActiveState ? focusItemIndexOnMount : NO_ACTIVE_INDEX);\n  const [isUsingKeyboardNav, setIsUsingKeyboardNav] = useState(true);\n\n  const keyboardContext = useContext(GridKeyboardNavigationContext);\n\n  const onArrowNavigation = (direction: NavDirections) => {\n    setIsUsingKeyboardNav(true);\n    if (activeIndex === NO_ACTIVE_INDEX) {\n      setActiveIndex(0);\n      return;\n    }\n\n    const { isOutbound, nextIndex } = calcActiveIndexAfterArrowNavigation({\n      activeIndex,\n      itemsCount,\n      numberOfItemsInLine,\n      direction,\n      disabledIndexes\n    });\n    if (isOutbound) {\n      keyboardContext?.onOutboundNavigation(ref, direction);\n    } else {\n      setActiveIndex(nextIndex);\n    }\n  };\n\n  useEffect(() => {\n    if (!skippedInitialActiveIndexChange.current) {\n      skippedInitialActiveIndexChange.current = true;\n      return;\n    }\n    // if the active state changes, this is no longer the initial active state\n    setIsInitialActiveState(false);\n  }, [activeIndex]);\n\n  const blurTargetElement = useCallback(() => ref.current?.blur(), [ref]);\n\n  const { lastNavigationDirectionRef } = useLastNavigationDirection();\n  const onFocus = useCallback(() => {\n    const direction = lastNavigationDirectionRef.current;\n    if (direction) {\n      // if we did not already focused on any grid item, set focus according to the item which selected\n      if (activeIndex === -1) {\n        const newIndex = getActiveIndexFromInboundNavigation({ direction, numberOfItemsInLine, itemsCount });\n        setActiveIndex(newIndex);\n      }\n      setIsUsingKeyboardNav(true);\n      return;\n    }\n    if (activeIndex === NO_ACTIVE_INDEX) {\n      setActiveIndex(0);\n    }\n  }, [activeIndex, itemsCount, lastNavigationDirectionRef, numberOfItemsInLine]);\n\n  const onMouseDown = useCallback(() => {\n    // If the user clicked on the grid element we assume that that what will caused the focus\n    setIsUsingKeyboardNav(false);\n  }, [setIsUsingKeyboardNav]);\n\n  const onBlur = useCallback(() => {\n    // If we lose focus we will return to isUsingKeyboardNav default mode which is that any interaction\n    // with the grid always done by keyboard, unless we clicked on the grid element before that with a mouse\n    setIsUsingKeyboardNav(true);\n    setActiveIndex(NO_ACTIVE_INDEX);\n  }, [setActiveIndex]);\n\n  useEventListener({ eventName: \"focus\", callback: onFocus, ref });\n  useEventListener({ eventName: \"mousedown\", callback: onMouseDown, ref });\n  useEventListener({ eventName: \"blur\", callback: onBlur, ref });\n\n  useEffect(() => {\n    if (activeIndex > -1) {\n      ref.current?.focus();\n    }\n  }, [activeIndex, ref]);\n\n  const onSelectionAction = useCallback(\n    (index: number, isKeyboardAction = false) => {\n      setIsUsingKeyboardNav(isKeyboardAction);\n      setActiveIndex(index);\n\n      onItemClicked(getItemByIndex(index), index);\n    },\n    [setActiveIndex, onItemClicked, getItemByIndex]\n  );\n\n  const onKeyboardSelection = useCallback(() => {\n    if (!isUsingKeyboardNav) {\n      return;\n    }\n    return onSelectionAction(activeIndex, true);\n  }, [isUsingKeyboardNav, onSelectionAction, activeIndex]);\n\n  useFullKeyboardListeners({\n    ref,\n    onSelectionKey: onKeyboardSelection,\n    onArrowNavigation,\n    onEscape: blurTargetElement,\n    focusOnMount\n  });\n\n  // if the user is not using keyboard nav, the consumers should not treat the index as active\n  const externalActiveIndex = isUsingKeyboardNav ? activeIndex : NO_ACTIVE_INDEX;\n  return {\n    activeIndex: externalActiveIndex,\n    onSelectionAction,\n    isInitialActiveState\n  };\n}\n"],"names":["NO_ACTIVE_INDEX","useGridKeyboardNavigation","_ref","ref","itemsCount","numberOfItemsInLine","onItemClicked","_ref$getItemByIndex","getItemByIndex","_index","_ref$focusOnMount","focusOnMount","_ref$focusItemIndexOn","focusItemIndexOnMount","_ref$disabledIndexes","disabledIndexes","_useState","useState","_useState2","_slicedToArray","isInitialActiveState","setIsInitialActiveState","skippedInitialActiveIndexChange","useRef","_useState3","_useState4","activeIndex","setActiveIndex","_useState5","_useState6","isUsingKeyboardNav","setIsUsingKeyboardNav","keyboardContext","useContext","GridKeyboardNavigationContext","useEffect","current","blurTargetElement","useCallback","_a","blur","lastNavigationDirectionRef","useLastNavigationDirection","onFocus","direction","newIndex","getActiveIndexFromInboundNavigation","onMouseDown","onBlur","useEventListener","eventName","callback","focus","onSelectionAction","index","arguments","length","undefined","onKeyboardSelection","useFullKeyboardListeners","onSelectionKey","onArrowNavigation","_calcActiveIndexAfter","calcActiveIndexAfterArrowNavigation","nextIndex","isOutbound","onOutboundNavigation","onEscape"],"mappings":"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"}
{"version":3,"file":"EditableTypography.js","sources":["../../../../../src/components/EditableTypography/EditableTypography.tsx"],"sourcesContent":["import React, { ElementType, forwardRef, useEffect, useRef, useState } from \"react\";\nimport cx from \"classnames\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport VibeComponentProps from \"../../types/VibeComponentProps\";\nimport VibeComponent from \"../../types/VibeComponent\";\nimport styles from \"./EditableTypography.module.scss\";\nimport { keyCodes } from \"../../constants\";\nimport { useKeyboardButtonPressedFunc } from \"../../hooks/useKeyboardButtonPressedFunc\";\nimport { TooltipProps } from \"../Tooltip/Tooltip\";\nimport usePrevious from \"../../hooks/usePrevious\";\nimport { TextType, TextWeight } from \"../Text/TextConstants\";\nimport { HeadingType, HeadingWeight } from \"../Heading/HeadingConstants\";\n\nexport interface EditableTypographyImplementationProps {\n  /** Value of the text */\n  value: string;\n  /** Will be called whenever the current value changes to a non-empty value */\n  onChange?: (value: string) => void;\n  /** Will be called whenever the component gets clicked */\n  onClick?: (event: React.KeyboardEvent | React.MouseEvent) => void;\n  /** Disables editing mode - component will be just a typography element */\n  readOnly?: boolean;\n  /** Shown in edit mode when the text value is empty */\n  placeholder?: string;\n  /** ARIA Label */\n  ariaLabel?: string;\n  /** Controls the mode of the component (i.e. view/edit mode) */\n  isEditMode?: boolean;\n  /** Will be called when the mode of the component changes */\n  onEditModeChange?: (isEditMode: boolean) => void;\n  /** Override Tooltip props when needed */\n  tooltipProps?: Partial<TooltipProps>;\n}\n\nexport interface EditableTypographyProps extends VibeComponentProps, EditableTypographyImplementationProps {\n  /** A typography component that is being rendered in view mode */\n  component: ElementType;\n  /** Controls the style of the typography component in view mode */\n  typographyClassName: string;\n  /** Shows placeholder when empty, if provided */\n  clearable?: boolean;\n  /** Sets the Text/Heading type */\n  type?: TextType | HeadingType;\n  /** Sets the Text/Heading weight */\n  weight?: TextWeight | HeadingWeight;\n}\n\nconst EditableTypography: VibeComponent<EditableTypographyProps, HTMLElement> = forwardRef(\n  (\n    {\n      id,\n      className,\n      \"data-testid\": dataTestId,\n      value,\n      onChange,\n      onClick,\n      readOnly = false,\n      ariaLabel = \"\",\n      placeholder,\n      clearable,\n      typographyClassName,\n      component: TypographyComponent,\n      isEditMode,\n      onEditModeChange,\n      tooltipProps,\n      type,\n      weight\n    },\n    ref\n  ) => {\n    const componentRef = useRef(null);\n    const mergedRef = useMergeRef(ref, componentRef);\n\n    const [isEditing, setIsEditing] = useState(isEditMode || false);\n    const [inputValue, setInputValue] = useState(value);\n    const [inputWidth, setInputWidth] = useState(0);\n\n    const prevValue = usePrevious(value);\n\n    const inputRef = useRef(null);\n    const typographyRef = useRef(null);\n\n    useEffect(() => {\n      if (!isEditing && value !== prevValue && value !== inputValue) {\n        setInputValue(value);\n      }\n    }, [prevValue, isEditing, value, inputValue]);\n\n    useEffect(() => {\n      setIsEditing(isEditMode);\n    }, [isEditMode]);\n\n    function onTypographyClick(event: React.KeyboardEvent | React.MouseEvent) {\n      onClick?.(event);\n      toggleEditMode(event);\n    }\n\n    function toggleEditMode(event: React.KeyboardEvent | React.MouseEvent) {\n      if (readOnly || isEditing) {\n        return;\n      }\n      event.preventDefault();\n      handleEditModeChange(true);\n    }\n\n    function handleEditModeChange(value: boolean) {\n      onEditModeChange?.(value);\n      setIsEditing(value);\n    }\n\n    function handleInputValueChange() {\n      handleEditModeChange(false);\n\n      if (value === inputValue) {\n        return;\n      }\n\n      const shouldShowPlaceholderWhenEmpty = clearable && placeholder;\n      if (!inputValue && !shouldShowPlaceholderWhenEmpty) {\n        setInputValue(value);\n        return;\n      }\n      setInputValue(inputValue);\n      onChange?.(inputValue);\n    }\n\n    function handleBlur() {\n      handleInputValueChange();\n    }\n\n    function handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {\n      if (event.key === keyCodes.ENTER) {\n        handleInputValueChange();\n      }\n      if (event.key === keyCodes.ESCAPE) {\n        handleEditModeChange(false);\n        setInputValue(value);\n      }\n    }\n\n    function handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n      setInputValue(event.target.value);\n    }\n\n    const toggleKeyboardEditMode = useKeyboardButtonPressedFunc(toggleEditMode);\n\n    function focus() {\n      if (inputRef.current) {\n        inputRef.current?.focus();\n      }\n    }\n\n    useEffect(() => {\n      if (isEditing) {\n        focus();\n      }\n    }, [isEditing]);\n\n    useEffect(() => {\n      if (!typographyRef.current) {\n        return;\n      }\n      const { width } = typographyRef.current.getBoundingClientRect();\n      setInputWidth(width);\n    }, [inputValue, isEditing]);\n\n    return (\n      <div\n        ref={mergedRef}\n        id={id}\n        aria-label={ariaLabel}\n        data-testid={dataTestId}\n        className={cx(styles.editableTypography, className)}\n        role={isEditing ? null : \"button\"}\n        onClick={onTypographyClick}\n        onKeyDown={toggleKeyboardEditMode}\n      >\n        {isEditing && (\n          <input\n            ref={inputRef}\n            className={cx(styles.input, typographyClassName)}\n            value={inputValue}\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onBlur={handleBlur}\n            aria-label={ariaLabel}\n            placeholder={placeholder}\n            style={{ width: inputWidth }}\n            role=\"input\"\n          />\n        )}\n        <TypographyComponent\n          ref={typographyRef}\n          aria-hidden={isEditing}\n          className={cx(styles.typography, typographyClassName, {\n            [styles.hidden]: isEditing,\n            [styles.disabled]: readOnly,\n            [styles.placeholder]: !inputValue && placeholder\n          })}\n          tabIndex={0}\n          tooltipProps={tooltipProps}\n          weight={weight}\n          type={type}\n        >\n          {inputValue || placeholder}\n        </TypographyComponent>\n      </div>\n    );\n  }\n);\n\nexport default EditableTypography;\n"],"names":["EditableTypography","forwardRef","_ref","ref","id","className","dataTestId","value","onChange","onClick","_ref$readOnly","readOnly","_ref$ariaLabel","ariaLabel","placeholder","clearable","typographyClassName","TypographyComponent","component","isEditMode","onEditModeChange","tooltipProps","type","weight","componentRef","useRef","mergedRef","useMergeRef","_useState","useState","_useState2","_slicedToArray","isEditing","setIsEditing","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","inputWidth","setInputWidth","prevValue","usePrevious","inputRef","typographyRef","toggleEditMode","event","preventDefault","handleEditModeChange","handleInputValueChange","useEffect","toggleKeyboardEditMode","useKeyboardButtonPressedFunc","current","_a","focus","_typographyRef$curren","getBoundingClientRect","width","React","createElement","cx","styles","editableTypography","role","onKeyDown","input","target","key","keyCodes","ENTER","ESCAPE","onBlur","style","typography","_defineProperty","hidden","disabled","tabIndex"],"mappings":"mlBA+CMA,IAAAA,EAA0EC,GAC9E,SAAAC,EAoBEC,GACE,IAnBAC,EAAEF,EAAFE,GACAC,EAASH,EAATG,UACeC,EAAUJ,EAAzB,eACAK,EAAKL,EAALK,MACAC,EAAQN,EAARM,SACAC,EAAOP,EAAPO,QAAOC,EAAAR,EACPS,SAAAA,OAAW,IAAHD,GAAQA,EAAAE,EAAAV,EAChBW,UAAAA,OAAY,IAAHD,EAAG,GAAEA,EACdE,EAAWZ,EAAXY,YACAC,EAASb,EAATa,UACAC,EAAmBd,EAAnBc,oBACWC,EAAmBf,EAA9BgB,UACAC,EAAUjB,EAAViB,WACAC,EAAgBlB,EAAhBkB,iBACAC,EAAYnB,EAAZmB,aACAC,EAAIpB,EAAJoB,KACAC,EAAMrB,EAANqB,OAIIC,EAAeC,EAAO,MACtBC,EAAYC,EAAYxB,EAAKqB,GAEnCI,EAAkCC,EAASV,IAAc,GAAMW,EAAAC,EAAAH,EAAA,GAAxDI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAoCL,EAAStB,GAAM4B,EAAAJ,EAAAG,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,EAAoCT,EAAS,GAAEU,EAAAR,EAAAO,EAAA,GAAxCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,EAAYC,EAAYpC,GAExBqC,EAAWnB,EAAO,MAClBoB,EAAgBpB,EAAO,MAiB7B,SAASqB,EAAeC,GAClBpC,GAAYqB,IAGhBe,EAAMC,iBACNC,GAAqB,GACvB,CAEA,SAASA,EAAqB1C,GAC5Ba,SAAAA,EAAmBb,GACnB0B,EAAa1B,EACf,CAEA,SAAS2C,KACPD,GAAqB,GAEjB1C,IAAU6B,KAKTA,GADkCrB,GAAaD,GAKpDuB,EAAcD,GACd5B,SAAAA,EAAW4B,IAJTC,EAAc9B,GAKlB,CA1CA4C,GAAU,WACHnB,GAAazB,IAAUmC,GAAanC,IAAU6B,GACjDC,EAAc9B,EAEjB,GAAE,CAACmC,EAAWV,EAAWzB,EAAO6B,IAEjCe,GAAU,WACRlB,EAAad,EACf,GAAG,CAACA,IAsDJ,IAAMiC,EAAyBC,EAA6BP,GAsB5D,OAdAK,GAAU,WANV,MAOMnB,GANAY,EAASU,UACO,QAAlBC,EAAAX,EAASU,eAAS,IAAAC,GAAAA,EAAAC,QAQtB,GAAG,CAACxB,IAEJmB,GAAU,WACR,GAAKN,EAAcS,QAAnB,CAGA,IAAAG,EAAkBZ,EAAcS,QAAQI,wBACxCjB,EADagB,EAALE,MADP,CAGH,GAAG,CAACvB,EAAYJ,IAGd4B,EACEC,cAAA,MAAA,CAAA1D,IAAKuB,EACLtB,GAAIA,eACQS,EAAS,cACRP,EACbD,UAAWyD,EAAGC,EAAOC,mBAAoB3D,GACzC4D,KAAMjC,EAAY,KAAO,SACzBvB,QAlFJ,SAA2BsC,GACzBtC,SAAAA,EAAUsC,GACVD,EAAeC,EACjB,EAgFImB,UAAWd,GAEVpB,GACC4B,EAAAC,cAAA,QAAA,CACE1D,IAAKyC,EACLvC,UAAWyD,EAAGC,EAAOI,MAAOnD,GAC5BT,MAAO6B,EACP5B,SA1CR,SAAsBuC,GACpBV,EAAcU,EAAMqB,OAAO7D,MAC7B,EAyCQ2D,UArDR,SAAuBnB,GACjBA,EAAMsB,MAAQC,EAASC,OACzBrB,IAEEH,EAAMsB,MAAQC,EAASE,SACzBvB,GAAqB,GACrBZ,EAAc9B,GAElB,EA8CQkE,OA1DR,WACEvB,GACF,eAyDoBrC,EACZC,YAAaA,EACb4D,MAAO,CAAEf,MAAOnB,GAChByB,KAAK,UAGTL,EAAAC,cAAC5C,EACC,CAAAd,IAAK0C,gBACQb,EACb3B,UAAWyD,EAAGC,EAAOY,WAAY3D,EAAmB4D,EAAAA,EAAAA,EAAA,CAAA,EACjDb,EAAOc,OAAS7C,GAChB+B,EAAOe,SAAWnE,GAClBoD,EAAOjD,aAAesB,GAActB,IAEvCiE,SAAU,EACV1D,aAAcA,EACdE,OAAQA,EACRD,KAAMA,GAELc,GAActB,GAIvB"}
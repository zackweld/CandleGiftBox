{"ast":null,"code":"import { slicedToArray as e, typeof as o } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { useState as n, useCallback as t, useEffect as i } from \"react\";\nvar l;\nfunction r() {\n  var l = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},\n    r = l.isChecked,\n    a = l.onChange,\n    u = l.isDisabled,\n    c = n(null != r ? r : !!l.defaultChecked),\n    s = e(c, 2),\n    d = s[0],\n    f = s[1],\n    h = t(function (e) {\n      if (!u) {\n        var n = !d;\n        void 0 === r && f(n), e && \"object\" === o(e) && \"target\" in e ? null == a || a(n, e) : null == a || a(n);\n      }\n    }, [r, u, a, d]);\n  return i(function () {\n    void 0 !== r && f(r);\n  }, [r]), {\n    isChecked: d,\n    onChange: h\n  };\n}\n!function (e) {\n  e.CHECKBOX = \"checkbox\", e.BUTTON = \"button\";\n}(l || (l = {})), r.switchRole = l;\nexport { r as default };","map":{"version":3,"names":["l","r","arguments","length","isChecked","a","onChange","u","isDisabled","c","n","defaultChecked","s","e","d","f","h","t","o","i","CHECKBOX","BUTTON","switchRole","default"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/hooks/useSwitch/index.ts"],"sourcesContent":["import { ChangeEvent, useCallback, useEffect, useState } from \"react\";\n\nenum SwitchRole {\n  CHECKBOX = \"checkbox\",\n  BUTTON = \"button\"\n}\n\nexport interface UseSwitchProps {\n  isChecked?: boolean;\n  defaultChecked?: boolean;\n  onChange?: (value: boolean, event?: ChangeEvent<HTMLInputElement> | any) => void;\n  isDisabled?: boolean;\n}\n\nexport default function useSwitch({ isChecked, defaultChecked, onChange, isDisabled }: UseSwitchProps = {}) {\n  // if isChecked is empty, set defaultChecked value (default false value)\n  const overrideCheckedInitial = isChecked ?? !!defaultChecked;\n  const [overrideChecked, setOverrideChecked] = useState(overrideCheckedInitial);\n\n  const overrideOnChange = useCallback(\n    // TODO fix in next major. We need to remove any type\n    (event?: ChangeEvent<HTMLInputElement> | any) => {\n      if (isDisabled) {\n        return;\n      }\n      const newChecked = !overrideChecked;\n      if (isChecked === undefined) {\n        setOverrideChecked(newChecked);\n      }\n      // TODO fix in next major. We should always pass the event\n      if (event && typeof event === \"object\" && \"target\" in event) {\n        onChange?.(newChecked, event);\n      } else {\n        onChange?.(newChecked);\n      }\n    },\n    [isChecked, isDisabled, onChange, overrideChecked]\n  );\n\n  useEffect(() => {\n    if (isChecked !== undefined) {\n      setOverrideChecked(isChecked);\n    }\n  }, [isChecked]);\n\n  return { isChecked: overrideChecked, onChange: overrideOnChange };\n}\n\nuseSwitch.switchRole = SwitchRole;\n"],"mappings":";;AAEA,IAAKA,CAAA;AAYmB,SAAAC,EAAA;EAAkF,IAAAD,CAAA,GAAAE,SAAA,CAAAC,MAAA,mBAAAD,SAAA,MAAAA,SAAA,MAAF,CAAE;IAAtED,CAAA,GAASD,CAAA,CAATI,SAAA;IAA2BC,CAAA,GAAQL,CAAA,CAARM,QAAA;IAAUC,CAAA,GAAUP,CAAA,CAAVQ,UAAA;IAGvEC,CAAA,GAA8CC,CAAA,CADf,QAAAT,CAAA,GAAAA,CAAA,KAF4BD,CAAA,CAAdW,cAAA;IAGiCC,CAAA,GAAAC,CAAA,CAAAJ,CAAA;IAAvEK,CAAA,GAAeF,CAAA;IAAEG,CAAA,GAAkBH,CAAA;IAEpCI,CAAA,GAAmBC,CAAA,CAEvB,UAACJ,CAAA;MACC,KAAIN,CAAA,EAAJ;QAGA,IAAMG,CAAA,IAAcI,CAAA;QAAA,KACF,MAAdb,CAAA,IACFc,CAAA,CAAmBL,CAAA,GAGjBG,CAAA,IAA0B,aAAjBK,CAAA,CAAOL,CAAA,KAAsB,YAAYA,CAAA,GACpD,QAAAR,CAAA,IAAAA,CAAA,CAAWK,CAAA,EAAYG,CAAA,IAEvB,QAAAR,CAAA,IAAAA,CAAA,CAAWK,CAAA,CATZ;MAAA;IAWF,GACD,CAACT,CAAA,EAAWM,CAAA,EAAYF,CAAA,EAAUS,CAAA;EASpC,OANAK,CAAA,CAAU;IAAA,KACU,MAAdlB,CAAA,IACFc,CAAA,CAAmBd,CAAA,CAEvB;EAAA,GAAG,CAACA,CAAA,IAEG;IAAEG,SAAA,EAAWU,CAAA;IAAiBR,QAAA,EAAUU;EAAA,CACjD;AAAA;AAAA,CA5CA,UAAKH,CAAA;EACHA,CAAA,CAAAO,QAAA,eACAP,CAAA,CAAAQ,MAAA,WACD;AAAA,CAHD,CAAKrB,CAAA,KAAAA,CAAA,GAGJ,MA2CDC,CAAA,CAAUqB,UAAA,GAAatB,CAAA;AAAA,SAAAC,CAAA,IAAAsB,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
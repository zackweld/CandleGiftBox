{"ast":null,"code":"import { useMemo as n } from \"react\";\nfunction r(r) {\n  var t = r.refs,\n    o = void 0 === t ? [] : t;\n  return n(function () {\n    return o.every(function (n) {\n      return null === n;\n    }) ? null : function (n) {\n      o.forEach(function (r) {\n        r && function (n, r) {\n          if (null === n) return;\n          if (\"function\" == typeof n) return void n(r);\n          try {\n            n.current = r;\n          } catch (t) {\n            throw console.error(t), Error(\"Cannot assign value '\".concat(r, \"' to ref '\").concat(n, \"'\"));\n          }\n        }(r, n);\n      });\n    };\n  }, [o]);\n}\nexport { r as default };","map":{"version":3,"names":["r","t","refs","o","n","every","forEach","current","console","error","Error","concat","default"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/hooks/useMergeRefs.ts"],"sourcesContent":["import { LegacyRef, MutableRefObject, useMemo } from \"react\";\n\n/*\n * const Component = React.forwardRef((props, ref) => {\n *   const internalRef = React.useRef();\n *   const mergedRef = useMergeRefs({ refs: [ref, internalRef] });\n *   return <div {...props} ref={mergedRef} />;\n * });\n */\n\n// TODO deprecate / replace with useMergeRef in next major version - https://monday.monday.com/boards/3532714909/pulses/5657904659\n/**\n * Returns a single ref callback that merges multiple ref callbacks\n * @deprecated - for internal usage - use `useMergeRef` hook instead\n * @param refs\n */\nexport default function useMergeRefs<T = any>({ refs = [] }: { refs: Array<MutableRefObject<T> | LegacyRef<T>> }) {\n  return useMemo(() => {\n    if (refs.every(ref => ref === null)) return null;\n\n    return (node: HTMLElement) => {\n      refs.forEach(ref => {\n        if (ref) assignRef(ref, node);\n      });\n    };\n  }, [refs]);\n}\n\nfunction assignRef(ref: MutableRefObject<any> | LegacyRef<any>, value: HTMLElement) {\n  if (ref === null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n\n  try {\n    // eslint-disable-next-line no-param-reassign\n    (ref as MutableRefObject<any>).current = value;\n  } catch (error) {\n    console.error(error);\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\n"],"mappings":";AAgBwB,SAAAA,EAAYA,CAAA;EAA4E,IAAAC,CAAA,GAAAD,CAAA,CAAhEE,IAAA;IAAAC,CAAA,QAAO,MAAHF,CAAA,GAAG,KAAEA,CAAA;EACvD,OAAOG,CAAA,CAAQ;IACb,OAAID,CAAA,CAAKE,KAAA,CAAM,UAAAD,CAAA;MAAG,OAAY,SAARA,CAAA;IAAA,KAAsB,OAErC,UAACA,CAAA;MACND,CAAA,CAAKG,OAAA,CAAQ,UAAAN,CAAA;QACPA,CAAA,IAMZ,UAAmBI,CAAA,EAA6CJ,CAAA;UAC9D,IAAY,SAARI,CAAA,EAAc;UAElB,IAAmB,qBAARA,CAAA,EAET,YADAA,CAAA,CAAIJ,CAAA;UAIN;YAEGI,CAAA,CAA8BG,OAAA,GAAUP,CAC1C;UAAA,CAAC,QAAOC,CAAA;YAEP,MADAO,OAAA,CAAQC,KAAA,CAAMR,CAAA,GACJS,KAAA,CAAK,wBAAAC,MAAA,CAAyBX,CAAA,EAAK,cAAAW,MAAA,CAAaP,CAAA,EAAG,KAC9D;UAAA;QACH,CArBiB,CAAUJ,CAAA,EAAKI,CAAA,CAC1B;MAAA;IAAA,CAEJ;EAAA,GAAG,CAACD,CAAA,EACN;AAAA;AAAA,SAAAH,CAAA,IAAAY,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import o, { useCallback as e } from \"react\";\nimport r from \"../../../../hooks/useGridKeyboardNavigation/useGridKeyboardNavigation.js\";\nimport t from \"../ColorPickerItemComponent/ColorPickerItemComponent.js\";\nimport n from \"./ColorPickerColorsGrid.module.scss.js\";\nvar i = function (o, e) {\n    return e && e[o] ? e[o] : function (o) {\n      return o.replace(/-|_/g, \" \").replace(/(?:^|\\s)\\S/g, function (o) {\n        return o.toUpperCase();\n      });\n    }(o);\n  },\n  c = o.forwardRef(function (c, l) {\n    var a = c.onColorClicked,\n      d = c.colorsToRender,\n      u = c.numberOfColorsInLine,\n      s = c.focusOnMount,\n      m = c.value,\n      C = c.colorStyle,\n      I = c.ColorIndicatorIcon,\n      f = c.shouldRenderIndicatorWithoutBackground,\n      p = c.SelectedIndicatorIcon,\n      S = c.colorSize,\n      k = c.tooltipContentByColor,\n      h = c.colorShape,\n      y = c.showColorNameTooltip,\n      g = c.id,\n      v = c[\"data-testid\"],\n      b = e(function (o) {\n        return d[o];\n      }, [d]),\n      x = r({\n        focusOnMount: s,\n        ref: l,\n        onItemClicked: a,\n        itemsCount: d.length,\n        numberOfItemsInLine: u,\n        getItemByIndex: b\n      }),\n      A = x.activeIndex,\n      B = x.onSelectionAction;\n    return o.createElement(\"ul\", {\n      className: n.colorsGrid,\n      ref: l,\n      tabIndex: -1,\n      id: g,\n      \"data-testid\": v\n    }, d.map(function (e, r) {\n      return o.createElement(t, {\n        key: e,\n        color: e,\n        onColorClicked: function () {\n          return B(r);\n        },\n        shouldRenderIndicatorWithoutBackground: I && f,\n        colorStyle: C,\n        ColorIndicatorIcon: I,\n        SelectedIndicatorIcon: p,\n        isSelected: Array.isArray(m) ? m.includes(e) : m === e,\n        isActive: r === A,\n        colorSize: S,\n        tooltipContent: y ? i(e, k) : void 0,\n        colorShape: h\n      });\n    }));\n  });\nexport { c as ColorPickerColorsGrid };","map":{"version":3,"names":["i","calculateColorTooltip","o","e","replace","toUpperCase","c","forwardRef","l","a","onColorClicked","d","colorsToRender","u","numberOfColorsInLine","s","focusOnMount","m","value","C","colorStyle","I","ColorIndicatorIcon","f","shouldRenderIndicatorWithoutBackground","p","SelectedIndicatorIcon","S","colorSize","k","tooltipContentByColor","h","colorShape","y","showColorNameTooltip","g","id","v","b","x","r","ref","onItemClicked","itemsCount","length","numberOfItemsInLine","getItemByIndex","A","activeIndex","B","onSelectionAction","createElement","className","n","colorsGrid","tabIndex","map","t","key","color","isSelected","Array","isArray","includes","isActive","tooltipContent","ColorPickerColorsGrid"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/components/ColorPicker/components/ColorPickerContent/ColorPickerColorsGrid.tsx"],"sourcesContent":["import React, { useCallback } from \"react\";\nimport useGridKeyboardNavigation from \"../../../../hooks/useGridKeyboardNavigation/useGridKeyboardNavigation\";\nimport ColorPickerItemComponent from \"../ColorPickerItemComponent/ColorPickerItemComponent\";\nimport { CONTENT_COLORS_VALUES, ColorStyle } from \"../../../../utils/colors-vars-map\";\nimport { BaseSizes } from \"../../../../constants\";\nimport { ColorPickerArrayValueOnly, ColorPickerValueOnly, ColorShapes } from \"../../ColorPickerConstants\";\nimport { SubIcon, VibeComponent, VibeComponentProps } from \"../../../../types\";\nimport styles from \"./ColorPickerColorsGrid.module.scss\";\n\nconst formatColorNameForTooltip = (color: ColorPickerValueOnly) => {\n  return color.replace(/-|_/g, \" \").replace(/(?:^|\\s)\\S/g, function (a) {\n    return a.toUpperCase();\n  });\n};\n\nconst calculateColorTooltip = (\n  color: ColorPickerValueOnly,\n  tooltipContentByColor?: Partial<Record<CONTENT_COLORS_VALUES, string> & Record<string, string>>\n) => {\n  if (tooltipContentByColor && tooltipContentByColor[color]) {\n    return tooltipContentByColor[color];\n  } else {\n    return formatColorNameForTooltip(color);\n  }\n};\n\nexport interface ColorPickerColorsGridProps extends VibeComponentProps {\n  onColorClicked?: (color: ColorPickerValueOnly) => void;\n  colorsToRender?: ColorPickerArrayValueOnly;\n  ColorIndicatorIcon?: SubIcon;\n  SelectedIndicatorIcon?: SubIcon;\n  colorStyle?: ColorStyle;\n  value?: string | string[];\n  shouldRenderIndicatorWithoutBackground?: boolean;\n  colorSize?: BaseSizes;\n  numberOfColorsInLine?: number;\n  tooltipContentByColor?: Partial<Record<CONTENT_COLORS_VALUES, string> & Record<string, string>>;\n  focusOnMount?: boolean;\n  colorShape?: ColorShapes;\n  showColorNameTooltip?: boolean;\n}\n\nexport const ColorPickerColorsGrid: VibeComponent<ColorPickerColorsGridProps, HTMLUListElement> = React.forwardRef(\n  (\n    {\n      onColorClicked,\n      colorsToRender,\n      numberOfColorsInLine,\n      focusOnMount,\n      value,\n      colorStyle,\n      ColorIndicatorIcon,\n      shouldRenderIndicatorWithoutBackground,\n      SelectedIndicatorIcon,\n      colorSize,\n      tooltipContentByColor,\n      colorShape,\n      showColorNameTooltip: showColorNameTooltip,\n      id,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const getItemByIndex = useCallback((index: number) => colorsToRender[index], [colorsToRender]);\n\n    const { activeIndex, onSelectionAction } = useGridKeyboardNavigation({\n      focusOnMount,\n      ref: ref as React.MutableRefObject<HTMLUListElement>,\n      onItemClicked: onColorClicked,\n      itemsCount: colorsToRender.length,\n      numberOfItemsInLine: numberOfColorsInLine,\n      getItemByIndex\n    });\n\n    return (\n      <ul className={styles.colorsGrid} ref={ref} tabIndex={-1} id={id} data-testid={dataTestId}>\n        {colorsToRender.map((color, index) => {\n          return (\n            <ColorPickerItemComponent\n              key={color}\n              color={color}\n              onColorClicked={() => onSelectionAction(index)}\n              shouldRenderIndicatorWithoutBackground={ColorIndicatorIcon && shouldRenderIndicatorWithoutBackground}\n              colorStyle={colorStyle}\n              ColorIndicatorIcon={ColorIndicatorIcon}\n              SelectedIndicatorIcon={SelectedIndicatorIcon}\n              isSelected={Array.isArray(value) ? value.includes(color) : value === color}\n              isActive={index === activeIndex}\n              colorSize={colorSize}\n              tooltipContent={showColorNameTooltip ? calculateColorTooltip(color, tooltipContentByColor) : undefined}\n              colorShape={colorShape}\n            />\n          );\n        })}\n      </ul>\n    );\n  }\n);\n"],"mappings":";;;;AASA,IAMMA,CAAA,GAAwB,SAAAC,CAC5BC,CAAA,EACAC,CAAA;IAEA,OAAIA,CAAA,IAAyBA,CAAA,CAAsBD,CAAA,IAC1CC,CAAA,CAAsBD,CAAA,IAXC,UAACA,CAAA;MACjC,OAAOA,CAAA,CAAME,OAAA,CAAQ,QAAQ,KAAKA,OAAA,CAAQ,eAAe,UAAUF,CAAA;QACjE,OAAOA,CAAA,CAAEG,WAAA,EACX;MAAA,EACF;IAAA,CASW,CAA0BH,CAAA,CAErC;EAAA;EAkBaI,CAAA,GAAqFJ,CAAA,CAAMK,UAAA,CACtG,UAAAD,CAAA,EAkBEE,CAAA;IACE,IAjBAC,CAAA,GAAcH,CAAA,CAAdI,cAAA;MACAC,CAAA,GAAcL,CAAA,CAAdM,cAAA;MACAC,CAAA,GAAoBP,CAAA,CAApBQ,oBAAA;MACAC,CAAA,GAAYT,CAAA,CAAZU,YAAA;MACAC,CAAA,GAAKX,CAAA,CAALY,KAAA;MACAC,CAAA,GAAUb,CAAA,CAAVc,UAAA;MACAC,CAAA,GAAkBf,CAAA,CAAlBgB,kBAAA;MACAC,CAAA,GAAsCjB,CAAA,CAAtCkB,sCAAA;MACAC,CAAA,GAAqBnB,CAAA,CAArBoB,qBAAA;MACAC,CAAA,GAASrB,CAAA,CAATsB,SAAA;MACAC,CAAA,GAAqBvB,CAAA,CAArBwB,qBAAA;MACAC,CAAA,GAAUzB,CAAA,CAAV0B,UAAA;MACsBC,CAAA,GAAoB3B,CAAA,CAA1C4B,oBAAA;MACAC,CAAA,GAAE7B,CAAA,CAAF8B,EAAA;MACeC,CAAA,GAAU/B,CAAA,CAAzB;MAIIgC,CAAA,GAAiBnC,CAAA,CAAY,UAACD,CAAA;QAAa,OAAKS,CAAA,CAAeT,CAAA;MAAA,GAAQ,CAACS,CAAA;MAE9E4B,CAAA,GAA2CC,CAAA,CAA0B;QACnExB,YAAA,EAAAD,CAAA;QACA0B,GAAA,EAAKjC,CAAA;QACLkC,aAAA,EAAejC,CAAA;QACfkC,UAAA,EAAYhC,CAAA,CAAeiC,MAAA;QAC3BC,mBAAA,EAAqBhC,CAAA;QACrBiC,cAAA,EAAAR;MAAA;MANMS,CAAA,GAAWR,CAAA,CAAXS,WAAA;MAAaC,CAAA,GAAiBV,CAAA,CAAjBW,iBAAA;IASrB,OACEhD,CAAA,CAAAiD,aAAA;MAAIC,SAAA,EAAWC,CAAA,CAAOC,UAAA;MAAYb,GAAA,EAAKjC,CAAA;MAAK+C,QAAA,GAAW;MAAGnB,EAAA,EAAID,CAAA;MAAiB,eAAAE;IAAA,GAC5E1B,CAAA,CAAe6C,GAAA,CAAI,UAACrD,CAAA,EAAOqC,CAAA;MAC1B,OACEtC,CAAA,CAAAiD,aAAA,CAACM,CAAA,EAAwB;QACvBC,GAAA,EAAKvD,CAAA;QACLwD,KAAA,EAAOxD,CAAA;QACPO,cAAA,EAAgB,SAAAA,CAAA;UAAA,OAAMuC,CAAA,CAAkBT,CAAA,CAAM;QAAA;QAC9ChB,sCAAA,EAAwCH,CAAA,IAAsBE,CAAA;QAC9DH,UAAA,EAAYD,CAAA;QACZG,kBAAA,EAAoBD,CAAA;QACpBK,qBAAA,EAAuBD,CAAA;QACvBmC,UAAA,EAAYC,KAAA,CAAMC,OAAA,CAAQ7C,CAAA,IAASA,CAAA,CAAM8C,QAAA,CAAS5D,CAAA,IAASc,CAAA,KAAUd,CAAA;QACrE6D,QAAA,EAAUxB,CAAA,KAAUO,CAAA;QACpBnB,SAAA,EAAWD,CAAA;QACXsC,cAAA,EAAgBhC,CAAA,GAAuBjC,CAAA,CAAsBG,CAAA,EAAO0B,CAAA,SAAyB;QAC7FG,UAAA,EAAYD;MAAA,EAGjB;IAAA,GAGP;EAAA;AAAA,SAAAzB,CAAA,IAAA4D,qBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var focusableSelectors = ['a[href]:not([tabindex^=\"-\"])', 'area[href]:not([tabindex^=\"-\"])', 'input:not([type=\"hidden\"]):not([type=\"radio\"]):not([disabled]):not([tabindex^=\"-\"])', 'input[type=\"radio\"]:not([disabled]):not([tabindex^=\"-\"])', 'select:not([disabled]):not([tabindex^=\"-\"])', 'textarea:not([disabled]):not([tabindex^=\"-\"])', 'button:not([disabled]):not([tabindex^=\"-\"])', 'iframe:not([tabindex^=\"-\"])', 'audio[controls]:not([tabindex^=\"-\"])', 'video[controls]:not([tabindex^=\"-\"])', '[contenteditable]:not([tabindex^=\"-\"])', '[tabindex]:not([tabindex^=\"-\"])'];\nvar TAB_KEY = 'Tab';\nvar ESCAPE_KEY = 'Escape';\n\n/**\n * Define the constructor to instantiate a dialog\n *\n * @constructor\n * @param {Element} element\n */\nfunction A11yDialog(element) {\n  // Prebind the functions that will be bound in addEventListener and\n  // removeEventListener to avoid losing references\n  this._show = this.show.bind(this);\n  this._hide = this.hide.bind(this);\n  this._maintainFocus = this._maintainFocus.bind(this);\n  this._bindKeypress = this._bindKeypress.bind(this);\n  this.$el = element;\n  this.shown = false;\n  this._id = this.$el.getAttribute('data-a11y-dialog') || this.$el.id;\n  this._previouslyFocused = null;\n  this._listeners = {};\n\n  // Initialise everything needed for the dialog to work properly\n  this.create();\n}\n\n/**\n * Set up everything necessary for the dialog to be functioning\n *\n * @param {(NodeList | Element | string)} targets\n * @return {this}\n */\nA11yDialog.prototype.create = function () {\n  this.$el.setAttribute('aria-hidden', true);\n  this.$el.setAttribute('aria-modal', true);\n  this.$el.setAttribute('tabindex', -1);\n  if (!this.$el.hasAttribute('role')) {\n    this.$el.setAttribute('role', 'dialog');\n  }\n\n  // Keep a collection of dialog openers, each of which will be bound a click\n  // event listener to open the dialog\n  this._openers = $$('[data-a11y-dialog-show=\"' + this._id + '\"]');\n  this._openers.forEach(function (opener) {\n    opener.addEventListener('click', this._show);\n  }.bind(this));\n\n  // Keep a collection of dialog closers, each of which will be bound a click\n  // event listener to close the dialog\n  const $el = this.$el;\n  this._closers = $$('[data-a11y-dialog-hide]', this.$el)\n  // This filter is necessary in case there are nested dialogs, so that\n  // only closers from the current dialog are retrieved and effective\n  .filter(function (closer) {\n    // Testing for `[aria-modal=\"true\"]` is not enough since this attribute\n    // and the collect of closers is done at instantation time, when nested\n    // dialogs might not have yet been instantiated. Note that if the dialogs\n    // are manually instantiated, this could still fail because none of these\n    // selectors would match; this would cause closers to close all parent\n    // dialogs instead of just the current one\n    return closer.closest('[aria-modal=\"true\"], [data-a11y-dialog]') === $el;\n  }).concat($$('[data-a11y-dialog-hide=\"' + this._id + '\"]'));\n  this._closers.forEach(function (closer) {\n    closer.addEventListener('click', this._hide);\n  }.bind(this));\n\n  // Execute all callbacks registered for the `create` event\n  this._fire('create');\n  return this;\n};\n\n/**\n * Show the dialog element, disable all the targets (siblings), trap the\n * current focus within it, listen for some specific key presses and fire all\n * registered callbacks for `show` event\n *\n * @param {CustomEvent} event\n * @return {this}\n */\nA11yDialog.prototype.show = function (event) {\n  // If the dialog is already open, abort\n  if (this.shown) {\n    return this;\n  }\n\n  // Keep a reference to the currently focused element to be able to restore\n  // it later\n  this._previouslyFocused = document.activeElement;\n\n  // Due to a long lasting bug in Safari, clicking an interactive element (like\n  // a <button>) does *not* move the focus to that element, which means\n  // `document.activeElement` is whatever element is currently focused (like an\n  // <input>), or the <body> element otherwise. We can work around that problem\n  // by checking whether the focused element is the <body>, and if it, store the\n  // click event target.\n  // See: https://bugs.webkit.org/show_bug.cgi?id=22261\n  const target = event && event.target ? event.target : null;\n  if (target && Object.is(this._previouslyFocused, document.body)) {\n    this._previouslyFocused = target;\n  }\n  this.$el.removeAttribute('aria-hidden');\n  this.shown = true;\n\n  // Set the focus to the dialog element\n  moveFocusToDialog(this.$el);\n\n  // Bind a focus event listener to the body element to make sure the focus\n  // stays trapped inside the dialog while open, and start listening for some\n  // specific key presses (TAB and ESC)\n  document.body.addEventListener('focus', this._maintainFocus, true);\n  document.addEventListener('keydown', this._bindKeypress);\n\n  // Execute all callbacks registered for the `show` event\n  this._fire('show', event);\n  return this;\n};\n\n/**\n * Hide the dialog element, enable all the targets (siblings), restore the\n * focus to the previously active element, stop listening for some specific\n * key presses and fire all registered callbacks for `hide` event\n *\n * @param {CustomEvent} event\n * @return {this}\n */\nA11yDialog.prototype.hide = function (event) {\n  // If the dialog is already closed, abort\n  if (!this.shown) {\n    return this;\n  }\n  this.shown = false;\n  this.$el.setAttribute('aria-hidden', 'true');\n\n  // If there was a focused element before the dialog was opened (and it has a\n  // `focus` method), restore the focus back to it\n  // See: https://github.com/KittyGiraudel/a11y-dialog/issues/108\n  if (this._previouslyFocused && this._previouslyFocused.focus) {\n    this._previouslyFocused.focus();\n  }\n\n  // Remove the focus event listener to the body element and stop listening\n  // for specific key presses\n  document.body.removeEventListener('focus', this._maintainFocus, true);\n  document.removeEventListener('keydown', this._bindKeypress);\n\n  // Execute all callbacks registered for the `hide` event\n  this._fire('hide', event);\n  return this;\n};\n\n/**\n * Destroy the current instance (after making sure the dialog has been hidden)\n * and remove all associated listeners from dialog openers and closers\n *\n * @return {this}\n */\nA11yDialog.prototype.destroy = function () {\n  // Hide the dialog to avoid destroying an open instance\n  this.hide();\n\n  // Remove the click event listener from all dialog openers\n  this._openers.forEach(function (opener) {\n    opener.removeEventListener('click', this._show);\n  }.bind(this));\n\n  // Remove the click event listener from all dialog closers\n  this._closers.forEach(function (closer) {\n    closer.removeEventListener('click', this._hide);\n  }.bind(this));\n\n  // Execute all callbacks registered for the `destroy` event\n  this._fire('destroy');\n\n  // Keep an object of listener types mapped to callback functions\n  this._listeners = {};\n  return this;\n};\n\n/**\n * Register a new callback for the given event type\n *\n * @param {string} type\n * @param {Function} handler\n */\nA11yDialog.prototype.on = function (type, handler) {\n  if (typeof this._listeners[type] === 'undefined') {\n    this._listeners[type] = [];\n  }\n  this._listeners[type].push(handler);\n  return this;\n};\n\n/**\n * Unregister an existing callback for the given event type\n *\n * @param {string} type\n * @param {Function} handler\n */\nA11yDialog.prototype.off = function (type, handler) {\n  var index = (this._listeners[type] || []).indexOf(handler);\n  if (index > -1) {\n    this._listeners[type].splice(index, 1);\n  }\n  return this;\n};\n\n/**\n * Iterate over all registered handlers for given type and call them all with\n * the dialog element as first argument, event as second argument (if any). Also\n * dispatch a custom event on the DOM element itself to make it possible to\n * react to the lifecycle of auto-instantiated dialogs.\n *\n * @access private\n * @param {string} type\n * @param {CustomEvent} event\n */\nA11yDialog.prototype._fire = function (type, event) {\n  var listeners = this._listeners[type] || [];\n  var domEvent = new CustomEvent(type, {\n    detail: event\n  });\n  this.$el.dispatchEvent(domEvent);\n  listeners.forEach(function (listener) {\n    listener(this.$el, event);\n  }.bind(this));\n};\n\n/**\n * Private event handler used when listening to some specific key presses\n * (namely ESCAPE and TAB)\n *\n * @access private\n * @param {Event} event\n */\nA11yDialog.prototype._bindKeypress = function (event) {\n  // This is an escape hatch in case there are nested dialogs, so the keypresses\n  // are only reacted to for the most recent one\n  const focused = document.activeElement;\n  if (focused && focused.closest('[aria-modal=\"true\"]') !== this.$el) return;\n\n  // If the dialog is shown and the ESCAPE key is being pressed, prevent any\n  // further effects from the ESCAPE key and hide the dialog, unless its role\n  // is 'alertdialog', which should be modal\n  if (this.shown && event.key === ESCAPE_KEY && this.$el.getAttribute('role') !== 'alertdialog') {\n    event.preventDefault();\n    this.hide(event);\n  }\n\n  // If the dialog is shown and the TAB key is being pressed, make sure the\n  // focus stays trapped within the dialog element\n  if (this.shown && event.key === TAB_KEY) {\n    trapTabKey(this.$el, event);\n  }\n};\n\n/**\n * Private event handler used when making sure the focus stays within the\n * currently open dialog\n *\n * @access private\n * @param {Event} event\n */\nA11yDialog.prototype._maintainFocus = function (event) {\n  // If the dialog is shown and the focus is not within a dialog element (either\n  // this one or another one in case of nested dialogs) or within an element\n  // with the `data-a11y-dialog-focus-trap-ignore` attribute, move it back to\n  // its first focusable child.\n  // See: https://github.com/KittyGiraudel/a11y-dialog/issues/177\n  if (this.shown && !event.target.closest('[aria-modal=\"true\"]') && !event.target.closest('[data-a11y-dialog-ignore-focus-trap]')) {\n    moveFocusToDialog(this.$el);\n  }\n};\n\n/**\n * Convert a NodeList into an array\n *\n * @param {NodeList} collection\n * @return {Array<Element>}\n */\nfunction toArray(collection) {\n  return Array.prototype.slice.call(collection);\n}\n\n/**\n * Query the DOM for nodes matching the given selector, scoped to context (or\n * the whole document)\n *\n * @param {String} selector\n * @param {Element} [context = document]\n * @return {Array<Element>}\n */\nfunction $$(selector, context) {\n  return toArray((context || document).querySelectorAll(selector));\n}\n\n/**\n * Set the focus to the first element with `autofocus` with the element or the\n * element itself\n *\n * @param {Element} node\n */\nfunction moveFocusToDialog(node) {\n  var focused = node.querySelector('[autofocus]') || node;\n  focused.focus();\n}\n\n/**\n * Get the focusable children of the given element\n *\n * @param {Element} node\n * @return {Array<Element>}\n */\nfunction getFocusableChildren(node) {\n  return $$(focusableSelectors.join(','), node).filter(function (child) {\n    return !!(child.offsetWidth || child.offsetHeight || child.getClientRects().length);\n  });\n}\n\n/**\n * Trap the focus inside the given element\n *\n * @param {Element} node\n * @param {Event} event\n */\nfunction trapTabKey(node, event) {\n  var focusableChildren = getFocusableChildren(node);\n  var focusedItemIndex = focusableChildren.indexOf(document.activeElement);\n\n  // If the SHIFT key is being pressed while tabbing (moving backwards) and\n  // the currently focused item is the first one, move the focus to the last\n  // focusable item from the dialog element\n  if (event.shiftKey && focusedItemIndex === 0) {\n    focusableChildren[focusableChildren.length - 1].focus();\n    event.preventDefault();\n    // If the SHIFT key is not being pressed (moving forwards) and the currently\n    // focused item is the last one, move the focus to the first focusable item\n    // from the dialog element\n  } else if (!event.shiftKey && focusedItemIndex === focusableChildren.length - 1) {\n    focusableChildren[0].focus();\n    event.preventDefault();\n  }\n}\nfunction instantiateDialogs() {\n  $$('[data-a11y-dialog]').forEach(function (node) {\n    new A11yDialog(node);\n  });\n}\nif (typeof document !== 'undefined') {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', instantiateDialogs);\n  } else {\n    if (window.requestAnimationFrame) {\n      window.requestAnimationFrame(instantiateDialogs);\n    } else {\n      window.setTimeout(instantiateDialogs, 16);\n    }\n  }\n}\nexport { A11yDialog as default };","map":{"version":3,"names":["focusableSelectors","TAB_KEY","ESCAPE_KEY","A11yDialog","element","_show","show","bind","_hide","hide","_maintainFocus","_bindKeypress","$el","shown","_id","getAttribute","id","_previouslyFocused","_listeners","create","prototype","setAttribute","hasAttribute","_openers","$$","forEach","opener","addEventListener","_closers","filter","closer","closest","concat","_fire","event","document","activeElement","target","Object","is","body","removeAttribute","moveFocusToDialog","focus","removeEventListener","destroy","on","type","handler","push","off","index","indexOf","splice","listeners","domEvent","CustomEvent","detail","dispatchEvent","listener","focused","key","preventDefault","trapTabKey","toArray","collection","Array","slice","call","selector","context","querySelectorAll","node","querySelector","getFocusableChildren","join","child","offsetWidth","offsetHeight","getClientRects","length","focusableChildren","focusedItemIndex","shiftKey","instantiateDialogs","readyState","window","requestAnimationFrame","setTimeout","default"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/a11y-dialog/dist/a11y-dialog.esm.js"],"sourcesContent":["var focusableSelectors = [\n  'a[href]:not([tabindex^=\"-\"])',\n  'area[href]:not([tabindex^=\"-\"])',\n  'input:not([type=\"hidden\"]):not([type=\"radio\"]):not([disabled]):not([tabindex^=\"-\"])',\n  'input[type=\"radio\"]:not([disabled]):not([tabindex^=\"-\"])',\n  'select:not([disabled]):not([tabindex^=\"-\"])',\n  'textarea:not([disabled]):not([tabindex^=\"-\"])',\n  'button:not([disabled]):not([tabindex^=\"-\"])',\n  'iframe:not([tabindex^=\"-\"])',\n  'audio[controls]:not([tabindex^=\"-\"])',\n  'video[controls]:not([tabindex^=\"-\"])',\n  '[contenteditable]:not([tabindex^=\"-\"])',\n  '[tabindex]:not([tabindex^=\"-\"])',\n];\n\nvar TAB_KEY = 'Tab';\nvar ESCAPE_KEY = 'Escape';\n\n/**\n * Define the constructor to instantiate a dialog\n *\n * @constructor\n * @param {Element} element\n */\nfunction A11yDialog(element) {\n  // Prebind the functions that will be bound in addEventListener and\n  // removeEventListener to avoid losing references\n  this._show = this.show.bind(this);\n  this._hide = this.hide.bind(this);\n  this._maintainFocus = this._maintainFocus.bind(this);\n  this._bindKeypress = this._bindKeypress.bind(this);\n\n  this.$el = element;\n  this.shown = false;\n  this._id = this.$el.getAttribute('data-a11y-dialog') || this.$el.id;\n  this._previouslyFocused = null;\n  this._listeners = {};\n\n  // Initialise everything needed for the dialog to work properly\n  this.create();\n}\n\n/**\n * Set up everything necessary for the dialog to be functioning\n *\n * @param {(NodeList | Element | string)} targets\n * @return {this}\n */\nA11yDialog.prototype.create = function () {\n  this.$el.setAttribute('aria-hidden', true);\n  this.$el.setAttribute('aria-modal', true);\n  this.$el.setAttribute('tabindex', -1);\n\n  if (!this.$el.hasAttribute('role')) {\n    this.$el.setAttribute('role', 'dialog');\n  }\n\n  // Keep a collection of dialog openers, each of which will be bound a click\n  // event listener to open the dialog\n  this._openers = $$('[data-a11y-dialog-show=\"' + this._id + '\"]');\n  this._openers.forEach(\n    function (opener) {\n      opener.addEventListener('click', this._show);\n    }.bind(this)\n  );\n\n  // Keep a collection of dialog closers, each of which will be bound a click\n  // event listener to close the dialog\n  const $el = this.$el;\n\n  this._closers = $$('[data-a11y-dialog-hide]', this.$el)\n    // This filter is necessary in case there are nested dialogs, so that\n    // only closers from the current dialog are retrieved and effective\n    .filter(function (closer) {\n      // Testing for `[aria-modal=\"true\"]` is not enough since this attribute\n      // and the collect of closers is done at instantation time, when nested\n      // dialogs might not have yet been instantiated. Note that if the dialogs\n      // are manually instantiated, this could still fail because none of these\n      // selectors would match; this would cause closers to close all parent\n      // dialogs instead of just the current one\n      return closer.closest('[aria-modal=\"true\"], [data-a11y-dialog]') === $el\n    })\n    .concat($$('[data-a11y-dialog-hide=\"' + this._id + '\"]'));\n\n  this._closers.forEach(\n    function (closer) {\n      closer.addEventListener('click', this._hide);\n    }.bind(this)\n  );\n\n  // Execute all callbacks registered for the `create` event\n  this._fire('create');\n\n  return this\n};\n\n/**\n * Show the dialog element, disable all the targets (siblings), trap the\n * current focus within it, listen for some specific key presses and fire all\n * registered callbacks for `show` event\n *\n * @param {CustomEvent} event\n * @return {this}\n */\nA11yDialog.prototype.show = function (event) {\n  // If the dialog is already open, abort\n  if (this.shown) {\n    return this\n  }\n\n  // Keep a reference to the currently focused element to be able to restore\n  // it later\n  this._previouslyFocused = document.activeElement;\n\n  // Due to a long lasting bug in Safari, clicking an interactive element (like\n  // a <button>) does *not* move the focus to that element, which means\n  // `document.activeElement` is whatever element is currently focused (like an\n  // <input>), or the <body> element otherwise. We can work around that problem\n  // by checking whether the focused element is the <body>, and if it, store the\n  // click event target.\n  // See: https://bugs.webkit.org/show_bug.cgi?id=22261\n  const target = event && event.target ? event.target : null;\n  if (target && Object.is(this._previouslyFocused, document.body)) {\n    this._previouslyFocused = target;\n  }\n\n  this.$el.removeAttribute('aria-hidden');\n  this.shown = true;\n\n  // Set the focus to the dialog element\n  moveFocusToDialog(this.$el);\n\n  // Bind a focus event listener to the body element to make sure the focus\n  // stays trapped inside the dialog while open, and start listening for some\n  // specific key presses (TAB and ESC)\n  document.body.addEventListener('focus', this._maintainFocus, true);\n  document.addEventListener('keydown', this._bindKeypress);\n\n  // Execute all callbacks registered for the `show` event\n  this._fire('show', event);\n\n  return this\n};\n\n/**\n * Hide the dialog element, enable all the targets (siblings), restore the\n * focus to the previously active element, stop listening for some specific\n * key presses and fire all registered callbacks for `hide` event\n *\n * @param {CustomEvent} event\n * @return {this}\n */\nA11yDialog.prototype.hide = function (event) {\n  // If the dialog is already closed, abort\n  if (!this.shown) {\n    return this\n  }\n\n  this.shown = false;\n  this.$el.setAttribute('aria-hidden', 'true');\n\n  // If there was a focused element before the dialog was opened (and it has a\n  // `focus` method), restore the focus back to it\n  // See: https://github.com/KittyGiraudel/a11y-dialog/issues/108\n  if (this._previouslyFocused && this._previouslyFocused.focus) {\n    this._previouslyFocused.focus();\n  }\n\n  // Remove the focus event listener to the body element and stop listening\n  // for specific key presses\n  document.body.removeEventListener('focus', this._maintainFocus, true);\n  document.removeEventListener('keydown', this._bindKeypress);\n\n  // Execute all callbacks registered for the `hide` event\n  this._fire('hide', event);\n\n  return this\n};\n\n/**\n * Destroy the current instance (after making sure the dialog has been hidden)\n * and remove all associated listeners from dialog openers and closers\n *\n * @return {this}\n */\nA11yDialog.prototype.destroy = function () {\n  // Hide the dialog to avoid destroying an open instance\n  this.hide();\n\n  // Remove the click event listener from all dialog openers\n  this._openers.forEach(\n    function (opener) {\n      opener.removeEventListener('click', this._show);\n    }.bind(this)\n  );\n\n  // Remove the click event listener from all dialog closers\n  this._closers.forEach(\n    function (closer) {\n      closer.removeEventListener('click', this._hide);\n    }.bind(this)\n  );\n\n  // Execute all callbacks registered for the `destroy` event\n  this._fire('destroy');\n\n  // Keep an object of listener types mapped to callback functions\n  this._listeners = {};\n\n  return this\n};\n\n/**\n * Register a new callback for the given event type\n *\n * @param {string} type\n * @param {Function} handler\n */\nA11yDialog.prototype.on = function (type, handler) {\n  if (typeof this._listeners[type] === 'undefined') {\n    this._listeners[type] = [];\n  }\n\n  this._listeners[type].push(handler);\n\n  return this\n};\n\n/**\n * Unregister an existing callback for the given event type\n *\n * @param {string} type\n * @param {Function} handler\n */\nA11yDialog.prototype.off = function (type, handler) {\n  var index = (this._listeners[type] || []).indexOf(handler);\n\n  if (index > -1) {\n    this._listeners[type].splice(index, 1);\n  }\n\n  return this\n};\n\n/**\n * Iterate over all registered handlers for given type and call them all with\n * the dialog element as first argument, event as second argument (if any). Also\n * dispatch a custom event on the DOM element itself to make it possible to\n * react to the lifecycle of auto-instantiated dialogs.\n *\n * @access private\n * @param {string} type\n * @param {CustomEvent} event\n */\nA11yDialog.prototype._fire = function (type, event) {\n  var listeners = this._listeners[type] || [];\n  var domEvent = new CustomEvent(type, { detail: event });\n\n  this.$el.dispatchEvent(domEvent);\n\n  listeners.forEach(\n    function (listener) {\n      listener(this.$el, event);\n    }.bind(this)\n  );\n};\n\n/**\n * Private event handler used when listening to some specific key presses\n * (namely ESCAPE and TAB)\n *\n * @access private\n * @param {Event} event\n */\nA11yDialog.prototype._bindKeypress = function (event) {\n  // This is an escape hatch in case there are nested dialogs, so the keypresses\n  // are only reacted to for the most recent one\n  const focused = document.activeElement;\n  if (focused && focused.closest('[aria-modal=\"true\"]') !== this.$el) return\n\n  // If the dialog is shown and the ESCAPE key is being pressed, prevent any\n  // further effects from the ESCAPE key and hide the dialog, unless its role\n  // is 'alertdialog', which should be modal\n  if (\n    this.shown &&\n    event.key === ESCAPE_KEY &&\n    this.$el.getAttribute('role') !== 'alertdialog'\n  ) {\n    event.preventDefault();\n    this.hide(event);\n  }\n\n  // If the dialog is shown and the TAB key is being pressed, make sure the\n  // focus stays trapped within the dialog element\n  if (this.shown && event.key === TAB_KEY) {\n    trapTabKey(this.$el, event);\n  }\n};\n\n/**\n * Private event handler used when making sure the focus stays within the\n * currently open dialog\n *\n * @access private\n * @param {Event} event\n */\nA11yDialog.prototype._maintainFocus = function (event) {\n  // If the dialog is shown and the focus is not within a dialog element (either\n  // this one or another one in case of nested dialogs) or within an element\n  // with the `data-a11y-dialog-focus-trap-ignore` attribute, move it back to\n  // its first focusable child.\n  // See: https://github.com/KittyGiraudel/a11y-dialog/issues/177\n  if (\n    this.shown &&\n    !event.target.closest('[aria-modal=\"true\"]') &&\n    !event.target.closest('[data-a11y-dialog-ignore-focus-trap]')\n  ) {\n    moveFocusToDialog(this.$el);\n  }\n};\n\n/**\n * Convert a NodeList into an array\n *\n * @param {NodeList} collection\n * @return {Array<Element>}\n */\nfunction toArray(collection) {\n  return Array.prototype.slice.call(collection)\n}\n\n/**\n * Query the DOM for nodes matching the given selector, scoped to context (or\n * the whole document)\n *\n * @param {String} selector\n * @param {Element} [context = document]\n * @return {Array<Element>}\n */\nfunction $$(selector, context) {\n  return toArray((context || document).querySelectorAll(selector))\n}\n\n/**\n * Set the focus to the first element with `autofocus` with the element or the\n * element itself\n *\n * @param {Element} node\n */\nfunction moveFocusToDialog(node) {\n  var focused = node.querySelector('[autofocus]') || node;\n\n  focused.focus();\n}\n\n/**\n * Get the focusable children of the given element\n *\n * @param {Element} node\n * @return {Array<Element>}\n */\nfunction getFocusableChildren(node) {\n  return $$(focusableSelectors.join(','), node).filter(function (child) {\n    return !!(\n      child.offsetWidth ||\n      child.offsetHeight ||\n      child.getClientRects().length\n    )\n  })\n}\n\n/**\n * Trap the focus inside the given element\n *\n * @param {Element} node\n * @param {Event} event\n */\nfunction trapTabKey(node, event) {\n  var focusableChildren = getFocusableChildren(node);\n  var focusedItemIndex = focusableChildren.indexOf(document.activeElement);\n\n  // If the SHIFT key is being pressed while tabbing (moving backwards) and\n  // the currently focused item is the first one, move the focus to the last\n  // focusable item from the dialog element\n  if (event.shiftKey && focusedItemIndex === 0) {\n    focusableChildren[focusableChildren.length - 1].focus();\n    event.preventDefault();\n    // If the SHIFT key is not being pressed (moving forwards) and the currently\n    // focused item is the last one, move the focus to the first focusable item\n    // from the dialog element\n  } else if (\n    !event.shiftKey &&\n    focusedItemIndex === focusableChildren.length - 1\n  ) {\n    focusableChildren[0].focus();\n    event.preventDefault();\n  }\n}\n\nfunction instantiateDialogs() {\n  $$('[data-a11y-dialog]').forEach(function (node) {\n    new A11yDialog(node);\n  });\n}\n\nif (typeof document !== 'undefined') {\n  if (document.readyState === 'loading') {\n    document.addEventListener('DOMContentLoaded', instantiateDialogs);\n  } else {\n    if (window.requestAnimationFrame) {\n      window.requestAnimationFrame(instantiateDialogs);\n    } else {\n      window.setTimeout(instantiateDialogs, 16);\n    }\n  }\n}\n\nexport { A11yDialog as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { useRef as e, useCallback as t } from \"react\";\nimport { isFirefox as r } from \"../../../utils/user-agent-utils.js\";\nfunction n(n) {\n  var u = n.inputRef,\n    c = e(!1);\n  return {\n    onClickCapture: t(function (e) {\n      var t;\n      if (!c.current && e.shiftKey && r() && null != u && null !== (t = u.current) && void 0 !== t && t.dispatchEvent) {\n        e.preventDefault();\n        var n = new MouseEvent(\"click\", {\n          shiftKey: !0,\n          bubbles: !0,\n          cancelable: !0\n        });\n        c.current = !0, u.current.dispatchEvent(n);\n      } else c.current && (c.current = !1);\n    }, [c, u])\n  };\n}\nexport { n as useSupportFirefoxLabelClick };","map":{"version":3,"names":["n","u","inputRef","c","e","onClickCapture","t","current","shiftKey","r","dispatchEvent","preventDefault","MouseEvent","bubbles","cancelable","useSupportFirefoxLabelClick"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/components/Checkbox/hooks/useSupportFirefoxLabelClick.jsx"],"sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { isFirefox } from \"../../../utils/user-agent-utils\";\n\nexport function useSupportFirefoxLabelClick({ inputRef }) {\n  // The purpose of this variable is to make sure that the captured event is a checkbox's label click event and not a manual event\n  // that we actually created in this hook.\n  // We handle the custom event create state as ref because this variable should not be depend on the component renders\n  // and it should be unique per checkbox.\n  const customEventCreated = useRef(false);\n\n  // fix for known bug firefox bug: firefox does not support checking or unchecking checkbox by its label when shift pressed\n  const onClickCapture = useCallback(\n    e => {\n      // We would like to dispatch a manual event to click on the input only for cases where there is a bug in supporting this capability -\n      // firefox browsers when the shift key is pressed.\n      // In addition we make sure here that the captured event is not a manually generated event created by this code because we want to prevent\n      // an infinite loop in recursion here.\n      if (!customEventCreated.current && e.shiftKey && isFirefox() && inputRef?.current?.dispatchEvent) {\n        e.preventDefault();\n        const manualClickEvent = new MouseEvent(\"click\", {\n          shiftKey: true,\n          // After dispatch this event we will want it to be captured by all the relevant event listeners which registered to this checkbox input.\n          bubbles: true,\n          cancelable: true\n        });\n\n        customEventCreated.current = true;\n        inputRef.current.dispatchEvent(manualClickEvent);\n      } else if (customEventCreated.current) {\n        customEventCreated.current = false;\n      }\n    },\n    [customEventCreated, inputRef]\n  );\n\n  return { onClickCapture };\n}\n"],"mappings":";;AAGO,SAASA,EAA2BA,CAAA;EAAe,IAAZC,CAAA,GAAQD,CAAA,CAARE,QAAA;IAKtCC,CAAA,GAAqBC,CAAA,EAAO;EA2BlC,OAAO;IAAEC,cAAA,EAxBcC,CAAA,CACrB,UAAAF,CAAA;MAAK,IAAAE,CAAA;MAKH,KAAKH,CAAA,CAAmBI,OAAA,IAAWH,CAAA,CAAEI,QAAA,IAAYC,CAAA,MAA7C,QAA4DR,CAAA,IAAiB,UAATK,CAAA,GAARL,CAAA,CAAUM,OAAA,UAAV,MAAiBD,CAAA,IAAjBA,CAAA,CAAmBI,aAAA,EAAe;QAChGN,CAAA,CAAEO,cAAA;QACF,IAAMX,CAAA,GAAmB,IAAIY,UAAA,CAAW,SAAS;UAC/CJ,QAAA,GAAU;UAEVK,OAAA,GAAS;UACTC,UAAA,GAAY;QAAA;QAGdX,CAAA,CAAmBI,OAAA,IAAU,GAC7BN,CAAA,CAASM,OAAA,CAAQG,aAAA,CAAcV,CAAA,CACjC;MAAA,OAAWG,CAAA,CAAmBI,OAAA,KAC5BJ,CAAA,CAAmBI,OAAA,IAAU,EAEjC;IAAA,GACA,CAACJ,CAAA,EAAoBF,CAAA;EAAA,CAIzB;AAAA;AAAA,SAAAD,CAAA,IAAAe,2BAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
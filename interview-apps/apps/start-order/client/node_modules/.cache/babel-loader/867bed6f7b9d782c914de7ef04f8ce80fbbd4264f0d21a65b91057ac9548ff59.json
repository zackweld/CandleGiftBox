{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('safe-regex-test');\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\nvar $trim = require('string.prototype.trim');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/13.0/#sec-stringtonumber\n\nmodule.exports = function StringToNumber(argument) {\n  if (Type(argument) !== 'String') {\n    throw new $TypeError('Assertion failed: `argument` is not a String');\n  }\n  if (isBinary(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 2));\n  }\n  if (isOctal(argument)) {\n    return $Number($parseInteger($strSlice(argument, 2), 8));\n  }\n  if (hasNonWS(argument) || isInvalidHexLiteral(argument)) {\n    return NaN;\n  }\n  var trimmed = $trim(argument);\n  if (trimmed !== argument) {\n    return StringToNumber(trimmed);\n  }\n  return $Number(argument);\n};","map":{"version":3,"names":["GetIntrinsic","require","$Number","$RegExp","$TypeError","$parseInteger","callBound","regexTester","$strSlice","isBinary","isOctal","isInvalidHexLiteral","nonWS","join","nonWSregex","hasNonWS","$trim","Type","module","exports","StringToNumber","argument","NaN","trimmed"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/es-abstract/2023/StringToNumber.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $Number = GetIntrinsic('%Number%');\nvar $RegExp = GetIntrinsic('%RegExp%');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar $parseInteger = GetIntrinsic('%parseInt%');\n\nvar callBound = require('call-bind/callBound');\nvar regexTester = require('safe-regex-test');\n\nvar $strSlice = callBound('String.prototype.slice');\nvar isBinary = regexTester(/^0b[01]+$/i);\nvar isOctal = regexTester(/^0o[0-7]+$/i);\nvar isInvalidHexLiteral = regexTester(/^[-+]0x[0-9a-f]+$/i);\nvar nonWS = ['\\u0085', '\\u200b', '\\ufffe'].join('');\nvar nonWSregex = new $RegExp('[' + nonWS + ']', 'g');\nvar hasNonWS = regexTester(nonWSregex);\n\nvar $trim = require('string.prototype.trim');\n\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/13.0/#sec-stringtonumber\n\nmodule.exports = function StringToNumber(argument) {\n\tif (Type(argument) !== 'String') {\n\t\tthrow new $TypeError('Assertion failed: `argument` is not a String');\n\t}\n\tif (isBinary(argument)) {\n\t\treturn $Number($parseInteger($strSlice(argument, 2), 2));\n\t}\n\tif (isOctal(argument)) {\n\t\treturn $Number($parseInteger($strSlice(argument, 2), 8));\n\t}\n\tif (hasNonWS(argument) || isInvalidHexLiteral(argument)) {\n\t\treturn NaN;\n\t}\n\tvar trimmed = $trim(argument);\n\tif (trimmed !== argument) {\n\t\treturn StringToNumber(trimmed);\n\t}\n\treturn $Number(argument);\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,OAAO,GAAGF,YAAY,CAAC,UAAU,CAAC;AACtC,IAAIG,OAAO,GAAGH,YAAY,CAAC,UAAU,CAAC;AACtC,IAAII,UAAU,GAAGJ,YAAY,CAAC,aAAa,CAAC;AAC5C,IAAIK,aAAa,GAAGL,YAAY,CAAC,YAAY,CAAC;AAE9C,IAAIM,SAAS,GAAGL,OAAO,CAAC,qBAAqB,CAAC;AAC9C,IAAIM,WAAW,GAAGN,OAAO,CAAC,iBAAiB,CAAC;AAE5C,IAAIO,SAAS,GAAGF,SAAS,CAAC,wBAAwB,CAAC;AACnD,IAAIG,QAAQ,GAAGF,WAAW,CAAC,YAAY,CAAC;AACxC,IAAIG,OAAO,GAAGH,WAAW,CAAC,aAAa,CAAC;AACxC,IAAII,mBAAmB,GAAGJ,WAAW,CAAC,oBAAoB,CAAC;AAC3D,IAAIK,KAAK,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AACnD,IAAIC,UAAU,GAAG,IAAIX,OAAO,CAAC,GAAG,GAAGS,KAAK,GAAG,GAAG,EAAE,GAAG,CAAC;AACpD,IAAIG,QAAQ,GAAGR,WAAW,CAACO,UAAU,CAAC;AAEtC,IAAIE,KAAK,GAAGf,OAAO,CAAC,uBAAuB,CAAC;AAE5C,IAAIgB,IAAI,GAAGhB,OAAO,CAAC,QAAQ,CAAC;;AAE5B;;AAEAiB,MAAM,CAACC,OAAO,GAAG,SAASC,cAAcA,CAACC,QAAQ,EAAE;EAClD,IAAIJ,IAAI,CAACI,QAAQ,CAAC,KAAK,QAAQ,EAAE;IAChC,MAAM,IAAIjB,UAAU,CAAC,8CAA8C,CAAC;EACrE;EACA,IAAIK,QAAQ,CAACY,QAAQ,CAAC,EAAE;IACvB,OAAOnB,OAAO,CAACG,aAAa,CAACG,SAAS,CAACa,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzD;EACA,IAAIX,OAAO,CAACW,QAAQ,CAAC,EAAE;IACtB,OAAOnB,OAAO,CAACG,aAAa,CAACG,SAAS,CAACa,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzD;EACA,IAAIN,QAAQ,CAACM,QAAQ,CAAC,IAAIV,mBAAmB,CAACU,QAAQ,CAAC,EAAE;IACxD,OAAOC,GAAG;EACX;EACA,IAAIC,OAAO,GAAGP,KAAK,CAACK,QAAQ,CAAC;EAC7B,IAAIE,OAAO,KAAKF,QAAQ,EAAE;IACzB,OAAOD,cAAc,CAACG,OAAO,CAAC;EAC/B;EACA,OAAOrB,OAAO,CAACmB,QAAQ,CAAC;AACzB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
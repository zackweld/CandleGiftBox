{"ast":null,"code":"import { defineProperty as e } from \"../../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport l from \"react\";\nimport t from \"classnames\";\nimport r from \"../TableCell/TableCell.js\";\nimport o from \"../../Skeleton/Skeleton.js\";\nimport s from \"./TableCellSkeleton.module.scss.js\";\nimport { getStyle as a } from \"../../../helpers/typesciptCssModulesHelper.js\";\nimport { getSkeletonType as m } from \"../Table/tableHelpers.js\";\nimport { camelCase as p } from \"lodash-es\";\nvar i = function (i) {\n  var n = i.type,\n    f = void 0 === n ? \"long-text\" : n,\n    u = [\"long-text\", \"medium-text\"].includes(f);\n  return l.createElement(r, null, l.createElement(o, {\n    type: m(f),\n    wrapperClassName: t(s.tableCellSkeletonWrapper, a(s, p(f))),\n    className: t(s.tableCellSkeleton, e({}, a(s, p(f)), !u)),\n    fullWidth: !0\n  }));\n};\nexport { i as default };","map":{"version":3,"names":["i","TableCellSkeleton","n","type","f","u","includes","l","createElement","r","o","m","wrapperClassName","t","s","tableCellSkeletonWrapper","a","p","className","tableCellSkeleton","e","fullWidth","default"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/components/Table/TableCellSkeleton/TableCellSkeleton.tsx"],"sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport TableCell from \"../TableCell/TableCell\";\nimport Skeleton from \"../../Skeleton/Skeleton\";\nimport styles from \"./TableCellSkeleton.module.scss\";\nimport { VibeComponentProps } from \"../../../types\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport { TableLoadingStateType } from \"../Table/Table\";\nimport { getSkeletonType } from \"../Table/tableHelpers\";\nimport { camelCase } from \"lodash-es\";\n\nexport interface TableCellSkeletonProps extends VibeComponentProps {\n  type?: TableLoadingStateType;\n  short?: boolean;\n}\n\nconst TableCellSkeleton: React.FC<TableCellSkeletonProps> = ({ type = \"long-text\" }) => {\n  const isText = [\"long-text\", \"medium-text\"].includes(type);\n  return (\n    <TableCell>\n      <Skeleton\n        type={getSkeletonType(type)}\n        wrapperClassName={cx(styles.tableCellSkeletonWrapper, getStyle(styles, camelCase(type)))}\n        className={cx(styles.tableCellSkeleton, { [getStyle(styles, camelCase(type))]: !isText })}\n        fullWidth\n      />\n    </TableCell>\n  );\n};\n\nexport default TableCellSkeleton;\n"],"mappings":";;;;;;;;;AAgBA,IAAMA,CAAA,GAAsD,SAAAC,CAArCD,CAAA;EAAgE,IAAAE,CAAA,GAAAF,CAAA,CAAxBG,IAAA;IAAAC,CAAA,QAAO,MAAHF,CAAA,GAAG,cAAWA,CAAA;IACzEG,CAAA,GAAS,CAAC,aAAa,eAAeC,QAAA,CAASF,CAAA;EACrD,OACEG,CAAA,CAAAC,aAAA,CAACC,CAAA,EAAS,MACRF,CAAA,CAACC,aAAA,CAAAE,CAAA,EACC;IAAAP,IAAA,EAAMQ,CAAA,CAAgBP,CAAA;IACtBQ,gBAAA,EAAkBC,CAAA,CAAGC,CAAA,CAAOC,wBAAA,EAA0BC,CAAA,CAASF,CAAA,EAAQG,CAAA,CAAUb,CAAA;IACjFc,SAAA,EAAWL,CAAA,CAAGC,CAAA,CAAOK,iBAAA,EAAiBC,CAAA,KAAKJ,CAAA,CAASF,CAAA,EAAQG,CAAA,CAAUb,CAAA,KAAUC,CAAA;IAChFgB,SAAA,GAAS;EAAA,GAIjB;AAAA;AAAA,SAAArB,CAAA,IAAAsB,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
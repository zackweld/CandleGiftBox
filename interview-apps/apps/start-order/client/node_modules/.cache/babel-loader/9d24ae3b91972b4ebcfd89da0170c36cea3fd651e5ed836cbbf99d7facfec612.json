{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\nvar Call = require('./Call');\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\nvar Get = require('./Get');\nvar HasProperty = require('./HasProperty');\nvar IsArray = require('./IsArray');\nvar LengthOfArrayLike = require('./LengthOfArrayLike');\nvar ToString = require('./ToString');\n\n// https://262.ecma-international.org/11.0/#sec-flattenintoarray\n\nmodule.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {\n  var mapperFunction;\n  if (arguments.length > 5) {\n    mapperFunction = arguments[5];\n  }\n  var targetIndex = start;\n  var sourceIndex = 0;\n  while (sourceIndex < sourceLen) {\n    var P = ToString(sourceIndex);\n    var exists = HasProperty(source, P);\n    if (exists === true) {\n      var element = Get(source, P);\n      if (typeof mapperFunction !== 'undefined') {\n        if (arguments.length <= 6) {\n          throw new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');\n        }\n        element = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);\n      }\n      var shouldFlatten = false;\n      if (depth > 0) {\n        shouldFlatten = IsArray(element);\n      }\n      if (shouldFlatten) {\n        var elementLen = LengthOfArrayLike(element);\n        targetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);\n      } else {\n        if (targetIndex >= MAX_SAFE_INTEGER) {\n          throw new $TypeError('index too large');\n        }\n        CreateDataPropertyOrThrow(target, ToString(targetIndex), element);\n        targetIndex += 1;\n      }\n    }\n    sourceIndex += 1;\n  }\n  return targetIndex;\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","MAX_SAFE_INTEGER","Call","CreateDataPropertyOrThrow","Get","HasProperty","IsArray","LengthOfArrayLike","ToString","module","exports","FlattenIntoArray","target","source","sourceLen","start","depth","mapperFunction","arguments","length","targetIndex","sourceIndex","P","exists","element","shouldFlatten","elementLen"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/es-abstract/2023/FlattenIntoArray.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar MAX_SAFE_INTEGER = require('../helpers/maxSafeInteger');\n\nvar Call = require('./Call');\nvar CreateDataPropertyOrThrow = require('./CreateDataPropertyOrThrow');\nvar Get = require('./Get');\nvar HasProperty = require('./HasProperty');\nvar IsArray = require('./IsArray');\nvar LengthOfArrayLike = require('./LengthOfArrayLike');\nvar ToString = require('./ToString');\n\n// https://262.ecma-international.org/11.0/#sec-flattenintoarray\n\nmodule.exports = function FlattenIntoArray(target, source, sourceLen, start, depth) {\n\tvar mapperFunction;\n\tif (arguments.length > 5) {\n\t\tmapperFunction = arguments[5];\n\t}\n\n\tvar targetIndex = start;\n\tvar sourceIndex = 0;\n\twhile (sourceIndex < sourceLen) {\n\t\tvar P = ToString(sourceIndex);\n\t\tvar exists = HasProperty(source, P);\n\t\tif (exists === true) {\n\t\t\tvar element = Get(source, P);\n\t\t\tif (typeof mapperFunction !== 'undefined') {\n\t\t\t\tif (arguments.length <= 6) {\n\t\t\t\t\tthrow new $TypeError('Assertion failed: thisArg is required when mapperFunction is provided');\n\t\t\t\t}\n\t\t\t\telement = Call(mapperFunction, arguments[6], [element, sourceIndex, source]);\n\t\t\t}\n\t\t\tvar shouldFlatten = false;\n\t\t\tif (depth > 0) {\n\t\t\t\tshouldFlatten = IsArray(element);\n\t\t\t}\n\t\t\tif (shouldFlatten) {\n\t\t\t\tvar elementLen = LengthOfArrayLike(element);\n\t\t\t\ttargetIndex = FlattenIntoArray(target, element, elementLen, targetIndex, depth - 1);\n\t\t\t} else {\n\t\t\t\tif (targetIndex >= MAX_SAFE_INTEGER) {\n\t\t\t\t\tthrow new $TypeError('index too large');\n\t\t\t\t}\n\t\t\t\tCreateDataPropertyOrThrow(target, ToString(targetIndex), element);\n\t\t\t\ttargetIndex += 1;\n\t\t\t}\n\t\t}\n\t\tsourceIndex += 1;\n\t}\n\n\treturn targetIndex;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAa,CAAC;AAE5C,IAAIG,gBAAgB,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AAE3D,IAAIG,IAAI,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAII,yBAAyB,GAAGJ,OAAO,CAAC,6BAA6B,CAAC;AACtE,IAAIK,GAAG,GAAGL,OAAO,CAAC,OAAO,CAAC;AAC1B,IAAIM,WAAW,GAAGN,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIO,OAAO,GAAGP,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIQ,iBAAiB,GAAGR,OAAO,CAAC,qBAAqB,CAAC;AACtD,IAAIS,QAAQ,GAAGT,OAAO,CAAC,YAAY,CAAC;;AAEpC;;AAEAU,MAAM,CAACC,OAAO,GAAG,SAASC,gBAAgBA,CAACC,MAAM,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,KAAK,EAAE;EACnF,IAAIC,cAAc;EAClB,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACzBF,cAAc,GAAGC,SAAS,CAAC,CAAC,CAAC;EAC9B;EAEA,IAAIE,WAAW,GAAGL,KAAK;EACvB,IAAIM,WAAW,GAAG,CAAC;EACnB,OAAOA,WAAW,GAAGP,SAAS,EAAE;IAC/B,IAAIQ,CAAC,GAAGd,QAAQ,CAACa,WAAW,CAAC;IAC7B,IAAIE,MAAM,GAAGlB,WAAW,CAACQ,MAAM,EAAES,CAAC,CAAC;IACnC,IAAIC,MAAM,KAAK,IAAI,EAAE;MACpB,IAAIC,OAAO,GAAGpB,GAAG,CAACS,MAAM,EAAES,CAAC,CAAC;MAC5B,IAAI,OAAOL,cAAc,KAAK,WAAW,EAAE;QAC1C,IAAIC,SAAS,CAACC,MAAM,IAAI,CAAC,EAAE;UAC1B,MAAM,IAAInB,UAAU,CAAC,uEAAuE,CAAC;QAC9F;QACAwB,OAAO,GAAGtB,IAAI,CAACe,cAAc,EAAEC,SAAS,CAAC,CAAC,CAAC,EAAE,CAACM,OAAO,EAAEH,WAAW,EAAER,MAAM,CAAC,CAAC;MAC7E;MACA,IAAIY,aAAa,GAAG,KAAK;MACzB,IAAIT,KAAK,GAAG,CAAC,EAAE;QACdS,aAAa,GAAGnB,OAAO,CAACkB,OAAO,CAAC;MACjC;MACA,IAAIC,aAAa,EAAE;QAClB,IAAIC,UAAU,GAAGnB,iBAAiB,CAACiB,OAAO,CAAC;QAC3CJ,WAAW,GAAGT,gBAAgB,CAACC,MAAM,EAAEY,OAAO,EAAEE,UAAU,EAAEN,WAAW,EAAEJ,KAAK,GAAG,CAAC,CAAC;MACpF,CAAC,MAAM;QACN,IAAII,WAAW,IAAInB,gBAAgB,EAAE;UACpC,MAAM,IAAID,UAAU,CAAC,iBAAiB,CAAC;QACxC;QACAG,yBAAyB,CAACS,MAAM,EAAEJ,QAAQ,CAACY,WAAW,CAAC,EAAEI,OAAO,CAAC;QACjEJ,WAAW,IAAI,CAAC;MACjB;IACD;IACAC,WAAW,IAAI,CAAC;EACjB;EAEA,OAAOD,WAAW;AACnB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
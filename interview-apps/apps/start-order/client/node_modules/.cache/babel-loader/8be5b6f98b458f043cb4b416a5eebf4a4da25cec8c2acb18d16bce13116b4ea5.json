{"ast":null,"code":"import e, { forwardRef as a } from \"react\";\nimport r from \"classnames\";\nimport { noop as s } from \"lodash-es\";\nimport { Switch as t } from \"../Switch/Switch.js\";\nimport { MockToggle as i } from \"./MockToggle.js\";\nimport { backwardCompatibilityForProperties as o } from \"../../helpers/backwardCompatibilityForProperties.js\";\nimport d from \"./Toggle.module.scss.js\";\nimport { getTestId as l, ComponentDefaultTestId as m } from \"../../tests/testIds.js\";\nvar n = a(function (a, n) {\n  var c = a.id,\n    f = a.toggleSelectedClassName,\n    p = a.isDefaultSelected,\n    v = void 0 === p || p,\n    u = a.isSelected,\n    C = a.onChange,\n    b = void 0 === C ? s : C,\n    g = a.value,\n    h = a.name,\n    N = a.disabled,\n    O = a.isDisabled,\n    T = a.ariaLabel,\n    j = a.ariaControls,\n    w = a.areLabelsHidden,\n    x = void 0 !== w && w,\n    L = a.onOverrideText,\n    S = void 0 === L ? \"On\" : L,\n    k = a.offOverrideText,\n    E = void 0 === k ? \"Off\" : k,\n    z = a.size,\n    D = void 0 === z ? \"medium\" : z,\n    G = a[\"data-testid\"],\n    H = o([a.className, a.componentClassName]),\n    I = o([N, O], !1),\n    y = r(d.wrapper),\n    F = r(d.toggleInput);\n  return e.createElement(t, {\n    defaultChecked: v,\n    checked: u,\n    id: c,\n    wrapperClassName: y,\n    onChange: b,\n    value: g,\n    name: h,\n    disabled: I,\n    ariaLabel: T,\n    ariaControls: j,\n    inputClassName: F,\n    ref: n,\n    \"data-testid\": G || l(m.TOGGLE)\n  }, e.createElement(i, {\n    areLabelsHidden: x,\n    offOverrideText: E,\n    onOverrideText: S,\n    disabled: I,\n    className: H,\n    selectedClassName: f,\n    size: D\n  }));\n});\nexport { n as default };","map":{"version":3,"names":["n","a","c","id","f","toggleSelectedClassName","p","isDefaultSelected","v","u","isSelected","C","onChange","b","s","g","value","h","name","N","disabled","O","isDisabled","T","ariaLabel","j","ariaControls","w","areLabelsHidden","x","L","onOverrideText","S","k","offOverrideText","E","z","size","D","G","H","o","className","componentClassName","I","y","r","d","wrapper","F","toggleInput","e","createElement","t","defaultChecked","checked","wrapperClassName","inputClassName","ref","l","m","TOGGLE","i","selectedClassName","default"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/components/Toggle/Toggle.tsx"],"sourcesContent":["import React, { ChangeEvent, forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"lodash-es\";\nimport { Switch } from \"../Switch/Switch\";\nimport { MockToggle } from \"./MockToggle\";\nimport { backwardCompatibilityForProperties } from \"../../helpers/backwardCompatibilityForProperties\";\nimport { VibeComponent, VibeComponentProps } from \"../../types\";\nimport styles from \"./Toggle.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { Sizes } from \"./Toggle.types\";\n\nexport interface ToggleProps extends VibeComponentProps {\n  /**\n   * @deprecated - use className instead\n   */\n  componentClassName?: string;\n  /**\n   * ClassName to override styles of selected toggle\n   */\n  toggleSelectedClassName?: string;\n  isDefaultSelected?: boolean;\n  isSelected?: boolean;\n  onChange?: (value: boolean, event: ChangeEvent<HTMLInputElement>) => void;\n  value?: string;\n  name?: string;\n  /**\n   * @deprecated - use disabled instead\n   */\n  isDisabled?: boolean;\n  disabled?: boolean;\n  areLabelsHidden?: boolean;\n  onOverrideText?: string;\n  offOverrideText?: string;\n  ariaLabel?: string;\n  ariaControls?: string;\n  size?: Sizes;\n}\n\nconst Toggle: VibeComponent<ToggleProps, HTMLInputElement> = forwardRef(\n  (\n    {\n      id,\n      // Backward compatibility for props naming\n      componentClassName,\n      className,\n      toggleSelectedClassName,\n      isDefaultSelected = true,\n      isSelected,\n      onChange = NOOP,\n      value,\n      name,\n      disabled,\n      // Backward compatibility for props naming\n      isDisabled,\n      ariaLabel,\n      ariaControls,\n      areLabelsHidden = false,\n      onOverrideText = \"On\",\n      offOverrideText = \"Off\",\n      size = \"medium\",\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const overrideClassName = backwardCompatibilityForProperties([className, componentClassName]) as string;\n    const overrideDisabled = backwardCompatibilityForProperties([disabled, isDisabled], false) as boolean;\n    const wrapperClassName = cx(styles.wrapper);\n    const inputClassName = cx(styles.toggleInput);\n\n    return (\n      <Switch\n        defaultChecked={isDefaultSelected}\n        checked={isSelected}\n        id={id}\n        wrapperClassName={wrapperClassName}\n        onChange={onChange}\n        value={value}\n        name={name}\n        disabled={overrideDisabled}\n        ariaLabel={ariaLabel}\n        ariaControls={ariaControls}\n        inputClassName={inputClassName}\n        ref={ref}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TOGGLE)}\n      >\n        <MockToggle\n          areLabelsHidden={areLabelsHidden}\n          offOverrideText={offOverrideText}\n          onOverrideText={onOverrideText}\n          disabled={overrideDisabled}\n          className={overrideClassName}\n          selectedClassName={toggleSelectedClassName}\n          size={size}\n        />\n      </Switch>\n    );\n  }\n);\n\nexport default Toggle;\n"],"mappings":";;;;;;;;AAsCM,IAAAA,CAAA,GAAuDC,CAAA,CAC3D,UAAAA,CAAA,EAuBED,CAAA;EACE,IAtBAE,CAAA,GAAED,CAAA,CAAFE,EAAA;IAIAC,CAAA,GAAuBH,CAAA,CAAvBI,uBAAA;IAAuBC,CAAA,GAAAL,CAAA,CACvBM,iBAAA;IAAAC,CAAA,QAAoB,MAAHF,CAAA,IAAOA,CAAA;IACxBG,CAAA,GAAUR,CAAA,CAAVS,UAAA;IAAUC,CAAA,GAAAV,CAAA,CACVW,QAAA;IAAAC,CAAA,QAAW,MAAHF,CAAA,GAAGG,CAAA,GAAIH,CAAA;IACfI,CAAA,GAAKd,CAAA,CAALe,KAAA;IACAC,CAAA,GAAIhB,CAAA,CAAJiB,IAAA;IACAC,CAAA,GAAQlB,CAAA,CAARmB,QAAA;IAEAC,CAAA,GAAUpB,CAAA,CAAVqB,UAAA;IACAC,CAAA,GAAStB,CAAA,CAATuB,SAAA;IACAC,CAAA,GAAYxB,CAAA,CAAZyB,YAAA;IAAYC,CAAA,GAAA1B,CAAA,CACZ2B,eAAA;IAAAC,CAAA,QAAkB,MAAHF,CAAA,IAAQA,CAAA;IAAAG,CAAA,GAAA7B,CAAA,CACvB8B,cAAA;IAAAC,CAAA,QAAiB,MAAHF,CAAA,GAAG,OAAIA,CAAA;IAAAG,CAAA,GAAAhC,CAAA,CACrBiC,eAAA;IAAAC,CAAA,QAAkB,MAAHF,CAAA,GAAG,QAAKA,CAAA;IAAAG,CAAA,GAAAnC,CAAA,CACvBoC,IAAA;IAAAC,CAAA,QAAO,MAAHF,CAAA,GAAG,WAAQA,CAAA;IACAG,CAAA,GAAUtC,CAAA,CAAzB;IAIIuC,CAAA,GAAoBC,CAAA,CAAmC,CApBlDxC,CAAA,CAATyC,SAAA,EADkBzC,CAAA,CAAlB0C,kBAAA;IAsBIC,CAAA,GAAmBH,CAAA,CAAmC,CAACtB,CAAA,EAAUE,CAAA,IAAa;IAC9EwB,CAAA,GAAmBC,CAAA,CAAGC,CAAA,CAAOC,OAAA;IAC7BC,CAAA,GAAiBH,CAAA,CAAGC,CAAA,CAAOG,WAAA;EAEjC,OACEC,CAAA,CAACC,aAAA,CAAAC,CAAA,EACC;IAAAC,cAAA,EAAgB9C,CAAA;IAChB+C,OAAA,EAAS9C,CAAA;IACTN,EAAA,EAAID,CAAA;IACJsD,gBAAA,EAAkBX,CAAA;IAClBjC,QAAA,EAAUC,CAAA;IACVG,KAAA,EAAOD,CAAA;IACPG,IAAA,EAAMD,CAAA;IACNG,QAAA,EAAUwB,CAAA;IACVpB,SAAA,EAAWD,CAAA;IACXG,YAAA,EAAcD,CAAA;IACdgC,cAAA,EAAgBR,CAAA;IAChBS,GAAA,EAAK1D,CAAA;IACQ,eAAAuC,CAAA,IAAcoB,CAAA,CAAUC,CAAA,CAAuBC,MAAA;EAAA,GAE5DV,CAAA,CAAAC,aAAA,CAACU,CAAA,EAAU;IACTlC,eAAA,EAAiBC,CAAA;IACjBK,eAAA,EAAiBC,CAAA;IACjBJ,cAAA,EAAgBC,CAAA;IAChBZ,QAAA,EAAUwB,CAAA;IACVF,SAAA,EAAWF,CAAA;IACXuB,iBAAA,EAAmB3D,CAAA;IACnBiC,IAAA,EAAMC;EAAA,GAId;AAAA;AAAA,SAAAtC,CAAA,IAAAgE,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
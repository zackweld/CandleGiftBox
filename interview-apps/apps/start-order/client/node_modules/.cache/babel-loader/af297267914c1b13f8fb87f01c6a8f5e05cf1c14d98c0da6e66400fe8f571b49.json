{"ast":null,"code":"import { defineProperty as e, toConsumableArray as t } from \"../../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport a, { forwardRef as r, useMemo as s } from \"react\";\nimport o from \"classnames\";\nimport \"../../../constants/dialog.js\";\nimport { SIZES as i } from \"../../../constants/sizes.js\";\nimport \"../../../constants/positions.js\";\nimport { getStyle as l } from \"../../../helpers/typesciptCssModulesHelper.js\";\nimport n from \"../PercentageLabel/PercentageLabel.js\";\nimport { ProgressBarStyle as m, ProgressBarType as c } from \"./LinearProgressBarConstants.js\";\nimport { calculatePercentage as d, getProgressBarClassNames as u } from \"./LinearProgressBarHelpers.js\";\nimport p from \"./Bar/Bar.js\";\nimport { withStaticProps as v } from \"../../../types/withStaticProps.js\";\nimport { ComponentDefaultTestId as f } from \"../../../tests/constants.js\";\nimport { getTestId as y } from \"../../../tests/testIds.js\";\nimport b from \"./LinearProgressBar.module.scss.js\";\nvar R = v(r(function (r, v) {\n  var R = r.min,\n    E = void 0 === R ? 0 : R,\n    P = r.max,\n    j = void 0 === P ? 100 : P,\n    g = r.value,\n    A = void 0 === g ? 0 : g,\n    N = r.valueSecondary,\n    S = void 0 === N ? 0 : N,\n    L = r.animated,\n    _ = void 0 === L || L,\n    B = r.barStyle,\n    I = void 0 === B ? m.PRIMARY : B,\n    M = r.className,\n    Y = r.size,\n    h = void 0 === Y ? i.SMALL : Y,\n    x = r.indicateProgress,\n    C = void 0 !== x && x,\n    O = r.multi,\n    z = void 0 !== O && O,\n    H = r.multiValues,\n    w = void 0 === H ? [] : H,\n    D = r.ariaLabel,\n    F = void 0 === D ? \"\" : D,\n    W = r.id,\n    k = r.fullWidth,\n    G = void 0 !== k && k,\n    T = r[\"data-testid\"],\n    V = s(function () {\n      return o(b.wrapper, e(e({}, l(b, \"\" + h), h), b.fullWidth, G), M);\n    }, [h, G, M]),\n    q = s(function () {\n      if (z) {\n        var e = w && w.length && w[0].value;\n        return null == e ? 0 : d(e, E, j);\n      }\n      return null == A ? 0 : d(A, E, j);\n    }, [A, E, j, z, w]),\n    J = s(function () {\n      return z ? a.createElement(a.Fragment, null, t(w).reverse().map(function (e, t) {\n        var r = e.value,\n          s = e.color;\n        return a.createElement(p, {\n          className: u(r),\n          barStyle: m.NONE,\n          value: r,\n          animated: _,\n          type: c.PRIMARY,\n          color: s,\n          min: E,\n          max: j,\n          id: \"bar_\".concat(s, \"_\").concat(t),\n          key: \"bar_\".concat(s, \"_\").concat(t)\n        });\n      })) : null;\n    }, [E, j, _, w, z]),\n    K = C ? a.createElement(n, {\n      forElement: \"linear-progress-bar\",\n      value: q\n    }) : null,\n    Q = z ? null : a.createElement(a.Fragment, null, a.createElement(p, {\n      className: u(A),\n      barLabelName: F,\n      barStyle: I,\n      value: S,\n      animated: _,\n      type: c.SECONDARY,\n      min: E,\n      max: j,\n      \"data-testid\": f.BAR_SECONDARY\n    }), a.createElement(p, {\n      className: u(A),\n      barStyle: I,\n      value: A,\n      animated: _,\n      type: c.PRIMARY,\n      min: E,\n      max: j,\n      \"data-testid\": f.BAR_PRIMARY\n    }));\n  return a.createElement(\"div\", {\n    className: V,\n    ref: v,\n    id: W,\n    \"data-testsid\": T || y(f.LINEAR_PROGRESS_BAR, W)\n  }, a.createElement(\"div\", {\n    className: b.container\n  }, Q, J), K);\n}), {\n  styles: m,\n  barStyles: m,\n  types: c,\n  barTypes: c,\n  sizes: i\n});\nexport { R as default };","map":{"version":3,"names":["R","v","r","min","E","P","max","j","g","value","A","N","valueSecondary","S","L","animated","_","B","barStyle","I","m","PRIMARY","M","className","Y","size","h","i","SMALL","x","indicateProgress","C","O","multi","z","H","multiValues","w","D","ariaLabel","F","W","id","k","fullWidth","G","T","V","s","o","b","wrapper","e","l","q","length","d","J","a","createElement","Fragment","t","reverse","map","color","p","u","NONE","type","c","concat","key","K","n","forElement","Q","barLabelName","SECONDARY","f","BAR_SECONDARY","BAR_PRIMARY","ref","y","LINEAR_PROGRESS_BAR","container","styles","barStyles","types","barTypes","sizes","default"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBoxDemo/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/components/ProgressBars/LinearProgressBar/LinearProgressBar.tsx"],"sourcesContent":["import React, { forwardRef, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../../constants\";\nimport { getStyle } from \"../../../helpers/typesciptCssModulesHelper\";\nimport PercentageLabel from \"../PercentageLabel/PercentageLabel\";\nimport { ProgressBarStyle, ProgressBarType } from \"./LinearProgressBarConstants\";\nimport { calculatePercentage, getProgressBarClassNames, Size } from \"./LinearProgressBarHelpers\";\nimport Bar from \"./Bar/Bar\";\nimport { VibeComponent, VibeComponentProps, withStaticProps } from \"../../../types\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport styles from \"./LinearProgressBar.module.scss\";\n\nexport interface LinearProgressBarProps extends VibeComponentProps {\n  /**\n   * Determine the progress bar style (Supported options exposed through `LinearProgressBar.styles`).\n   */\n  barStyle?: ProgressBarStyle;\n  /**\n   * The progress bar starting value.\n   */\n  min?: number;\n  /**\n   * The progress bar ending value.\n   */\n  max?: number;\n  /**\n   * The progress bar current value.\n   */\n  value?: number;\n  /**\n   * The progress bar secondary value.\n   */\n  valueSecondary?: number;\n  /**\n   * If set to *true*, animations are used.\n   */\n  animated?: boolean;\n  /**\n   * Set external styling to the progress bar.\n   */\n  className?: string;\n  /**\n   * Determine the progress bar height (Supported options exposed through `LinearProgressBar.sizes`)\n   */\n  size?: Size;\n  /**\n   * Show progress bar progression in percentages\n   */\n  indicateProgress?: boolean;\n  /**\n   * Use multiple bars.\n   * ***Note:*** `value`, `valueSecondary` & `barStyle` won't be used\n   */\n  multi?: boolean;\n  /**\n   * Array of bar value objects {\n   * `value` - The progress value,\n   * `color` - hex [`#000000` ~ `#ffffff`] of the current bar\n   * }\n   */\n  multiValues?: {\n    /**\n     * The progress bar current value.\n     */\n    value?: number;\n    /**\n     * The bar color in hex - #000000 ~ #ffffff\n     */\n    color?: string;\n  }[];\n  /** ARIA description for the progress bar */\n  ariaLabel?: string;\n  /** Is the progress bar spread across the entire container width (width: 100%) */\n  fullWidth?: boolean;\n}\n\nconst LinearProgressBar: VibeComponent<LinearProgressBarProps, HTMLDivElement> & {\n  styles?: typeof ProgressBarStyle;\n  barStyles?: typeof ProgressBarStyle;\n  types?: typeof ProgressBarType;\n  barTypes?: typeof ProgressBarType;\n  sizes?: typeof SIZES;\n} = forwardRef(\n  (\n    {\n      min = 0,\n      max = 100,\n      value = 0,\n      valueSecondary = 0,\n      animated = true,\n      barStyle = ProgressBarStyle.PRIMARY,\n      className,\n      size = SIZES.SMALL,\n      indicateProgress = false,\n      multi = false,\n      multiValues = [],\n      ariaLabel = \"\",\n      id,\n      fullWidth = false,\n      \"data-testid\": dataTestId\n    },\n    ref\n  ) => {\n    const wrapperClassName = useMemo(() => {\n      return cx(\n        styles.wrapper,\n        {\n          [getStyle(styles, size.toString())]: size,\n          [styles.fullWidth]: fullWidth\n        },\n        className\n      );\n    }, [size, fullWidth, className]);\n\n    const valuePercentage = useMemo(() => {\n      if (multi) {\n        const firstValue = multiValues && multiValues.length && multiValues[0].value;\n        if (firstValue === null || firstValue === undefined) return 0;\n        return calculatePercentage(firstValue, min, max);\n      }\n      if (value === null || value === undefined) return 0;\n      return calculatePercentage(value, min, max);\n    }, [value, min, max, multi, multiValues]);\n\n    const renderMultiBars = useMemo(() => {\n      if (!multi) return null;\n      return (\n        <>\n          {[...multiValues].reverse().map(({ value: baseValue, color }, i) => (\n            <Bar\n              className={getProgressBarClassNames(baseValue)}\n              barStyle={ProgressBarStyle.NONE}\n              value={baseValue}\n              animated={animated}\n              type={ProgressBarType.PRIMARY}\n              color={color}\n              min={min}\n              max={max}\n              /* eslint-disable-next-line react/no-array-index-key */\n              id={`bar_${color}_${i}`}\n              key={`bar_${color}_${i}`}\n            />\n          ))}\n        </>\n      );\n    }, [min, max, animated, multiValues, multi]);\n\n    const renderPercentage = indicateProgress ? (\n      <PercentageLabel forElement=\"linear-progress-bar\" value={valuePercentage} />\n    ) : null;\n\n    const renderBaseBars = !multi ? (\n      <>\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barLabelName={ariaLabel}\n          barStyle={barStyle}\n          value={valueSecondary}\n          animated={animated}\n          type={ProgressBarType.SECONDARY}\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_SECONDARY}\n        />\n        <Bar\n          className={getProgressBarClassNames(value)}\n          barStyle={barStyle}\n          value={value}\n          animated={animated}\n          type={ProgressBarType.PRIMARY}\n          min={min}\n          max={max}\n          data-testid={ComponentDefaultTestId.BAR_PRIMARY}\n        />\n      </>\n    ) : null;\n\n    return (\n      <div\n        className={wrapperClassName}\n        ref={ref}\n        id={id}\n        data-testsid={dataTestId || getTestId(ComponentDefaultTestId.LINEAR_PROGRESS_BAR, id)}\n      >\n        <div className={styles.container}>\n          {renderBaseBars}\n          {renderMultiBars}\n        </div>\n        {renderPercentage}\n      </div>\n    );\n  }\n);\n\nexport default withStaticProps(LinearProgressBar, {\n  styles: ProgressBarStyle,\n  barStyles: ProgressBarStyle,\n  types: ProgressBarType,\n  barTypes: ProgressBarType,\n  sizes: SIZES\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
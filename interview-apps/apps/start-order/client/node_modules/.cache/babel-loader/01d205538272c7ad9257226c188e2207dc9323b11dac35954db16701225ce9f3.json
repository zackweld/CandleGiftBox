{"ast":null,"code":"import { defineProperty as e } from \"../../../_virtual/_rollupPluginBabelHelpers.js\";\nimport { camelCase as t } from \"lodash-es\";\nimport { getTestId as s, ComponentDefaultTestId as i } from \"../../tests/testIds.js\";\nimport r from \"classnames\";\nimport l from \"react\";\nimport { SkeletonType as o, SKELETON_SIZES as a, TextSkeletonSize as m, SKELETON_CUSTOM_SIZE as d } from \"./SkeletonConstants.js\";\nimport { getStyle as p } from \"../../helpers/typesciptCssModulesHelper.js\";\nimport { withStaticProps as c } from \"../../types/withStaticProps.js\";\nimport f from \"./Skeleton.module.scss.js\";\nvar n = c(function (c) {\n  var n = c.type,\n    u = void 0 === n ? o.RECTANGLE : n,\n    h = c.size,\n    v = void 0 === h ? a.CUSTOM : h,\n    j = c.className,\n    E = c.wrapperClassName,\n    N = c.width,\n    y = c.height,\n    C = c.fullWidth,\n    S = void 0 !== C && C,\n    w = c.id,\n    O = c[\"data-testid\"],\n    T = Object.values(o).includes(u) ? u : o.RECTANGLE,\n    b = Object.values(m).includes(v) ? v : d;\n  return l.createElement(\"div\", {\n    id: w,\n    className: r(f.skeleton, E, e({}, f.fullWidth, S)),\n    \"data-testid\": O || s(i.SKELETON, w)\n  }, l.createElement(\"div\", {\n    className: r(f[T], p(f, t(T + \"-\" + b)), j, e({}, f.fullWidth, S)),\n    style: {\n      width: N,\n      height: y\n    }\n  }));\n}, {\n  types: o,\n  sizes: a\n});\nexport { n as default };","map":{"version":3,"names":["n","c","type","u","o","RECTANGLE","h","size","v","a","CUSTOM","j","className","E","wrapperClassName","N","width","y","height","C","fullWidth","S","w","id","O","T","Object","values","includes","b","m","d","l","createElement","r","f","skeleton","e","s","i","SKELETON","p","t","style","types","sizes","default"],"sources":["/Users/zacharyweld/Documents/Code/CandleGiftBox/interview-apps/apps/start-order/client/node_modules/monday-ui-react-core/src/components/Skeleton/Skeleton.tsx"],"sourcesContent":["import { camelCase } from \"lodash-es\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport cx from \"classnames\";\nimport React, { FC } from \"react\";\nimport {\n  SKELETON_SIZES,\n  SkeletonSizeType,\n  SkeletonType,\n  SKELETON_CUSTOM_SIZE,\n  TextSkeletonSize\n} from \"./SkeletonConstants\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { withStaticProps, VibeComponentProps } from \"../../types\";\nimport styles from \"./Skeleton.module.scss\";\n\nexport interface SkeletonProps extends VibeComponentProps {\n  type?: SkeletonType;\n  size?: SkeletonSizeType;\n  width?: number;\n  height?: number;\n  wrapperClassName?: string;\n  /**\n   * Is the skeleton wrapper width equal to its container\n   */\n  fullWidth?: boolean;\n}\n\nconst Skeleton: FC<SkeletonProps> & {\n  types?: typeof SkeletonType;\n  sizes?: typeof SKELETON_SIZES;\n} = ({\n  type = SkeletonType.RECTANGLE,\n  size = SKELETON_SIZES.CUSTOM,\n  className,\n  wrapperClassName,\n  width,\n  height,\n  fullWidth = false,\n  id,\n  \"data-testid\": dataTestId\n}) => {\n  const skeletonType = Object.values(SkeletonType).includes(type) ? type : SkeletonType.RECTANGLE;\n\n  // Skeleton has sizes only for text type, other types support only custom size\n  const skeletonSize = (Object.values(TextSkeletonSize) as string[]).includes(size) ? size : SKELETON_CUSTOM_SIZE;\n  return (\n    <div\n      id={id}\n      className={cx(styles.skeleton, wrapperClassName, { [styles.fullWidth]: fullWidth })}\n      data-testid={dataTestId || getTestId(ComponentDefaultTestId.SKELETON, id)}\n    >\n      <div\n        className={cx(styles[skeletonType], getStyle(styles, camelCase(skeletonType + \"-\" + skeletonSize)), className, {\n          [styles.fullWidth]: fullWidth\n        })}\n        style={{ width, height }}\n      />\n    </div>\n  );\n};\n\nexport default withStaticProps(Skeleton, {\n  types: SkeletonType,\n  sizes: SKELETON_SIZES\n});\n"],"mappings":";;;;;;;;;AA2BA,IAkCeA,CAAA,GAAAC,CAAA,CA/BX,UAHUA,CAAA;EAaT,IAAAD,CAAA,GAAAC,CAAA,CATHC,IAAA;IAAAC,CAAA,QAAI,MAAAH,CAAA,GAAGI,CAAA,CAAaC,SAAA,GAASL,CAAA;IAAAM,CAAA,GAAAL,CAAA,CAC7BM,IAAA;IAAAC,CAAA,QAAI,MAAAF,CAAA,GAAGG,CAAA,CAAeC,MAAA,GAAMJ,CAAA;IAC5BK,CAAA,GAASV,CAAA,CAATW,SAAA;IACAC,CAAA,GAAgBZ,CAAA,CAAhBa,gBAAA;IACAC,CAAA,GAAKd,CAAA,CAALe,KAAA;IACAC,CAAA,GAAMhB,CAAA,CAANiB,MAAA;IAAMC,CAAA,GAAAlB,CAAA,CACNmB,SAAA;IAAAC,CAAA,QAAY,MAAHF,CAAA,IAAQA,CAAA;IACjBG,CAAA,GAAErB,CAAA,CAAFsB,EAAA;IACeC,CAAA,GAAUvB,CAAA,CAAzB;IAEMwB,CAAA,GAAeC,MAAA,CAAOC,MAAA,CAAOvB,CAAA,EAAcwB,QAAA,CAASzB,CAAA,IAAQA,CAAA,GAAOC,CAAA,CAAaC,SAAA;IAGhFwB,CAAA,GAAgBH,MAAA,CAAOC,MAAA,CAAOG,CAAA,EAA+BF,QAAA,CAASpB,CAAA,IAAQA,CAAA,GAAOuB,CAAA;EAC3F,OACEC,CAAA,CACEC,aAAA;IAAAV,EAAA,EAAID,CAAA;IACJV,SAAA,EAAWsB,CAAA,CAAGC,CAAA,CAAOC,QAAA,EAAUvB,CAAA,EAAgBwB,CAAA,KAAKF,CAAA,CAAOf,SAAA,EAAYC,CAAA;IAC1D,eAAAG,CAAA,IAAcc,CAAA,CAAUC,CAAA,CAAuBC,QAAA,EAAUlB,CAAA;EAAA,GAEtEU,CAAA,CACEC,aAAA;IAAArB,SAAA,EAAWsB,CAAA,CAAGC,CAAA,CAAOV,CAAA,GAAegB,CAAA,CAASN,CAAA,EAAQO,CAAA,CAAUjB,CAAA,GAAe,MAAMI,CAAA,IAAgBlB,CAAA,EAAS0B,CAAA,CAC1G,IAAAF,CAAA,CAAOf,SAAA,EAAYC,CAAA;IAEtBsB,KAAA,EAAO;MAAE3B,KAAA,EAAAD,CAAA;MAAOG,MAAA,EAAAD;IAAA;EAAA,GAIxB;AAAA,GAEyC;EACvC2B,KAAA,EAAOxC,CAAA;EACPyC,KAAA,EAAOpC;AAAA;AAAA,SAAAT,CAAA,IAAA8C,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}